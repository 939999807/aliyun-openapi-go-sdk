// Copyright 2015 Chen Xianren. All rights reserved.
// Code generated by openapi-meta; DO NOT EDIT

package aceops // import "github.com/cxr29/aliyun-openapi-go-sdk/apis/aceops/v20150909"

import (
	"errors"
	"fmt"

	"github.com/cxr29/aliyun-openapi-go-sdk"
)

var (
	_ = errors.New("")
	_ = fmt.Sprint("")
)

type API struct {
	openapi.Service
}

func New(accessKeyId, accessKeySecret string) API {
	return API{openapi.NewService(accessKeyId, accessKeySecret)}
}

func NewParams() openapi.Params {
	args := openapi.NewParams()
	args.Product = Product
	args.Style = Style
	args.Version = Version
	return args
}

const (
	Product = "Ace-ops"
	Style   = "RPC"
	Version = "2015-09-09"
)

// Query version 2015-09-09
//
// required parameters:
//  name: group, type: string
//  name: ip, type: string
//  name: name, type: string
//
// optional parameters:
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
//  name: softversion, type: string
func (api API) Query(group, ip, name string, optional openapi.M) (*QueryResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "query")
	args.Query.Set("group", group)
	args.Query.Set("ip", ip)
	args.Query.Set("name", name)
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}
	if v, ok := optional["softversion"]; ok {
		if softversion, ok := v.(string); ok {
			args.Query.Set("softversion", softversion)
		} else {
			return nil, errors.New("softversion must be string")
		}
	}

	result := new(QueryResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// QueryResponse represents the response of the api Query.
type QueryResponse struct {
	Softversion string `json:"softversion" xml:"softversion"`
	Url         string `json:"url" xml:"url"`
}

// Report version 2015-09-09
//
// required parameters:
//  name: group, type: string
//  name: ip, type: string
//  name: name, type: string
//  name: type, type: string
//
// optional parameters:
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
//  name: config, type: string
//  name: softversion, type: string
func (api API) Report(group, ip, name, typ string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "report")
	args.Query.Set("group", group)
	args.Query.Set("ip", ip)
	args.Query.Set("name", name)
	args.Query.Set("type", typ)
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}
	if v, ok := optional["config"]; ok {
		if config, ok := v.(string); ok {
			args.Query.Set("config", config)
		} else {
			return nil, errors.New("config must be string")
		}
	}
	if v, ok := optional["softversion"]; ok {
		if softversion, ok := v.(string); ok {
			args.Query.Set("softversion", softversion)
		} else {
			return nil, errors.New("softversion must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}
