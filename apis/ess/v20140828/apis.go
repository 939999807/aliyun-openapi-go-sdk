// Copyright 2015 Chen Xianren. All rights reserved.
// Code generated by openapi-meta; DO NOT EDIT

package ess

import (
	"errors"
	"fmt"

	"git.oschina.net/cxr29/aliyun-openapi-go-sdk"
)

var (
	_ = errors.New("")
	_ = fmt.Sprint("")
	_ = make(openapi.M)
)

type API struct {
	openapi.Service
}

func New(accessKeyId, accessKeySecret string) API {
	return API{openapi.NewService(accessKeyId, accessKeySecret)}
}

func NewParams() openapi.Params {
	args := openapi.NewParams()
	args.Product = Product
	args.Style = Style
	args.Version = Version
	return args
}

const (
	Product = "Ess"
	Style   = "RPC"
	Version = "2014-08-28"
)

// AttachInstances version 2014-08-28
//
// required parameters:
//  name: InstanceId.1, type: string
//  name: ScalingGroupId, type: string
//
// optional parameters:
//  name: InstanceId.10, type: string
//  name: InstanceId.11, type: string
//  name: InstanceId.12, type: string
//  name: InstanceId.13, type: string
//  name: InstanceId.14, type: string
//  name: InstanceId.15, type: string
//  name: InstanceId.16, type: string
//  name: InstanceId.17, type: string
//  name: InstanceId.18, type: string
//  name: InstanceId.19, type: string
//  name: InstanceId.2, type: string
//  name: InstanceId.20, type: string
//  name: InstanceId.3, type: string
//  name: InstanceId.4, type: string
//  name: InstanceId.5, type: string
//  name: InstanceId.6, type: string
//  name: InstanceId.7, type: string
//  name: InstanceId.8, type: string
//  name: InstanceId.9, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) AttachInstances(InstanceId1, ScalingGroupId string, optional openapi.M) (*AttachInstancesResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "AttachInstances")
	args.Query.Set("InstanceId.1", InstanceId1)
	args.Query.Set("ScalingGroupId", ScalingGroupId)
	if v, ok := optional["InstanceId.10"]; ok {
		if InstanceId10, ok := v.(string); ok {
			args.Query.Set("InstanceId.10", InstanceId10)
		} else {
			return nil, errors.New("InstanceId.10 must be string")
		}
	}
	if v, ok := optional["InstanceId.11"]; ok {
		if InstanceId11, ok := v.(string); ok {
			args.Query.Set("InstanceId.11", InstanceId11)
		} else {
			return nil, errors.New("InstanceId.11 must be string")
		}
	}
	if v, ok := optional["InstanceId.12"]; ok {
		if InstanceId12, ok := v.(string); ok {
			args.Query.Set("InstanceId.12", InstanceId12)
		} else {
			return nil, errors.New("InstanceId.12 must be string")
		}
	}
	if v, ok := optional["InstanceId.13"]; ok {
		if InstanceId13, ok := v.(string); ok {
			args.Query.Set("InstanceId.13", InstanceId13)
		} else {
			return nil, errors.New("InstanceId.13 must be string")
		}
	}
	if v, ok := optional["InstanceId.14"]; ok {
		if InstanceId14, ok := v.(string); ok {
			args.Query.Set("InstanceId.14", InstanceId14)
		} else {
			return nil, errors.New("InstanceId.14 must be string")
		}
	}
	if v, ok := optional["InstanceId.15"]; ok {
		if InstanceId15, ok := v.(string); ok {
			args.Query.Set("InstanceId.15", InstanceId15)
		} else {
			return nil, errors.New("InstanceId.15 must be string")
		}
	}
	if v, ok := optional["InstanceId.16"]; ok {
		if InstanceId16, ok := v.(string); ok {
			args.Query.Set("InstanceId.16", InstanceId16)
		} else {
			return nil, errors.New("InstanceId.16 must be string")
		}
	}
	if v, ok := optional["InstanceId.17"]; ok {
		if InstanceId17, ok := v.(string); ok {
			args.Query.Set("InstanceId.17", InstanceId17)
		} else {
			return nil, errors.New("InstanceId.17 must be string")
		}
	}
	if v, ok := optional["InstanceId.18"]; ok {
		if InstanceId18, ok := v.(string); ok {
			args.Query.Set("InstanceId.18", InstanceId18)
		} else {
			return nil, errors.New("InstanceId.18 must be string")
		}
	}
	if v, ok := optional["InstanceId.19"]; ok {
		if InstanceId19, ok := v.(string); ok {
			args.Query.Set("InstanceId.19", InstanceId19)
		} else {
			return nil, errors.New("InstanceId.19 must be string")
		}
	}
	if v, ok := optional["InstanceId.2"]; ok {
		if InstanceId2, ok := v.(string); ok {
			args.Query.Set("InstanceId.2", InstanceId2)
		} else {
			return nil, errors.New("InstanceId.2 must be string")
		}
	}
	if v, ok := optional["InstanceId.20"]; ok {
		if InstanceId20, ok := v.(string); ok {
			args.Query.Set("InstanceId.20", InstanceId20)
		} else {
			return nil, errors.New("InstanceId.20 must be string")
		}
	}
	if v, ok := optional["InstanceId.3"]; ok {
		if InstanceId3, ok := v.(string); ok {
			args.Query.Set("InstanceId.3", InstanceId3)
		} else {
			return nil, errors.New("InstanceId.3 must be string")
		}
	}
	if v, ok := optional["InstanceId.4"]; ok {
		if InstanceId4, ok := v.(string); ok {
			args.Query.Set("InstanceId.4", InstanceId4)
		} else {
			return nil, errors.New("InstanceId.4 must be string")
		}
	}
	if v, ok := optional["InstanceId.5"]; ok {
		if InstanceId5, ok := v.(string); ok {
			args.Query.Set("InstanceId.5", InstanceId5)
		} else {
			return nil, errors.New("InstanceId.5 must be string")
		}
	}
	if v, ok := optional["InstanceId.6"]; ok {
		if InstanceId6, ok := v.(string); ok {
			args.Query.Set("InstanceId.6", InstanceId6)
		} else {
			return nil, errors.New("InstanceId.6 must be string")
		}
	}
	if v, ok := optional["InstanceId.7"]; ok {
		if InstanceId7, ok := v.(string); ok {
			args.Query.Set("InstanceId.7", InstanceId7)
		} else {
			return nil, errors.New("InstanceId.7 must be string")
		}
	}
	if v, ok := optional["InstanceId.8"]; ok {
		if InstanceId8, ok := v.(string); ok {
			args.Query.Set("InstanceId.8", InstanceId8)
		} else {
			return nil, errors.New("InstanceId.8 must be string")
		}
	}
	if v, ok := optional["InstanceId.9"]; ok {
		if InstanceId9, ok := v.(string); ok {
			args.Query.Set("InstanceId.9", InstanceId9)
		} else {
			return nil, errors.New("InstanceId.9 must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(AttachInstancesResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// AttachInstancesResponse represents the response of the api AttachInstances.
type AttachInstancesResponse struct {
	ScalingActivityId string
}

// CreateScalingConfiguration version 2014-08-28
//
// required parameters:
//  name: ImageId, type: string
//  name: InstanceType, type: string
//  name: ScalingGroupId, type: string
//  name: SecurityGroupId, type: string
//
// optional parameters:
//  name: DataDisk.1.Category, type: string
//  name: DataDisk.1.DeleteWithInstance, type: string
//  name: DataDisk.1.Device, type: string
//  name: DataDisk.1.Size, type: int, min value: 5, max value: 2000
//  name: DataDisk.1.SnapshotId, type: string
//  name: DataDisk.2.Category, type: string
//  name: DataDisk.2.DeleteWithInstance, type: string
//  name: DataDisk.2.Device, type: string
//  name: DataDisk.2.Size, type: int, min value: 5, max value: 2000
//  name: DataDisk.2.SnapshotId, type: string
//  name: DataDisk.3.Category, type: string
//  name: DataDisk.3.DeleteWithInstance, type: string
//  name: DataDisk.3.Device, type: string
//  name: DataDisk.3.Size, type: int
//  name: DataDisk.3.SnapshotId, type: string
//  name: DataDisk.4.Category, type: string
//  name: DataDisk.4.DeleteWithInstance, type: string
//  name: DataDisk.4.Device, type: string
//  name: DataDisk.4.Size, type: int
//  name: DataDisk.4.SnapshotId, type: string
//  name: InternetChargeType, type: string
//  name: InternetMaxBandwidthIn, type: int
//  name: InternetMaxBandwidthOut, type: int
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: ScalingConfigurationName, type: string
//  name: SystemDisk.Category, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) CreateScalingConfiguration(ImageId, InstanceType, ScalingGroupId, SecurityGroupId string, optional openapi.M) (*CreateScalingConfigurationResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "CreateScalingConfiguration")
	args.Query.Set("ImageId", ImageId)
	args.Query.Set("InstanceType", InstanceType)
	args.Query.Set("ScalingGroupId", ScalingGroupId)
	args.Query.Set("SecurityGroupId", SecurityGroupId)
	if v, ok := optional["DataDisk.1.Category"]; ok {
		if DataDisk1Category, ok := v.(string); ok {
			args.Query.Set("DataDisk.1.Category", DataDisk1Category)
		} else {
			return nil, errors.New("DataDisk.1.Category must be string")
		}
	}
	if v, ok := optional["DataDisk.1.DeleteWithInstance"]; ok {
		if DataDisk1DeleteWithInstance, ok := v.(string); ok {
			args.Query.Set("DataDisk.1.DeleteWithInstance", DataDisk1DeleteWithInstance)
		} else {
			return nil, errors.New("DataDisk.1.DeleteWithInstance must be string")
		}
	}
	if v, ok := optional["DataDisk.1.Device"]; ok {
		if DataDisk1Device, ok := v.(string); ok {
			args.Query.Set("DataDisk.1.Device", DataDisk1Device)
		} else {
			return nil, errors.New("DataDisk.1.Device must be string")
		}
	}
	if v, ok := optional["DataDisk.1.Size"]; ok {
		if DataDisk1Size, ok := v.(int); ok {
			if DataDisk1Size < 5 {
				return nil, errors.New("DataDisk.1.Size must be equal or greater than 5")
			}
			if DataDisk1Size > 2000 {
				return nil, errors.New("DataDisk.1.Size must be equal or less than 2000")
			}
			args.Query.Set("DataDisk.1.Size", fmt.Sprint(DataDisk1Size))
		} else {
			return nil, errors.New("DataDisk.1.Size must be int")
		}
	}
	if v, ok := optional["DataDisk.1.SnapshotId"]; ok {
		if DataDisk1SnapshotId, ok := v.(string); ok {
			args.Query.Set("DataDisk.1.SnapshotId", DataDisk1SnapshotId)
		} else {
			return nil, errors.New("DataDisk.1.SnapshotId must be string")
		}
	}
	if v, ok := optional["DataDisk.2.Category"]; ok {
		if DataDisk2Category, ok := v.(string); ok {
			args.Query.Set("DataDisk.2.Category", DataDisk2Category)
		} else {
			return nil, errors.New("DataDisk.2.Category must be string")
		}
	}
	if v, ok := optional["DataDisk.2.DeleteWithInstance"]; ok {
		if DataDisk2DeleteWithInstance, ok := v.(string); ok {
			args.Query.Set("DataDisk.2.DeleteWithInstance", DataDisk2DeleteWithInstance)
		} else {
			return nil, errors.New("DataDisk.2.DeleteWithInstance must be string")
		}
	}
	if v, ok := optional["DataDisk.2.Device"]; ok {
		if DataDisk2Device, ok := v.(string); ok {
			args.Query.Set("DataDisk.2.Device", DataDisk2Device)
		} else {
			return nil, errors.New("DataDisk.2.Device must be string")
		}
	}
	if v, ok := optional["DataDisk.2.Size"]; ok {
		if DataDisk2Size, ok := v.(int); ok {
			if DataDisk2Size < 5 {
				return nil, errors.New("DataDisk.2.Size must be equal or greater than 5")
			}
			if DataDisk2Size > 2000 {
				return nil, errors.New("DataDisk.2.Size must be equal or less than 2000")
			}
			args.Query.Set("DataDisk.2.Size", fmt.Sprint(DataDisk2Size))
		} else {
			return nil, errors.New("DataDisk.2.Size must be int")
		}
	}
	if v, ok := optional["DataDisk.2.SnapshotId"]; ok {
		if DataDisk2SnapshotId, ok := v.(string); ok {
			args.Query.Set("DataDisk.2.SnapshotId", DataDisk2SnapshotId)
		} else {
			return nil, errors.New("DataDisk.2.SnapshotId must be string")
		}
	}
	if v, ok := optional["DataDisk.3.Category"]; ok {
		if DataDisk3Category, ok := v.(string); ok {
			args.Query.Set("DataDisk.3.Category", DataDisk3Category)
		} else {
			return nil, errors.New("DataDisk.3.Category must be string")
		}
	}
	if v, ok := optional["DataDisk.3.DeleteWithInstance"]; ok {
		if DataDisk3DeleteWithInstance, ok := v.(string); ok {
			args.Query.Set("DataDisk.3.DeleteWithInstance", DataDisk3DeleteWithInstance)
		} else {
			return nil, errors.New("DataDisk.3.DeleteWithInstance must be string")
		}
	}
	if v, ok := optional["DataDisk.3.Device"]; ok {
		if DataDisk3Device, ok := v.(string); ok {
			args.Query.Set("DataDisk.3.Device", DataDisk3Device)
		} else {
			return nil, errors.New("DataDisk.3.Device must be string")
		}
	}
	if v, ok := optional["DataDisk.3.Size"]; ok {
		if DataDisk3Size, ok := v.(int); ok {
			args.Query.Set("DataDisk.3.Size", fmt.Sprint(DataDisk3Size))
		} else {
			return nil, errors.New("DataDisk.3.Size must be int")
		}
	}
	if v, ok := optional["DataDisk.3.SnapshotId"]; ok {
		if DataDisk3SnapshotId, ok := v.(string); ok {
			args.Query.Set("DataDisk.3.SnapshotId", DataDisk3SnapshotId)
		} else {
			return nil, errors.New("DataDisk.3.SnapshotId must be string")
		}
	}
	if v, ok := optional["DataDisk.4.Category"]; ok {
		if DataDisk4Category, ok := v.(string); ok {
			args.Query.Set("DataDisk.4.Category", DataDisk4Category)
		} else {
			return nil, errors.New("DataDisk.4.Category must be string")
		}
	}
	if v, ok := optional["DataDisk.4.DeleteWithInstance"]; ok {
		if DataDisk4DeleteWithInstance, ok := v.(string); ok {
			args.Query.Set("DataDisk.4.DeleteWithInstance", DataDisk4DeleteWithInstance)
		} else {
			return nil, errors.New("DataDisk.4.DeleteWithInstance must be string")
		}
	}
	if v, ok := optional["DataDisk.4.Device"]; ok {
		if DataDisk4Device, ok := v.(string); ok {
			args.Query.Set("DataDisk.4.Device", DataDisk4Device)
		} else {
			return nil, errors.New("DataDisk.4.Device must be string")
		}
	}
	if v, ok := optional["DataDisk.4.Size"]; ok {
		if DataDisk4Size, ok := v.(int); ok {
			args.Query.Set("DataDisk.4.Size", fmt.Sprint(DataDisk4Size))
		} else {
			return nil, errors.New("DataDisk.4.Size must be int")
		}
	}
	if v, ok := optional["DataDisk.4.SnapshotId"]; ok {
		if DataDisk4SnapshotId, ok := v.(string); ok {
			args.Query.Set("DataDisk.4.SnapshotId", DataDisk4SnapshotId)
		} else {
			return nil, errors.New("DataDisk.4.SnapshotId must be string")
		}
	}
	if v, ok := optional["InternetChargeType"]; ok {
		if InternetChargeType, ok := v.(string); ok {
			args.Query.Set("InternetChargeType", InternetChargeType)
		} else {
			return nil, errors.New("InternetChargeType must be string")
		}
	}
	if v, ok := optional["InternetMaxBandwidthIn"]; ok {
		if InternetMaxBandwidthIn, ok := v.(int); ok {
			args.Query.Set("InternetMaxBandwidthIn", fmt.Sprint(InternetMaxBandwidthIn))
		} else {
			return nil, errors.New("InternetMaxBandwidthIn must be int")
		}
	}
	if v, ok := optional["InternetMaxBandwidthOut"]; ok {
		if InternetMaxBandwidthOut, ok := v.(int); ok {
			args.Query.Set("InternetMaxBandwidthOut", fmt.Sprint(InternetMaxBandwidthOut))
		} else {
			return nil, errors.New("InternetMaxBandwidthOut must be int")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["ScalingConfigurationName"]; ok {
		if ScalingConfigurationName, ok := v.(string); ok {
			args.Query.Set("ScalingConfigurationName", ScalingConfigurationName)
		} else {
			return nil, errors.New("ScalingConfigurationName must be string")
		}
	}
	if v, ok := optional["SystemDisk.Category"]; ok {
		if SystemDiskCategory, ok := v.(string); ok {
			args.Query.Set("SystemDisk.Category", SystemDiskCategory)
		} else {
			return nil, errors.New("SystemDisk.Category must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(CreateScalingConfigurationResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// CreateScalingConfigurationResponse represents the response of the api CreateScalingConfiguration.
type CreateScalingConfigurationResponse struct {
	ScalingConfigurationId string
}

// CreateScalingGroup version 2014-08-28
//
// required parameters:
//  name: MaxSize, type: int
//  name: MinSize, type: int
//
// optional parameters:
//  name: DBInstanceId.1, type: string
//  name: DBInstanceId.2, type: string
//  name: DBInstanceId.3, type: string
//  name: DefaultCooldown, type: int
//  name: LoadBalancerId, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: RemovalPolicy.1, type: string
//  name: RemovalPolicy.2, type: string
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: ScalingGroupName, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) CreateScalingGroup(MaxSize, MinSize int, optional openapi.M) (*CreateScalingGroupResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "CreateScalingGroup")
	args.Query.Set("MaxSize", fmt.Sprint(MaxSize))
	args.Query.Set("MinSize", fmt.Sprint(MinSize))
	if v, ok := optional["DBInstanceId.1"]; ok {
		if DBInstanceId1, ok := v.(string); ok {
			args.Query.Set("DBInstanceId.1", DBInstanceId1)
		} else {
			return nil, errors.New("DBInstanceId.1 must be string")
		}
	}
	if v, ok := optional["DBInstanceId.2"]; ok {
		if DBInstanceId2, ok := v.(string); ok {
			args.Query.Set("DBInstanceId.2", DBInstanceId2)
		} else {
			return nil, errors.New("DBInstanceId.2 must be string")
		}
	}
	if v, ok := optional["DBInstanceId.3"]; ok {
		if DBInstanceId3, ok := v.(string); ok {
			args.Query.Set("DBInstanceId.3", DBInstanceId3)
		} else {
			return nil, errors.New("DBInstanceId.3 must be string")
		}
	}
	if v, ok := optional["DefaultCooldown"]; ok {
		if DefaultCooldown, ok := v.(int); ok {
			args.Query.Set("DefaultCooldown", fmt.Sprint(DefaultCooldown))
		} else {
			return nil, errors.New("DefaultCooldown must be int")
		}
	}
	if v, ok := optional["LoadBalancerId"]; ok {
		if LoadBalancerId, ok := v.(string); ok {
			args.Query.Set("LoadBalancerId", LoadBalancerId)
		} else {
			return nil, errors.New("LoadBalancerId must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["RemovalPolicy.1"]; ok {
		if RemovalPolicy1, ok := v.(string); ok {
			args.Query.Set("RemovalPolicy.1", RemovalPolicy1)
		} else {
			return nil, errors.New("RemovalPolicy.1 must be string")
		}
	}
	if v, ok := optional["RemovalPolicy.2"]; ok {
		if RemovalPolicy2, ok := v.(string); ok {
			args.Query.Set("RemovalPolicy.2", RemovalPolicy2)
		} else {
			return nil, errors.New("RemovalPolicy.2 must be string")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["ScalingGroupName"]; ok {
		if ScalingGroupName, ok := v.(string); ok {
			args.Query.Set("ScalingGroupName", ScalingGroupName)
		} else {
			return nil, errors.New("ScalingGroupName must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(CreateScalingGroupResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// CreateScalingGroupResponse represents the response of the api CreateScalingGroup.
type CreateScalingGroupResponse struct {
	ScalingGroupId string
}

// CreateScalingRule version 2014-08-28
//
// required parameters:
//  name: AdjustmentType, type: string
//  name: AdjustmentValue, type: int
//  name: ScalingGroupId, type: string
//
// optional parameters:
//  name: Cooldown, type: int
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: ScalingRuleName, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) CreateScalingRule(AdjustmentType string, AdjustmentValue int, ScalingGroupId string, optional openapi.M) (*CreateScalingRuleResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "CreateScalingRule")
	args.Query.Set("AdjustmentType", AdjustmentType)
	args.Query.Set("AdjustmentValue", fmt.Sprint(AdjustmentValue))
	args.Query.Set("ScalingGroupId", ScalingGroupId)
	if v, ok := optional["Cooldown"]; ok {
		if Cooldown, ok := v.(int); ok {
			args.Query.Set("Cooldown", fmt.Sprint(Cooldown))
		} else {
			return nil, errors.New("Cooldown must be int")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["ScalingRuleName"]; ok {
		if ScalingRuleName, ok := v.(string); ok {
			args.Query.Set("ScalingRuleName", ScalingRuleName)
		} else {
			return nil, errors.New("ScalingRuleName must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(CreateScalingRuleResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// CreateScalingRuleResponse represents the response of the api CreateScalingRule.
type CreateScalingRuleResponse struct {
	ScalingRuleAri string
	ScalingRuleId  string
}

// CreateScheduledTask version 2014-08-28
//
// required parameters:
//  name: ScheduledAction, type: string
//
// optional parameters:
//  name: Description, type: string
//  name: LaunchExpirationTime, type: int, min value: 0, max value: 86400
//  name: LaunchTime, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: RecurrenceEndTime, type: string
//  name: RecurrenceType, type: string
//  name: RecurrenceValue, type: string
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: ScheduledTaskName, type: string
//  name: TaskEnabled, type: bool
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) CreateScheduledTask(ScheduledAction string, optional openapi.M) (*CreateScheduledTaskResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "CreateScheduledTask")
	args.Query.Set("ScheduledAction", ScheduledAction)
	if v, ok := optional["Description"]; ok {
		if Description, ok := v.(string); ok {
			args.Query.Set("Description", Description)
		} else {
			return nil, errors.New("Description must be string")
		}
	}
	if v, ok := optional["LaunchExpirationTime"]; ok {
		if LaunchExpirationTime, ok := v.(int); ok {
			if LaunchExpirationTime < 0 {
				return nil, errors.New("LaunchExpirationTime must be equal or greater than 0")
			}
			if LaunchExpirationTime > 86400 {
				return nil, errors.New("LaunchExpirationTime must be equal or less than 86400")
			}
			args.Query.Set("LaunchExpirationTime", fmt.Sprint(LaunchExpirationTime))
		} else {
			return nil, errors.New("LaunchExpirationTime must be int")
		}
	}
	if v, ok := optional["LaunchTime"]; ok {
		if LaunchTime, ok := v.(string); ok {
			args.Query.Set("LaunchTime", LaunchTime)
		} else {
			return nil, errors.New("LaunchTime must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["RecurrenceEndTime"]; ok {
		if RecurrenceEndTime, ok := v.(string); ok {
			args.Query.Set("RecurrenceEndTime", RecurrenceEndTime)
		} else {
			return nil, errors.New("RecurrenceEndTime must be string")
		}
	}
	if v, ok := optional["RecurrenceType"]; ok {
		if RecurrenceType, ok := v.(string); ok {
			args.Query.Set("RecurrenceType", RecurrenceType)
		} else {
			return nil, errors.New("RecurrenceType must be string")
		}
	}
	if v, ok := optional["RecurrenceValue"]; ok {
		if RecurrenceValue, ok := v.(string); ok {
			args.Query.Set("RecurrenceValue", RecurrenceValue)
		} else {
			return nil, errors.New("RecurrenceValue must be string")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["ScheduledTaskName"]; ok {
		if ScheduledTaskName, ok := v.(string); ok {
			args.Query.Set("ScheduledTaskName", ScheduledTaskName)
		} else {
			return nil, errors.New("ScheduledTaskName must be string")
		}
	}
	if v, ok := optional["TaskEnabled"]; ok {
		if TaskEnabled, ok := v.(bool); ok {
			args.Query.Set("TaskEnabled", fmt.Sprint(TaskEnabled))
		} else {
			return nil, errors.New("TaskEnabled must be bool")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(CreateScheduledTaskResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// CreateScheduledTaskResponse represents the response of the api CreateScheduledTask.
type CreateScheduledTaskResponse struct {
	ScheduledTaskId string
}

// DeleteScalingConfiguration version 2014-08-28
//
// required parameters:
//  name: ScalingConfigurationId, type: string
//
// optional parameters:
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) DeleteScalingConfiguration(ScalingConfigurationId string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "DeleteScalingConfiguration")
	args.Query.Set("ScalingConfigurationId", ScalingConfigurationId)
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DeleteScalingGroup version 2014-08-28
//
// required parameters:
//  name: ScalingGroupId, type: string
//
// optional parameters:
//  name: ForceDelete, type: bool
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) DeleteScalingGroup(ScalingGroupId string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "DeleteScalingGroup")
	args.Query.Set("ScalingGroupId", ScalingGroupId)
	if v, ok := optional["ForceDelete"]; ok {
		if ForceDelete, ok := v.(bool); ok {
			args.Query.Set("ForceDelete", fmt.Sprint(ForceDelete))
		} else {
			return nil, errors.New("ForceDelete must be bool")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DeleteScalingRule version 2014-08-28
//
// required parameters:
//  name: ScalingRuleId, type: string
//
// optional parameters:
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) DeleteScalingRule(ScalingRuleId string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "DeleteScalingRule")
	args.Query.Set("ScalingRuleId", ScalingRuleId)
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DeleteScheduledTask version 2014-08-28
//
// required parameters:
//  name: ScheduledTaskId, type: string
//
// optional parameters:
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) DeleteScheduledTask(ScheduledTaskId string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "DeleteScheduledTask")
	args.Query.Set("ScheduledTaskId", ScheduledTaskId)
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DescribeScalingActivities version 2014-08-28
//
// optional parameters:
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: PageNumber, type: int
//  name: PageSize, type: int, max value: 50
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: ScalingActivityId.1, type: string
//  name: ScalingActivityId.10, type: string
//  name: ScalingActivityId.11, type: string
//  name: ScalingActivityId.12, type: string
//  name: ScalingActivityId.13, type: string
//  name: ScalingActivityId.14, type: string
//  name: ScalingActivityId.15, type: string
//  name: ScalingActivityId.16, type: string
//  name: ScalingActivityId.17, type: string
//  name: ScalingActivityId.18, type: string
//  name: ScalingActivityId.19, type: string
//  name: ScalingActivityId.2, type: string
//  name: ScalingActivityId.20, type: string
//  name: ScalingActivityId.3, type: string
//  name: ScalingActivityId.4, type: string
//  name: ScalingActivityId.5, type: string
//  name: ScalingActivityId.6, type: string
//  name: ScalingActivityId.7, type: string
//  name: ScalingActivityId.8, type: string
//  name: ScalingActivityId.9, type: string
//  name: ScalingGroupId, type: string
//  name: StatusCode, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) DescribeScalingActivities(optional openapi.M) (*DescribeScalingActivitiesResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "DescribeScalingActivities")
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["PageNumber"]; ok {
		if PageNumber, ok := v.(int); ok {
			args.Query.Set("PageNumber", fmt.Sprint(PageNumber))
		} else {
			return nil, errors.New("PageNumber must be int")
		}
	}
	if v, ok := optional["PageSize"]; ok {
		if PageSize, ok := v.(int); ok {
			if PageSize > 50 {
				return nil, errors.New("PageSize must be equal or less than 50")
			}
			args.Query.Set("PageSize", fmt.Sprint(PageSize))
		} else {
			return nil, errors.New("PageSize must be int")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["ScalingActivityId.1"]; ok {
		if ScalingActivityId1, ok := v.(string); ok {
			args.Query.Set("ScalingActivityId.1", ScalingActivityId1)
		} else {
			return nil, errors.New("ScalingActivityId.1 must be string")
		}
	}
	if v, ok := optional["ScalingActivityId.10"]; ok {
		if ScalingActivityId10, ok := v.(string); ok {
			args.Query.Set("ScalingActivityId.10", ScalingActivityId10)
		} else {
			return nil, errors.New("ScalingActivityId.10 must be string")
		}
	}
	if v, ok := optional["ScalingActivityId.11"]; ok {
		if ScalingActivityId11, ok := v.(string); ok {
			args.Query.Set("ScalingActivityId.11", ScalingActivityId11)
		} else {
			return nil, errors.New("ScalingActivityId.11 must be string")
		}
	}
	if v, ok := optional["ScalingActivityId.12"]; ok {
		if ScalingActivityId12, ok := v.(string); ok {
			args.Query.Set("ScalingActivityId.12", ScalingActivityId12)
		} else {
			return nil, errors.New("ScalingActivityId.12 must be string")
		}
	}
	if v, ok := optional["ScalingActivityId.13"]; ok {
		if ScalingActivityId13, ok := v.(string); ok {
			args.Query.Set("ScalingActivityId.13", ScalingActivityId13)
		} else {
			return nil, errors.New("ScalingActivityId.13 must be string")
		}
	}
	if v, ok := optional["ScalingActivityId.14"]; ok {
		if ScalingActivityId14, ok := v.(string); ok {
			args.Query.Set("ScalingActivityId.14", ScalingActivityId14)
		} else {
			return nil, errors.New("ScalingActivityId.14 must be string")
		}
	}
	if v, ok := optional["ScalingActivityId.15"]; ok {
		if ScalingActivityId15, ok := v.(string); ok {
			args.Query.Set("ScalingActivityId.15", ScalingActivityId15)
		} else {
			return nil, errors.New("ScalingActivityId.15 must be string")
		}
	}
	if v, ok := optional["ScalingActivityId.16"]; ok {
		if ScalingActivityId16, ok := v.(string); ok {
			args.Query.Set("ScalingActivityId.16", ScalingActivityId16)
		} else {
			return nil, errors.New("ScalingActivityId.16 must be string")
		}
	}
	if v, ok := optional["ScalingActivityId.17"]; ok {
		if ScalingActivityId17, ok := v.(string); ok {
			args.Query.Set("ScalingActivityId.17", ScalingActivityId17)
		} else {
			return nil, errors.New("ScalingActivityId.17 must be string")
		}
	}
	if v, ok := optional["ScalingActivityId.18"]; ok {
		if ScalingActivityId18, ok := v.(string); ok {
			args.Query.Set("ScalingActivityId.18", ScalingActivityId18)
		} else {
			return nil, errors.New("ScalingActivityId.18 must be string")
		}
	}
	if v, ok := optional["ScalingActivityId.19"]; ok {
		if ScalingActivityId19, ok := v.(string); ok {
			args.Query.Set("ScalingActivityId.19", ScalingActivityId19)
		} else {
			return nil, errors.New("ScalingActivityId.19 must be string")
		}
	}
	if v, ok := optional["ScalingActivityId.2"]; ok {
		if ScalingActivityId2, ok := v.(string); ok {
			args.Query.Set("ScalingActivityId.2", ScalingActivityId2)
		} else {
			return nil, errors.New("ScalingActivityId.2 must be string")
		}
	}
	if v, ok := optional["ScalingActivityId.20"]; ok {
		if ScalingActivityId20, ok := v.(string); ok {
			args.Query.Set("ScalingActivityId.20", ScalingActivityId20)
		} else {
			return nil, errors.New("ScalingActivityId.20 must be string")
		}
	}
	if v, ok := optional["ScalingActivityId.3"]; ok {
		if ScalingActivityId3, ok := v.(string); ok {
			args.Query.Set("ScalingActivityId.3", ScalingActivityId3)
		} else {
			return nil, errors.New("ScalingActivityId.3 must be string")
		}
	}
	if v, ok := optional["ScalingActivityId.4"]; ok {
		if ScalingActivityId4, ok := v.(string); ok {
			args.Query.Set("ScalingActivityId.4", ScalingActivityId4)
		} else {
			return nil, errors.New("ScalingActivityId.4 must be string")
		}
	}
	if v, ok := optional["ScalingActivityId.5"]; ok {
		if ScalingActivityId5, ok := v.(string); ok {
			args.Query.Set("ScalingActivityId.5", ScalingActivityId5)
		} else {
			return nil, errors.New("ScalingActivityId.5 must be string")
		}
	}
	if v, ok := optional["ScalingActivityId.6"]; ok {
		if ScalingActivityId6, ok := v.(string); ok {
			args.Query.Set("ScalingActivityId.6", ScalingActivityId6)
		} else {
			return nil, errors.New("ScalingActivityId.6 must be string")
		}
	}
	if v, ok := optional["ScalingActivityId.7"]; ok {
		if ScalingActivityId7, ok := v.(string); ok {
			args.Query.Set("ScalingActivityId.7", ScalingActivityId7)
		} else {
			return nil, errors.New("ScalingActivityId.7 must be string")
		}
	}
	if v, ok := optional["ScalingActivityId.8"]; ok {
		if ScalingActivityId8, ok := v.(string); ok {
			args.Query.Set("ScalingActivityId.8", ScalingActivityId8)
		} else {
			return nil, errors.New("ScalingActivityId.8 must be string")
		}
	}
	if v, ok := optional["ScalingActivityId.9"]; ok {
		if ScalingActivityId9, ok := v.(string); ok {
			args.Query.Set("ScalingActivityId.9", ScalingActivityId9)
		} else {
			return nil, errors.New("ScalingActivityId.9 must be string")
		}
	}
	if v, ok := optional["ScalingGroupId"]; ok {
		if ScalingGroupId, ok := v.(string); ok {
			args.Query.Set("ScalingGroupId", ScalingGroupId)
		} else {
			return nil, errors.New("ScalingGroupId must be string")
		}
	}
	if v, ok := optional["StatusCode"]; ok {
		if StatusCode, ok := v.(string); ok {
			args.Query.Set("StatusCode", StatusCode)
		} else {
			return nil, errors.New("StatusCode must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(DescribeScalingActivitiesResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DescribeScalingActivitiesResponse represents the response of the api DescribeScalingActivities.
type DescribeScalingActivitiesResponse struct {
	PageNumber        int
	PageSize          int
	ScalingActivities struct {
		ScalingActivity []struct {
			Cause             string
			Description       string
			EndTime           string
			Progress          int
			ScalingActivityId string
			ScalingGroupId    string
			StartTime         string
			StatusCode        string
			StatusMessage     string
		}
	}
	TotalCount int
}

// DescribeScalingConfigurations version 2014-08-28
//
// optional parameters:
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: PageNumber, type: int
//  name: PageSize, type: int, max value: 50
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: ScalingConfigurationId.1, type: string
//  name: ScalingConfigurationId.10, type: string
//  name: ScalingConfigurationId.2, type: string
//  name: ScalingConfigurationId.3, type: string
//  name: ScalingConfigurationId.4, type: string
//  name: ScalingConfigurationId.5, type: string
//  name: ScalingConfigurationId.6, type: string
//  name: ScalingConfigurationId.7, type: string
//  name: ScalingConfigurationId.8, type: string
//  name: ScalingConfigurationId.9, type: string
//  name: ScalingConfigurationName.1, type: string
//  name: ScalingConfigurationName.10, type: string
//  name: ScalingConfigurationName.2, type: string
//  name: ScalingConfigurationName.3, type: string
//  name: ScalingConfigurationName.4, type: string
//  name: ScalingConfigurationName.5, type: string
//  name: ScalingConfigurationName.6, type: string
//  name: ScalingConfigurationName.7, type: string
//  name: ScalingConfigurationName.8, type: string
//  name: ScalingConfigurationName.9, type: string
//  name: ScalingGroupId, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) DescribeScalingConfigurations(optional openapi.M) (*DescribeScalingConfigurationsResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "DescribeScalingConfigurations")
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["PageNumber"]; ok {
		if PageNumber, ok := v.(int); ok {
			args.Query.Set("PageNumber", fmt.Sprint(PageNumber))
		} else {
			return nil, errors.New("PageNumber must be int")
		}
	}
	if v, ok := optional["PageSize"]; ok {
		if PageSize, ok := v.(int); ok {
			if PageSize > 50 {
				return nil, errors.New("PageSize must be equal or less than 50")
			}
			args.Query.Set("PageSize", fmt.Sprint(PageSize))
		} else {
			return nil, errors.New("PageSize must be int")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["ScalingConfigurationId.1"]; ok {
		if ScalingConfigurationId1, ok := v.(string); ok {
			args.Query.Set("ScalingConfigurationId.1", ScalingConfigurationId1)
		} else {
			return nil, errors.New("ScalingConfigurationId.1 must be string")
		}
	}
	if v, ok := optional["ScalingConfigurationId.10"]; ok {
		if ScalingConfigurationId10, ok := v.(string); ok {
			args.Query.Set("ScalingConfigurationId.10", ScalingConfigurationId10)
		} else {
			return nil, errors.New("ScalingConfigurationId.10 must be string")
		}
	}
	if v, ok := optional["ScalingConfigurationId.2"]; ok {
		if ScalingConfigurationId2, ok := v.(string); ok {
			args.Query.Set("ScalingConfigurationId.2", ScalingConfigurationId2)
		} else {
			return nil, errors.New("ScalingConfigurationId.2 must be string")
		}
	}
	if v, ok := optional["ScalingConfigurationId.3"]; ok {
		if ScalingConfigurationId3, ok := v.(string); ok {
			args.Query.Set("ScalingConfigurationId.3", ScalingConfigurationId3)
		} else {
			return nil, errors.New("ScalingConfigurationId.3 must be string")
		}
	}
	if v, ok := optional["ScalingConfigurationId.4"]; ok {
		if ScalingConfigurationId4, ok := v.(string); ok {
			args.Query.Set("ScalingConfigurationId.4", ScalingConfigurationId4)
		} else {
			return nil, errors.New("ScalingConfigurationId.4 must be string")
		}
	}
	if v, ok := optional["ScalingConfigurationId.5"]; ok {
		if ScalingConfigurationId5, ok := v.(string); ok {
			args.Query.Set("ScalingConfigurationId.5", ScalingConfigurationId5)
		} else {
			return nil, errors.New("ScalingConfigurationId.5 must be string")
		}
	}
	if v, ok := optional["ScalingConfigurationId.6"]; ok {
		if ScalingConfigurationId6, ok := v.(string); ok {
			args.Query.Set("ScalingConfigurationId.6", ScalingConfigurationId6)
		} else {
			return nil, errors.New("ScalingConfigurationId.6 must be string")
		}
	}
	if v, ok := optional["ScalingConfigurationId.7"]; ok {
		if ScalingConfigurationId7, ok := v.(string); ok {
			args.Query.Set("ScalingConfigurationId.7", ScalingConfigurationId7)
		} else {
			return nil, errors.New("ScalingConfigurationId.7 must be string")
		}
	}
	if v, ok := optional["ScalingConfigurationId.8"]; ok {
		if ScalingConfigurationId8, ok := v.(string); ok {
			args.Query.Set("ScalingConfigurationId.8", ScalingConfigurationId8)
		} else {
			return nil, errors.New("ScalingConfigurationId.8 must be string")
		}
	}
	if v, ok := optional["ScalingConfigurationId.9"]; ok {
		if ScalingConfigurationId9, ok := v.(string); ok {
			args.Query.Set("ScalingConfigurationId.9", ScalingConfigurationId9)
		} else {
			return nil, errors.New("ScalingConfigurationId.9 must be string")
		}
	}
	if v, ok := optional["ScalingConfigurationName.1"]; ok {
		if ScalingConfigurationName1, ok := v.(string); ok {
			args.Query.Set("ScalingConfigurationName.1", ScalingConfigurationName1)
		} else {
			return nil, errors.New("ScalingConfigurationName.1 must be string")
		}
	}
	if v, ok := optional["ScalingConfigurationName.10"]; ok {
		if ScalingConfigurationName10, ok := v.(string); ok {
			args.Query.Set("ScalingConfigurationName.10", ScalingConfigurationName10)
		} else {
			return nil, errors.New("ScalingConfigurationName.10 must be string")
		}
	}
	if v, ok := optional["ScalingConfigurationName.2"]; ok {
		if ScalingConfigurationName2, ok := v.(string); ok {
			args.Query.Set("ScalingConfigurationName.2", ScalingConfigurationName2)
		} else {
			return nil, errors.New("ScalingConfigurationName.2 must be string")
		}
	}
	if v, ok := optional["ScalingConfigurationName.3"]; ok {
		if ScalingConfigurationName3, ok := v.(string); ok {
			args.Query.Set("ScalingConfigurationName.3", ScalingConfigurationName3)
		} else {
			return nil, errors.New("ScalingConfigurationName.3 must be string")
		}
	}
	if v, ok := optional["ScalingConfigurationName.4"]; ok {
		if ScalingConfigurationName4, ok := v.(string); ok {
			args.Query.Set("ScalingConfigurationName.4", ScalingConfigurationName4)
		} else {
			return nil, errors.New("ScalingConfigurationName.4 must be string")
		}
	}
	if v, ok := optional["ScalingConfigurationName.5"]; ok {
		if ScalingConfigurationName5, ok := v.(string); ok {
			args.Query.Set("ScalingConfigurationName.5", ScalingConfigurationName5)
		} else {
			return nil, errors.New("ScalingConfigurationName.5 must be string")
		}
	}
	if v, ok := optional["ScalingConfigurationName.6"]; ok {
		if ScalingConfigurationName6, ok := v.(string); ok {
			args.Query.Set("ScalingConfigurationName.6", ScalingConfigurationName6)
		} else {
			return nil, errors.New("ScalingConfigurationName.6 must be string")
		}
	}
	if v, ok := optional["ScalingConfigurationName.7"]; ok {
		if ScalingConfigurationName7, ok := v.(string); ok {
			args.Query.Set("ScalingConfigurationName.7", ScalingConfigurationName7)
		} else {
			return nil, errors.New("ScalingConfigurationName.7 must be string")
		}
	}
	if v, ok := optional["ScalingConfigurationName.8"]; ok {
		if ScalingConfigurationName8, ok := v.(string); ok {
			args.Query.Set("ScalingConfigurationName.8", ScalingConfigurationName8)
		} else {
			return nil, errors.New("ScalingConfigurationName.8 must be string")
		}
	}
	if v, ok := optional["ScalingConfigurationName.9"]; ok {
		if ScalingConfigurationName9, ok := v.(string); ok {
			args.Query.Set("ScalingConfigurationName.9", ScalingConfigurationName9)
		} else {
			return nil, errors.New("ScalingConfigurationName.9 must be string")
		}
	}
	if v, ok := optional["ScalingGroupId"]; ok {
		if ScalingGroupId, ok := v.(string); ok {
			args.Query.Set("ScalingGroupId", ScalingGroupId)
		} else {
			return nil, errors.New("ScalingGroupId must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(DescribeScalingConfigurationsResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DescribeScalingConfigurationsResponse represents the response of the api DescribeScalingConfigurations.
type DescribeScalingConfigurationsResponse struct {
	PageNumber            int
	PageSize              int
	ScalingConfigurations struct {
		ScalingConfiguration []struct {
			CreationTime string
			DataDisks    struct {
				DataDisk []struct {
					Category   string
					Device     string
					Size       int
					SnapshotId string
				}
			}
			ImageId                  string
			InstanceType             string
			InternetChargeType       string
			InternetMaxBandwidthIn   int
			InternetMaxBandwidthOut  int
			LifecycleState           string
			ScalingConfigurationId   string
			ScalingConfigurationName string
			ScalingGroupId           string
			SecurityGroupId          string
			SystemDiskCategory       string
		}
	}
	TotalCount int
}

// DescribeScalingGroups version 2014-08-28
//
// optional parameters:
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: PageNumber, type: int, min value: 1
//  name: PageSize, type: int, max value: 50
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: ScalingGroupId.1, type: string
//  name: ScalingGroupId.10, type: string
//  name: ScalingGroupId.12, type: string
//  name: ScalingGroupId.13, type: string
//  name: ScalingGroupId.14, type: string
//  name: ScalingGroupId.15, type: string
//  name: ScalingGroupId.16, type: string
//  name: ScalingGroupId.17, type: string
//  name: ScalingGroupId.18, type: string
//  name: ScalingGroupId.19, type: string
//  name: ScalingGroupId.2, type: string
//  name: ScalingGroupId.20, type: string
//  name: ScalingGroupId.3, type: string
//  name: ScalingGroupId.4, type: string
//  name: ScalingGroupId.5, type: string
//  name: ScalingGroupId.6, type: string
//  name: ScalingGroupId.7, type: string
//  name: ScalingGroupId.8, type: string
//  name: ScalingGroupId.9, type: string
//  name: ScalingGroupName.1, type: string
//  name: ScalingGroupName.10, type: string
//  name: ScalingGroupName.11, type: string
//  name: ScalingGroupName.12, type: string
//  name: ScalingGroupName.13, type: string
//  name: ScalingGroupName.14, type: string
//  name: ScalingGroupName.15, type: string
//  name: ScalingGroupName.16, type: string
//  name: ScalingGroupName.17, type: string
//  name: ScalingGroupName.18, type: string
//  name: ScalingGroupName.19, type: string
//  name: ScalingGroupName.2, type: string
//  name: ScalingGroupName.20, type: string
//  name: ScalingGroupName.3, type: string
//  name: ScalingGroupName.4, type: string
//  name: ScalingGroupName.5, type: string
//  name: ScalingGroupName.6, type: string
//  name: ScalingGroupName.7, type: string
//  name: ScalingGroupName.8, type: string
//  name: ScalingGroupName.9, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) DescribeScalingGroups(optional openapi.M) (*DescribeScalingGroupsResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "DescribeScalingGroups")
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["PageNumber"]; ok {
		if PageNumber, ok := v.(int); ok {
			if PageNumber < 1 {
				return nil, errors.New("PageNumber must be equal or greater than 1")
			}
			args.Query.Set("PageNumber", fmt.Sprint(PageNumber))
		} else {
			return nil, errors.New("PageNumber must be int")
		}
	}
	if v, ok := optional["PageSize"]; ok {
		if PageSize, ok := v.(int); ok {
			if PageSize > 50 {
				return nil, errors.New("PageSize must be equal or less than 50")
			}
			args.Query.Set("PageSize", fmt.Sprint(PageSize))
		} else {
			return nil, errors.New("PageSize must be int")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["ScalingGroupId.1"]; ok {
		if ScalingGroupId1, ok := v.(string); ok {
			args.Query.Set("ScalingGroupId.1", ScalingGroupId1)
		} else {
			return nil, errors.New("ScalingGroupId.1 must be string")
		}
	}
	if v, ok := optional["ScalingGroupId.10"]; ok {
		if ScalingGroupId10, ok := v.(string); ok {
			args.Query.Set("ScalingGroupId.10", ScalingGroupId10)
		} else {
			return nil, errors.New("ScalingGroupId.10 must be string")
		}
	}
	if v, ok := optional["ScalingGroupId.12"]; ok {
		if ScalingGroupId12, ok := v.(string); ok {
			args.Query.Set("ScalingGroupId.12", ScalingGroupId12)
		} else {
			return nil, errors.New("ScalingGroupId.12 must be string")
		}
	}
	if v, ok := optional["ScalingGroupId.13"]; ok {
		if ScalingGroupId13, ok := v.(string); ok {
			args.Query.Set("ScalingGroupId.13", ScalingGroupId13)
		} else {
			return nil, errors.New("ScalingGroupId.13 must be string")
		}
	}
	if v, ok := optional["ScalingGroupId.14"]; ok {
		if ScalingGroupId14, ok := v.(string); ok {
			args.Query.Set("ScalingGroupId.14", ScalingGroupId14)
		} else {
			return nil, errors.New("ScalingGroupId.14 must be string")
		}
	}
	if v, ok := optional["ScalingGroupId.15"]; ok {
		if ScalingGroupId15, ok := v.(string); ok {
			args.Query.Set("ScalingGroupId.15", ScalingGroupId15)
		} else {
			return nil, errors.New("ScalingGroupId.15 must be string")
		}
	}
	if v, ok := optional["ScalingGroupId.16"]; ok {
		if ScalingGroupId16, ok := v.(string); ok {
			args.Query.Set("ScalingGroupId.16", ScalingGroupId16)
		} else {
			return nil, errors.New("ScalingGroupId.16 must be string")
		}
	}
	if v, ok := optional["ScalingGroupId.17"]; ok {
		if ScalingGroupId17, ok := v.(string); ok {
			args.Query.Set("ScalingGroupId.17", ScalingGroupId17)
		} else {
			return nil, errors.New("ScalingGroupId.17 must be string")
		}
	}
	if v, ok := optional["ScalingGroupId.18"]; ok {
		if ScalingGroupId18, ok := v.(string); ok {
			args.Query.Set("ScalingGroupId.18", ScalingGroupId18)
		} else {
			return nil, errors.New("ScalingGroupId.18 must be string")
		}
	}
	if v, ok := optional["ScalingGroupId.19"]; ok {
		if ScalingGroupId19, ok := v.(string); ok {
			args.Query.Set("ScalingGroupId.19", ScalingGroupId19)
		} else {
			return nil, errors.New("ScalingGroupId.19 must be string")
		}
	}
	if v, ok := optional["ScalingGroupId.2"]; ok {
		if ScalingGroupId2, ok := v.(string); ok {
			args.Query.Set("ScalingGroupId.2", ScalingGroupId2)
		} else {
			return nil, errors.New("ScalingGroupId.2 must be string")
		}
	}
	if v, ok := optional["ScalingGroupId.20"]; ok {
		if ScalingGroupId20, ok := v.(string); ok {
			args.Query.Set("ScalingGroupId.20", ScalingGroupId20)
		} else {
			return nil, errors.New("ScalingGroupId.20 must be string")
		}
	}
	if v, ok := optional["ScalingGroupId.3"]; ok {
		if ScalingGroupId3, ok := v.(string); ok {
			args.Query.Set("ScalingGroupId.3", ScalingGroupId3)
		} else {
			return nil, errors.New("ScalingGroupId.3 must be string")
		}
	}
	if v, ok := optional["ScalingGroupId.4"]; ok {
		if ScalingGroupId4, ok := v.(string); ok {
			args.Query.Set("ScalingGroupId.4", ScalingGroupId4)
		} else {
			return nil, errors.New("ScalingGroupId.4 must be string")
		}
	}
	if v, ok := optional["ScalingGroupId.5"]; ok {
		if ScalingGroupId5, ok := v.(string); ok {
			args.Query.Set("ScalingGroupId.5", ScalingGroupId5)
		} else {
			return nil, errors.New("ScalingGroupId.5 must be string")
		}
	}
	if v, ok := optional["ScalingGroupId.6"]; ok {
		if ScalingGroupId6, ok := v.(string); ok {
			args.Query.Set("ScalingGroupId.6", ScalingGroupId6)
		} else {
			return nil, errors.New("ScalingGroupId.6 must be string")
		}
	}
	if v, ok := optional["ScalingGroupId.7"]; ok {
		if ScalingGroupId7, ok := v.(string); ok {
			args.Query.Set("ScalingGroupId.7", ScalingGroupId7)
		} else {
			return nil, errors.New("ScalingGroupId.7 must be string")
		}
	}
	if v, ok := optional["ScalingGroupId.8"]; ok {
		if ScalingGroupId8, ok := v.(string); ok {
			args.Query.Set("ScalingGroupId.8", ScalingGroupId8)
		} else {
			return nil, errors.New("ScalingGroupId.8 must be string")
		}
	}
	if v, ok := optional["ScalingGroupId.9"]; ok {
		if ScalingGroupId9, ok := v.(string); ok {
			args.Query.Set("ScalingGroupId.9", ScalingGroupId9)
		} else {
			return nil, errors.New("ScalingGroupId.9 must be string")
		}
	}
	if v, ok := optional["ScalingGroupName.1"]; ok {
		if ScalingGroupName1, ok := v.(string); ok {
			args.Query.Set("ScalingGroupName.1", ScalingGroupName1)
		} else {
			return nil, errors.New("ScalingGroupName.1 must be string")
		}
	}
	if v, ok := optional["ScalingGroupName.10"]; ok {
		if ScalingGroupName10, ok := v.(string); ok {
			args.Query.Set("ScalingGroupName.10", ScalingGroupName10)
		} else {
			return nil, errors.New("ScalingGroupName.10 must be string")
		}
	}
	if v, ok := optional["ScalingGroupName.11"]; ok {
		if ScalingGroupName11, ok := v.(string); ok {
			args.Query.Set("ScalingGroupName.11", ScalingGroupName11)
		} else {
			return nil, errors.New("ScalingGroupName.11 must be string")
		}
	}
	if v, ok := optional["ScalingGroupName.12"]; ok {
		if ScalingGroupName12, ok := v.(string); ok {
			args.Query.Set("ScalingGroupName.12", ScalingGroupName12)
		} else {
			return nil, errors.New("ScalingGroupName.12 must be string")
		}
	}
	if v, ok := optional["ScalingGroupName.13"]; ok {
		if ScalingGroupName13, ok := v.(string); ok {
			args.Query.Set("ScalingGroupName.13", ScalingGroupName13)
		} else {
			return nil, errors.New("ScalingGroupName.13 must be string")
		}
	}
	if v, ok := optional["ScalingGroupName.14"]; ok {
		if ScalingGroupName14, ok := v.(string); ok {
			args.Query.Set("ScalingGroupName.14", ScalingGroupName14)
		} else {
			return nil, errors.New("ScalingGroupName.14 must be string")
		}
	}
	if v, ok := optional["ScalingGroupName.15"]; ok {
		if ScalingGroupName15, ok := v.(string); ok {
			args.Query.Set("ScalingGroupName.15", ScalingGroupName15)
		} else {
			return nil, errors.New("ScalingGroupName.15 must be string")
		}
	}
	if v, ok := optional["ScalingGroupName.16"]; ok {
		if ScalingGroupName16, ok := v.(string); ok {
			args.Query.Set("ScalingGroupName.16", ScalingGroupName16)
		} else {
			return nil, errors.New("ScalingGroupName.16 must be string")
		}
	}
	if v, ok := optional["ScalingGroupName.17"]; ok {
		if ScalingGroupName17, ok := v.(string); ok {
			args.Query.Set("ScalingGroupName.17", ScalingGroupName17)
		} else {
			return nil, errors.New("ScalingGroupName.17 must be string")
		}
	}
	if v, ok := optional["ScalingGroupName.18"]; ok {
		if ScalingGroupName18, ok := v.(string); ok {
			args.Query.Set("ScalingGroupName.18", ScalingGroupName18)
		} else {
			return nil, errors.New("ScalingGroupName.18 must be string")
		}
	}
	if v, ok := optional["ScalingGroupName.19"]; ok {
		if ScalingGroupName19, ok := v.(string); ok {
			args.Query.Set("ScalingGroupName.19", ScalingGroupName19)
		} else {
			return nil, errors.New("ScalingGroupName.19 must be string")
		}
	}
	if v, ok := optional["ScalingGroupName.2"]; ok {
		if ScalingGroupName2, ok := v.(string); ok {
			args.Query.Set("ScalingGroupName.2", ScalingGroupName2)
		} else {
			return nil, errors.New("ScalingGroupName.2 must be string")
		}
	}
	if v, ok := optional["ScalingGroupName.20"]; ok {
		if ScalingGroupName20, ok := v.(string); ok {
			args.Query.Set("ScalingGroupName.20", ScalingGroupName20)
		} else {
			return nil, errors.New("ScalingGroupName.20 must be string")
		}
	}
	if v, ok := optional["ScalingGroupName.3"]; ok {
		if ScalingGroupName3, ok := v.(string); ok {
			args.Query.Set("ScalingGroupName.3", ScalingGroupName3)
		} else {
			return nil, errors.New("ScalingGroupName.3 must be string")
		}
	}
	if v, ok := optional["ScalingGroupName.4"]; ok {
		if ScalingGroupName4, ok := v.(string); ok {
			args.Query.Set("ScalingGroupName.4", ScalingGroupName4)
		} else {
			return nil, errors.New("ScalingGroupName.4 must be string")
		}
	}
	if v, ok := optional["ScalingGroupName.5"]; ok {
		if ScalingGroupName5, ok := v.(string); ok {
			args.Query.Set("ScalingGroupName.5", ScalingGroupName5)
		} else {
			return nil, errors.New("ScalingGroupName.5 must be string")
		}
	}
	if v, ok := optional["ScalingGroupName.6"]; ok {
		if ScalingGroupName6, ok := v.(string); ok {
			args.Query.Set("ScalingGroupName.6", ScalingGroupName6)
		} else {
			return nil, errors.New("ScalingGroupName.6 must be string")
		}
	}
	if v, ok := optional["ScalingGroupName.7"]; ok {
		if ScalingGroupName7, ok := v.(string); ok {
			args.Query.Set("ScalingGroupName.7", ScalingGroupName7)
		} else {
			return nil, errors.New("ScalingGroupName.7 must be string")
		}
	}
	if v, ok := optional["ScalingGroupName.8"]; ok {
		if ScalingGroupName8, ok := v.(string); ok {
			args.Query.Set("ScalingGroupName.8", ScalingGroupName8)
		} else {
			return nil, errors.New("ScalingGroupName.8 must be string")
		}
	}
	if v, ok := optional["ScalingGroupName.9"]; ok {
		if ScalingGroupName9, ok := v.(string); ok {
			args.Query.Set("ScalingGroupName.9", ScalingGroupName9)
		} else {
			return nil, errors.New("ScalingGroupName.9 must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(DescribeScalingGroupsResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DescribeScalingGroupsResponse represents the response of the api DescribeScalingGroups.
type DescribeScalingGroupsResponse struct {
	PageNumber    int
	PageSize      int
	ScalingGroups struct {
		ScalingGroup []struct {
			ActiveCapacity               int
			ActiveScalingConfigurationId string
			CreationTime                 string
			DefaultCooldown              int
			LifecycleState               string
			LoadBalancerId               string
			MaxSize                      int
			MinSize                      int
			PendingCapacity              int
			RegionId                     string
			RemovingCapacity             int
			ScalingGroupId               string
			ScalingGroupName             string
			TotalCapacity                int
		}
	}
	TotalCount int
}

// DescribeScalingInstances version 2014-08-28
//
// optional parameters:
//  name: CreationType, type: string
//  name: HealthStatus, type: string
//  name: InstanceId.1, type: string
//  name: InstanceId.10, type: string
//  name: InstanceId.11, type: string
//  name: InstanceId.12, type: string
//  name: InstanceId.13, type: string
//  name: InstanceId.14, type: string
//  name: InstanceId.15, type: string
//  name: InstanceId.16, type: string
//  name: InstanceId.17, type: string
//  name: InstanceId.18, type: string
//  name: InstanceId.19, type: string
//  name: InstanceId.2, type: string
//  name: InstanceId.20, type: string
//  name: InstanceId.3, type: string
//  name: InstanceId.4, type: string
//  name: InstanceId.5, type: string
//  name: InstanceId.6, type: string
//  name: InstanceId.7, type: string
//  name: InstanceId.8, type: string
//  name: InstanceId.9, type: string
//  name: LifecycleState, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: PageNumber, type: int
//  name: PageSize, type: int, max value: 50
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: ScalingConfigurationId, type: string
//  name: ScalingGroupId, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) DescribeScalingInstances(optional openapi.M) (*DescribeScalingInstancesResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "DescribeScalingInstances")
	if v, ok := optional["CreationType"]; ok {
		if CreationType, ok := v.(string); ok {
			args.Query.Set("CreationType", CreationType)
		} else {
			return nil, errors.New("CreationType must be string")
		}
	}
	if v, ok := optional["HealthStatus"]; ok {
		if HealthStatus, ok := v.(string); ok {
			args.Query.Set("HealthStatus", HealthStatus)
		} else {
			return nil, errors.New("HealthStatus must be string")
		}
	}
	if v, ok := optional["InstanceId.1"]; ok {
		if InstanceId1, ok := v.(string); ok {
			args.Query.Set("InstanceId.1", InstanceId1)
		} else {
			return nil, errors.New("InstanceId.1 must be string")
		}
	}
	if v, ok := optional["InstanceId.10"]; ok {
		if InstanceId10, ok := v.(string); ok {
			args.Query.Set("InstanceId.10", InstanceId10)
		} else {
			return nil, errors.New("InstanceId.10 must be string")
		}
	}
	if v, ok := optional["InstanceId.11"]; ok {
		if InstanceId11, ok := v.(string); ok {
			args.Query.Set("InstanceId.11", InstanceId11)
		} else {
			return nil, errors.New("InstanceId.11 must be string")
		}
	}
	if v, ok := optional["InstanceId.12"]; ok {
		if InstanceId12, ok := v.(string); ok {
			args.Query.Set("InstanceId.12", InstanceId12)
		} else {
			return nil, errors.New("InstanceId.12 must be string")
		}
	}
	if v, ok := optional["InstanceId.13"]; ok {
		if InstanceId13, ok := v.(string); ok {
			args.Query.Set("InstanceId.13", InstanceId13)
		} else {
			return nil, errors.New("InstanceId.13 must be string")
		}
	}
	if v, ok := optional["InstanceId.14"]; ok {
		if InstanceId14, ok := v.(string); ok {
			args.Query.Set("InstanceId.14", InstanceId14)
		} else {
			return nil, errors.New("InstanceId.14 must be string")
		}
	}
	if v, ok := optional["InstanceId.15"]; ok {
		if InstanceId15, ok := v.(string); ok {
			args.Query.Set("InstanceId.15", InstanceId15)
		} else {
			return nil, errors.New("InstanceId.15 must be string")
		}
	}
	if v, ok := optional["InstanceId.16"]; ok {
		if InstanceId16, ok := v.(string); ok {
			args.Query.Set("InstanceId.16", InstanceId16)
		} else {
			return nil, errors.New("InstanceId.16 must be string")
		}
	}
	if v, ok := optional["InstanceId.17"]; ok {
		if InstanceId17, ok := v.(string); ok {
			args.Query.Set("InstanceId.17", InstanceId17)
		} else {
			return nil, errors.New("InstanceId.17 must be string")
		}
	}
	if v, ok := optional["InstanceId.18"]; ok {
		if InstanceId18, ok := v.(string); ok {
			args.Query.Set("InstanceId.18", InstanceId18)
		} else {
			return nil, errors.New("InstanceId.18 must be string")
		}
	}
	if v, ok := optional["InstanceId.19"]; ok {
		if InstanceId19, ok := v.(string); ok {
			args.Query.Set("InstanceId.19", InstanceId19)
		} else {
			return nil, errors.New("InstanceId.19 must be string")
		}
	}
	if v, ok := optional["InstanceId.2"]; ok {
		if InstanceId2, ok := v.(string); ok {
			args.Query.Set("InstanceId.2", InstanceId2)
		} else {
			return nil, errors.New("InstanceId.2 must be string")
		}
	}
	if v, ok := optional["InstanceId.20"]; ok {
		if InstanceId20, ok := v.(string); ok {
			args.Query.Set("InstanceId.20", InstanceId20)
		} else {
			return nil, errors.New("InstanceId.20 must be string")
		}
	}
	if v, ok := optional["InstanceId.3"]; ok {
		if InstanceId3, ok := v.(string); ok {
			args.Query.Set("InstanceId.3", InstanceId3)
		} else {
			return nil, errors.New("InstanceId.3 must be string")
		}
	}
	if v, ok := optional["InstanceId.4"]; ok {
		if InstanceId4, ok := v.(string); ok {
			args.Query.Set("InstanceId.4", InstanceId4)
		} else {
			return nil, errors.New("InstanceId.4 must be string")
		}
	}
	if v, ok := optional["InstanceId.5"]; ok {
		if InstanceId5, ok := v.(string); ok {
			args.Query.Set("InstanceId.5", InstanceId5)
		} else {
			return nil, errors.New("InstanceId.5 must be string")
		}
	}
	if v, ok := optional["InstanceId.6"]; ok {
		if InstanceId6, ok := v.(string); ok {
			args.Query.Set("InstanceId.6", InstanceId6)
		} else {
			return nil, errors.New("InstanceId.6 must be string")
		}
	}
	if v, ok := optional["InstanceId.7"]; ok {
		if InstanceId7, ok := v.(string); ok {
			args.Query.Set("InstanceId.7", InstanceId7)
		} else {
			return nil, errors.New("InstanceId.7 must be string")
		}
	}
	if v, ok := optional["InstanceId.8"]; ok {
		if InstanceId8, ok := v.(string); ok {
			args.Query.Set("InstanceId.8", InstanceId8)
		} else {
			return nil, errors.New("InstanceId.8 must be string")
		}
	}
	if v, ok := optional["InstanceId.9"]; ok {
		if InstanceId9, ok := v.(string); ok {
			args.Query.Set("InstanceId.9", InstanceId9)
		} else {
			return nil, errors.New("InstanceId.9 must be string")
		}
	}
	if v, ok := optional["LifecycleState"]; ok {
		if LifecycleState, ok := v.(string); ok {
			args.Query.Set("LifecycleState", LifecycleState)
		} else {
			return nil, errors.New("LifecycleState must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["PageNumber"]; ok {
		if PageNumber, ok := v.(int); ok {
			args.Query.Set("PageNumber", fmt.Sprint(PageNumber))
		} else {
			return nil, errors.New("PageNumber must be int")
		}
	}
	if v, ok := optional["PageSize"]; ok {
		if PageSize, ok := v.(int); ok {
			if PageSize > 50 {
				return nil, errors.New("PageSize must be equal or less than 50")
			}
			args.Query.Set("PageSize", fmt.Sprint(PageSize))
		} else {
			return nil, errors.New("PageSize must be int")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["ScalingConfigurationId"]; ok {
		if ScalingConfigurationId, ok := v.(string); ok {
			args.Query.Set("ScalingConfigurationId", ScalingConfigurationId)
		} else {
			return nil, errors.New("ScalingConfigurationId must be string")
		}
	}
	if v, ok := optional["ScalingGroupId"]; ok {
		if ScalingGroupId, ok := v.(string); ok {
			args.Query.Set("ScalingGroupId", ScalingGroupId)
		} else {
			return nil, errors.New("ScalingGroupId must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(DescribeScalingInstancesResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DescribeScalingInstancesResponse represents the response of the api DescribeScalingInstances.
type DescribeScalingInstancesResponse struct {
	PageNumber       int
	PageSize         int
	ScalingInstances struct {
		ScalingInstance []struct {
			CreationTime           string
			CreationType           string
			HealthStatus           string
			InstanceId             string
			LifecycleState         string
			ScalingConfigurationId string
			ScalingGroupId         string
		}
	}
	TotalCount int
}

// DescribeScalingRules version 2014-08-28
//
// optional parameters:
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: PageNumber, type: int
//  name: PageSize, type: int, max value: 50
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: ScalingGroupId, type: string
//  name: ScalingRuleAri.1, type: string
//  name: ScalingRuleAri.10, type: string
//  name: ScalingRuleAri.2, type: string
//  name: ScalingRuleAri.3, type: string
//  name: ScalingRuleAri.4, type: string
//  name: ScalingRuleAri.5, type: string
//  name: ScalingRuleAri.6, type: string
//  name: ScalingRuleAri.7, type: string
//  name: ScalingRuleAri.8, type: string
//  name: ScalingRuleAri.9, type: string
//  name: ScalingRuleId.1, type: string
//  name: ScalingRuleId.10, type: string
//  name: ScalingRuleId.2, type: string
//  name: ScalingRuleId.3, type: string
//  name: ScalingRuleId.4, type: string
//  name: ScalingRuleId.5, type: string
//  name: ScalingRuleId.6, type: string
//  name: ScalingRuleId.7, type: string
//  name: ScalingRuleId.8, type: string
//  name: ScalingRuleId.9, type: string
//  name: ScalingRuleName.1, type: string
//  name: ScalingRuleName.10, type: string
//  name: ScalingRuleName.2, type: string
//  name: ScalingRuleName.3, type: string
//  name: ScalingRuleName.4, type: string
//  name: ScalingRuleName.5, type: string
//  name: ScalingRuleName.6, type: string
//  name: ScalingRuleName.7, type: string
//  name: ScalingRuleName.8, type: string
//  name: ScalingRuleName.9, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) DescribeScalingRules(optional openapi.M) (*DescribeScalingRulesResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "DescribeScalingRules")
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["PageNumber"]; ok {
		if PageNumber, ok := v.(int); ok {
			args.Query.Set("PageNumber", fmt.Sprint(PageNumber))
		} else {
			return nil, errors.New("PageNumber must be int")
		}
	}
	if v, ok := optional["PageSize"]; ok {
		if PageSize, ok := v.(int); ok {
			if PageSize > 50 {
				return nil, errors.New("PageSize must be equal or less than 50")
			}
			args.Query.Set("PageSize", fmt.Sprint(PageSize))
		} else {
			return nil, errors.New("PageSize must be int")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["ScalingGroupId"]; ok {
		if ScalingGroupId, ok := v.(string); ok {
			args.Query.Set("ScalingGroupId", ScalingGroupId)
		} else {
			return nil, errors.New("ScalingGroupId must be string")
		}
	}
	if v, ok := optional["ScalingRuleAri.1"]; ok {
		if ScalingRuleAri1, ok := v.(string); ok {
			args.Query.Set("ScalingRuleAri.1", ScalingRuleAri1)
		} else {
			return nil, errors.New("ScalingRuleAri.1 must be string")
		}
	}
	if v, ok := optional["ScalingRuleAri.10"]; ok {
		if ScalingRuleAri10, ok := v.(string); ok {
			args.Query.Set("ScalingRuleAri.10", ScalingRuleAri10)
		} else {
			return nil, errors.New("ScalingRuleAri.10 must be string")
		}
	}
	if v, ok := optional["ScalingRuleAri.2"]; ok {
		if ScalingRuleAri2, ok := v.(string); ok {
			args.Query.Set("ScalingRuleAri.2", ScalingRuleAri2)
		} else {
			return nil, errors.New("ScalingRuleAri.2 must be string")
		}
	}
	if v, ok := optional["ScalingRuleAri.3"]; ok {
		if ScalingRuleAri3, ok := v.(string); ok {
			args.Query.Set("ScalingRuleAri.3", ScalingRuleAri3)
		} else {
			return nil, errors.New("ScalingRuleAri.3 must be string")
		}
	}
	if v, ok := optional["ScalingRuleAri.4"]; ok {
		if ScalingRuleAri4, ok := v.(string); ok {
			args.Query.Set("ScalingRuleAri.4", ScalingRuleAri4)
		} else {
			return nil, errors.New("ScalingRuleAri.4 must be string")
		}
	}
	if v, ok := optional["ScalingRuleAri.5"]; ok {
		if ScalingRuleAri5, ok := v.(string); ok {
			args.Query.Set("ScalingRuleAri.5", ScalingRuleAri5)
		} else {
			return nil, errors.New("ScalingRuleAri.5 must be string")
		}
	}
	if v, ok := optional["ScalingRuleAri.6"]; ok {
		if ScalingRuleAri6, ok := v.(string); ok {
			args.Query.Set("ScalingRuleAri.6", ScalingRuleAri6)
		} else {
			return nil, errors.New("ScalingRuleAri.6 must be string")
		}
	}
	if v, ok := optional["ScalingRuleAri.7"]; ok {
		if ScalingRuleAri7, ok := v.(string); ok {
			args.Query.Set("ScalingRuleAri.7", ScalingRuleAri7)
		} else {
			return nil, errors.New("ScalingRuleAri.7 must be string")
		}
	}
	if v, ok := optional["ScalingRuleAri.8"]; ok {
		if ScalingRuleAri8, ok := v.(string); ok {
			args.Query.Set("ScalingRuleAri.8", ScalingRuleAri8)
		} else {
			return nil, errors.New("ScalingRuleAri.8 must be string")
		}
	}
	if v, ok := optional["ScalingRuleAri.9"]; ok {
		if ScalingRuleAri9, ok := v.(string); ok {
			args.Query.Set("ScalingRuleAri.9", ScalingRuleAri9)
		} else {
			return nil, errors.New("ScalingRuleAri.9 must be string")
		}
	}
	if v, ok := optional["ScalingRuleId.1"]; ok {
		if ScalingRuleId1, ok := v.(string); ok {
			args.Query.Set("ScalingRuleId.1", ScalingRuleId1)
		} else {
			return nil, errors.New("ScalingRuleId.1 must be string")
		}
	}
	if v, ok := optional["ScalingRuleId.10"]; ok {
		if ScalingRuleId10, ok := v.(string); ok {
			args.Query.Set("ScalingRuleId.10", ScalingRuleId10)
		} else {
			return nil, errors.New("ScalingRuleId.10 must be string")
		}
	}
	if v, ok := optional["ScalingRuleId.2"]; ok {
		if ScalingRuleId2, ok := v.(string); ok {
			args.Query.Set("ScalingRuleId.2", ScalingRuleId2)
		} else {
			return nil, errors.New("ScalingRuleId.2 must be string")
		}
	}
	if v, ok := optional["ScalingRuleId.3"]; ok {
		if ScalingRuleId3, ok := v.(string); ok {
			args.Query.Set("ScalingRuleId.3", ScalingRuleId3)
		} else {
			return nil, errors.New("ScalingRuleId.3 must be string")
		}
	}
	if v, ok := optional["ScalingRuleId.4"]; ok {
		if ScalingRuleId4, ok := v.(string); ok {
			args.Query.Set("ScalingRuleId.4", ScalingRuleId4)
		} else {
			return nil, errors.New("ScalingRuleId.4 must be string")
		}
	}
	if v, ok := optional["ScalingRuleId.5"]; ok {
		if ScalingRuleId5, ok := v.(string); ok {
			args.Query.Set("ScalingRuleId.5", ScalingRuleId5)
		} else {
			return nil, errors.New("ScalingRuleId.5 must be string")
		}
	}
	if v, ok := optional["ScalingRuleId.6"]; ok {
		if ScalingRuleId6, ok := v.(string); ok {
			args.Query.Set("ScalingRuleId.6", ScalingRuleId6)
		} else {
			return nil, errors.New("ScalingRuleId.6 must be string")
		}
	}
	if v, ok := optional["ScalingRuleId.7"]; ok {
		if ScalingRuleId7, ok := v.(string); ok {
			args.Query.Set("ScalingRuleId.7", ScalingRuleId7)
		} else {
			return nil, errors.New("ScalingRuleId.7 must be string")
		}
	}
	if v, ok := optional["ScalingRuleId.8"]; ok {
		if ScalingRuleId8, ok := v.(string); ok {
			args.Query.Set("ScalingRuleId.8", ScalingRuleId8)
		} else {
			return nil, errors.New("ScalingRuleId.8 must be string")
		}
	}
	if v, ok := optional["ScalingRuleId.9"]; ok {
		if ScalingRuleId9, ok := v.(string); ok {
			args.Query.Set("ScalingRuleId.9", ScalingRuleId9)
		} else {
			return nil, errors.New("ScalingRuleId.9 must be string")
		}
	}
	if v, ok := optional["ScalingRuleName.1"]; ok {
		if ScalingRuleName1, ok := v.(string); ok {
			args.Query.Set("ScalingRuleName.1", ScalingRuleName1)
		} else {
			return nil, errors.New("ScalingRuleName.1 must be string")
		}
	}
	if v, ok := optional["ScalingRuleName.10"]; ok {
		if ScalingRuleName10, ok := v.(string); ok {
			args.Query.Set("ScalingRuleName.10", ScalingRuleName10)
		} else {
			return nil, errors.New("ScalingRuleName.10 must be string")
		}
	}
	if v, ok := optional["ScalingRuleName.2"]; ok {
		if ScalingRuleName2, ok := v.(string); ok {
			args.Query.Set("ScalingRuleName.2", ScalingRuleName2)
		} else {
			return nil, errors.New("ScalingRuleName.2 must be string")
		}
	}
	if v, ok := optional["ScalingRuleName.3"]; ok {
		if ScalingRuleName3, ok := v.(string); ok {
			args.Query.Set("ScalingRuleName.3", ScalingRuleName3)
		} else {
			return nil, errors.New("ScalingRuleName.3 must be string")
		}
	}
	if v, ok := optional["ScalingRuleName.4"]; ok {
		if ScalingRuleName4, ok := v.(string); ok {
			args.Query.Set("ScalingRuleName.4", ScalingRuleName4)
		} else {
			return nil, errors.New("ScalingRuleName.4 must be string")
		}
	}
	if v, ok := optional["ScalingRuleName.5"]; ok {
		if ScalingRuleName5, ok := v.(string); ok {
			args.Query.Set("ScalingRuleName.5", ScalingRuleName5)
		} else {
			return nil, errors.New("ScalingRuleName.5 must be string")
		}
	}
	if v, ok := optional["ScalingRuleName.6"]; ok {
		if ScalingRuleName6, ok := v.(string); ok {
			args.Query.Set("ScalingRuleName.6", ScalingRuleName6)
		} else {
			return nil, errors.New("ScalingRuleName.6 must be string")
		}
	}
	if v, ok := optional["ScalingRuleName.7"]; ok {
		if ScalingRuleName7, ok := v.(string); ok {
			args.Query.Set("ScalingRuleName.7", ScalingRuleName7)
		} else {
			return nil, errors.New("ScalingRuleName.7 must be string")
		}
	}
	if v, ok := optional["ScalingRuleName.8"]; ok {
		if ScalingRuleName8, ok := v.(string); ok {
			args.Query.Set("ScalingRuleName.8", ScalingRuleName8)
		} else {
			return nil, errors.New("ScalingRuleName.8 must be string")
		}
	}
	if v, ok := optional["ScalingRuleName.9"]; ok {
		if ScalingRuleName9, ok := v.(string); ok {
			args.Query.Set("ScalingRuleName.9", ScalingRuleName9)
		} else {
			return nil, errors.New("ScalingRuleName.9 must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(DescribeScalingRulesResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DescribeScalingRulesResponse represents the response of the api DescribeScalingRules.
type DescribeScalingRulesResponse struct {
	PageNumber   int
	PageSize     int
	ScalingRules struct {
		ScalingRule []struct {
			AdjustmentType  string
			AdjustmentValue int
			Cooldown        int
			MaxSize         int
			MinSize         int
			ScalingGroupId  string
			ScalingRuleAri  string
			ScalingRuleId   string
			ScalingRuleName string
		}
	}
	TotalCount int
}

// DescribeScheduledTasks version 2014-08-28
//
// optional parameters:
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: PageNumber, type: int
//  name: PageSize, type: int, max value: 50
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: ScheduledAction.1, type: string
//  name: ScheduledAction.10, type: string
//  name: ScheduledAction.11, type: string
//  name: ScheduledAction.12, type: string
//  name: ScheduledAction.13, type: string
//  name: ScheduledAction.14, type: string
//  name: ScheduledAction.15, type: string
//  name: ScheduledAction.16, type: string
//  name: ScheduledAction.17, type: string
//  name: ScheduledAction.18, type: string
//  name: ScheduledAction.19, type: string
//  name: ScheduledAction.2, type: string
//  name: ScheduledAction.20, type: string
//  name: ScheduledAction.3, type: string
//  name: ScheduledAction.4, type: string
//  name: ScheduledAction.5, type: string
//  name: ScheduledAction.6, type: string
//  name: ScheduledAction.7, type: string
//  name: ScheduledAction.8, type: string
//  name: ScheduledAction.9, type: string
//  name: ScheduledTaskId.1, type: string
//  name: ScheduledTaskId.10, type: string
//  name: ScheduledTaskId.11, type: string
//  name: ScheduledTaskId.12, type: string
//  name: ScheduledTaskId.13, type: string
//  name: ScheduledTaskId.14, type: string
//  name: ScheduledTaskId.15, type: string
//  name: ScheduledTaskId.16, type: string
//  name: ScheduledTaskId.17, type: string
//  name: ScheduledTaskId.18, type: string
//  name: ScheduledTaskId.19, type: string
//  name: ScheduledTaskId.2, type: string
//  name: ScheduledTaskId.20, type: string
//  name: ScheduledTaskId.3, type: string
//  name: ScheduledTaskId.4, type: string
//  name: ScheduledTaskId.5, type: string
//  name: ScheduledTaskId.6, type: string
//  name: ScheduledTaskId.7, type: string
//  name: ScheduledTaskId.8, type: string
//  name: ScheduledTaskId.9, type: string
//  name: ScheduledTaskName.1, type: string
//  name: ScheduledTaskName.10, type: string
//  name: ScheduledTaskName.11, type: string
//  name: ScheduledTaskName.12, type: string
//  name: ScheduledTaskName.13, type: string
//  name: ScheduledTaskName.14, type: string
//  name: ScheduledTaskName.15, type: string
//  name: ScheduledTaskName.16, type: string
//  name: ScheduledTaskName.17, type: string
//  name: ScheduledTaskName.18, type: string
//  name: ScheduledTaskName.19, type: string
//  name: ScheduledTaskName.2, type: string
//  name: ScheduledTaskName.20, type: string
//  name: ScheduledTaskName.3, type: string
//  name: ScheduledTaskName.4, type: string
//  name: ScheduledTaskName.5, type: string
//  name: ScheduledTaskName.6, type: string
//  name: ScheduledTaskName.7, type: string
//  name: ScheduledTaskName.8, type: string
//  name: ScheduledTaskName.9, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) DescribeScheduledTasks(optional openapi.M) (*DescribeScheduledTasksResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "DescribeScheduledTasks")
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["PageNumber"]; ok {
		if PageNumber, ok := v.(int); ok {
			args.Query.Set("PageNumber", fmt.Sprint(PageNumber))
		} else {
			return nil, errors.New("PageNumber must be int")
		}
	}
	if v, ok := optional["PageSize"]; ok {
		if PageSize, ok := v.(int); ok {
			if PageSize > 50 {
				return nil, errors.New("PageSize must be equal or less than 50")
			}
			args.Query.Set("PageSize", fmt.Sprint(PageSize))
		} else {
			return nil, errors.New("PageSize must be int")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["ScheduledAction.1"]; ok {
		if ScheduledAction1, ok := v.(string); ok {
			args.Query.Set("ScheduledAction.1", ScheduledAction1)
		} else {
			return nil, errors.New("ScheduledAction.1 must be string")
		}
	}
	if v, ok := optional["ScheduledAction.10"]; ok {
		if ScheduledAction10, ok := v.(string); ok {
			args.Query.Set("ScheduledAction.10", ScheduledAction10)
		} else {
			return nil, errors.New("ScheduledAction.10 must be string")
		}
	}
	if v, ok := optional["ScheduledAction.11"]; ok {
		if ScheduledAction11, ok := v.(string); ok {
			args.Query.Set("ScheduledAction.11", ScheduledAction11)
		} else {
			return nil, errors.New("ScheduledAction.11 must be string")
		}
	}
	if v, ok := optional["ScheduledAction.12"]; ok {
		if ScheduledAction12, ok := v.(string); ok {
			args.Query.Set("ScheduledAction.12", ScheduledAction12)
		} else {
			return nil, errors.New("ScheduledAction.12 must be string")
		}
	}
	if v, ok := optional["ScheduledAction.13"]; ok {
		if ScheduledAction13, ok := v.(string); ok {
			args.Query.Set("ScheduledAction.13", ScheduledAction13)
		} else {
			return nil, errors.New("ScheduledAction.13 must be string")
		}
	}
	if v, ok := optional["ScheduledAction.14"]; ok {
		if ScheduledAction14, ok := v.(string); ok {
			args.Query.Set("ScheduledAction.14", ScheduledAction14)
		} else {
			return nil, errors.New("ScheduledAction.14 must be string")
		}
	}
	if v, ok := optional["ScheduledAction.15"]; ok {
		if ScheduledAction15, ok := v.(string); ok {
			args.Query.Set("ScheduledAction.15", ScheduledAction15)
		} else {
			return nil, errors.New("ScheduledAction.15 must be string")
		}
	}
	if v, ok := optional["ScheduledAction.16"]; ok {
		if ScheduledAction16, ok := v.(string); ok {
			args.Query.Set("ScheduledAction.16", ScheduledAction16)
		} else {
			return nil, errors.New("ScheduledAction.16 must be string")
		}
	}
	if v, ok := optional["ScheduledAction.17"]; ok {
		if ScheduledAction17, ok := v.(string); ok {
			args.Query.Set("ScheduledAction.17", ScheduledAction17)
		} else {
			return nil, errors.New("ScheduledAction.17 must be string")
		}
	}
	if v, ok := optional["ScheduledAction.18"]; ok {
		if ScheduledAction18, ok := v.(string); ok {
			args.Query.Set("ScheduledAction.18", ScheduledAction18)
		} else {
			return nil, errors.New("ScheduledAction.18 must be string")
		}
	}
	if v, ok := optional["ScheduledAction.19"]; ok {
		if ScheduledAction19, ok := v.(string); ok {
			args.Query.Set("ScheduledAction.19", ScheduledAction19)
		} else {
			return nil, errors.New("ScheduledAction.19 must be string")
		}
	}
	if v, ok := optional["ScheduledAction.2"]; ok {
		if ScheduledAction2, ok := v.(string); ok {
			args.Query.Set("ScheduledAction.2", ScheduledAction2)
		} else {
			return nil, errors.New("ScheduledAction.2 must be string")
		}
	}
	if v, ok := optional["ScheduledAction.20"]; ok {
		if ScheduledAction20, ok := v.(string); ok {
			args.Query.Set("ScheduledAction.20", ScheduledAction20)
		} else {
			return nil, errors.New("ScheduledAction.20 must be string")
		}
	}
	if v, ok := optional["ScheduledAction.3"]; ok {
		if ScheduledAction3, ok := v.(string); ok {
			args.Query.Set("ScheduledAction.3", ScheduledAction3)
		} else {
			return nil, errors.New("ScheduledAction.3 must be string")
		}
	}
	if v, ok := optional["ScheduledAction.4"]; ok {
		if ScheduledAction4, ok := v.(string); ok {
			args.Query.Set("ScheduledAction.4", ScheduledAction4)
		} else {
			return nil, errors.New("ScheduledAction.4 must be string")
		}
	}
	if v, ok := optional["ScheduledAction.5"]; ok {
		if ScheduledAction5, ok := v.(string); ok {
			args.Query.Set("ScheduledAction.5", ScheduledAction5)
		} else {
			return nil, errors.New("ScheduledAction.5 must be string")
		}
	}
	if v, ok := optional["ScheduledAction.6"]; ok {
		if ScheduledAction6, ok := v.(string); ok {
			args.Query.Set("ScheduledAction.6", ScheduledAction6)
		} else {
			return nil, errors.New("ScheduledAction.6 must be string")
		}
	}
	if v, ok := optional["ScheduledAction.7"]; ok {
		if ScheduledAction7, ok := v.(string); ok {
			args.Query.Set("ScheduledAction.7", ScheduledAction7)
		} else {
			return nil, errors.New("ScheduledAction.7 must be string")
		}
	}
	if v, ok := optional["ScheduledAction.8"]; ok {
		if ScheduledAction8, ok := v.(string); ok {
			args.Query.Set("ScheduledAction.8", ScheduledAction8)
		} else {
			return nil, errors.New("ScheduledAction.8 must be string")
		}
	}
	if v, ok := optional["ScheduledAction.9"]; ok {
		if ScheduledAction9, ok := v.(string); ok {
			args.Query.Set("ScheduledAction.9", ScheduledAction9)
		} else {
			return nil, errors.New("ScheduledAction.9 must be string")
		}
	}
	if v, ok := optional["ScheduledTaskId.1"]; ok {
		if ScheduledTaskId1, ok := v.(string); ok {
			args.Query.Set("ScheduledTaskId.1", ScheduledTaskId1)
		} else {
			return nil, errors.New("ScheduledTaskId.1 must be string")
		}
	}
	if v, ok := optional["ScheduledTaskId.10"]; ok {
		if ScheduledTaskId10, ok := v.(string); ok {
			args.Query.Set("ScheduledTaskId.10", ScheduledTaskId10)
		} else {
			return nil, errors.New("ScheduledTaskId.10 must be string")
		}
	}
	if v, ok := optional["ScheduledTaskId.11"]; ok {
		if ScheduledTaskId11, ok := v.(string); ok {
			args.Query.Set("ScheduledTaskId.11", ScheduledTaskId11)
		} else {
			return nil, errors.New("ScheduledTaskId.11 must be string")
		}
	}
	if v, ok := optional["ScheduledTaskId.12"]; ok {
		if ScheduledTaskId12, ok := v.(string); ok {
			args.Query.Set("ScheduledTaskId.12", ScheduledTaskId12)
		} else {
			return nil, errors.New("ScheduledTaskId.12 must be string")
		}
	}
	if v, ok := optional["ScheduledTaskId.13"]; ok {
		if ScheduledTaskId13, ok := v.(string); ok {
			args.Query.Set("ScheduledTaskId.13", ScheduledTaskId13)
		} else {
			return nil, errors.New("ScheduledTaskId.13 must be string")
		}
	}
	if v, ok := optional["ScheduledTaskId.14"]; ok {
		if ScheduledTaskId14, ok := v.(string); ok {
			args.Query.Set("ScheduledTaskId.14", ScheduledTaskId14)
		} else {
			return nil, errors.New("ScheduledTaskId.14 must be string")
		}
	}
	if v, ok := optional["ScheduledTaskId.15"]; ok {
		if ScheduledTaskId15, ok := v.(string); ok {
			args.Query.Set("ScheduledTaskId.15", ScheduledTaskId15)
		} else {
			return nil, errors.New("ScheduledTaskId.15 must be string")
		}
	}
	if v, ok := optional["ScheduledTaskId.16"]; ok {
		if ScheduledTaskId16, ok := v.(string); ok {
			args.Query.Set("ScheduledTaskId.16", ScheduledTaskId16)
		} else {
			return nil, errors.New("ScheduledTaskId.16 must be string")
		}
	}
	if v, ok := optional["ScheduledTaskId.17"]; ok {
		if ScheduledTaskId17, ok := v.(string); ok {
			args.Query.Set("ScheduledTaskId.17", ScheduledTaskId17)
		} else {
			return nil, errors.New("ScheduledTaskId.17 must be string")
		}
	}
	if v, ok := optional["ScheduledTaskId.18"]; ok {
		if ScheduledTaskId18, ok := v.(string); ok {
			args.Query.Set("ScheduledTaskId.18", ScheduledTaskId18)
		} else {
			return nil, errors.New("ScheduledTaskId.18 must be string")
		}
	}
	if v, ok := optional["ScheduledTaskId.19"]; ok {
		if ScheduledTaskId19, ok := v.(string); ok {
			args.Query.Set("ScheduledTaskId.19", ScheduledTaskId19)
		} else {
			return nil, errors.New("ScheduledTaskId.19 must be string")
		}
	}
	if v, ok := optional["ScheduledTaskId.2"]; ok {
		if ScheduledTaskId2, ok := v.(string); ok {
			args.Query.Set("ScheduledTaskId.2", ScheduledTaskId2)
		} else {
			return nil, errors.New("ScheduledTaskId.2 must be string")
		}
	}
	if v, ok := optional["ScheduledTaskId.20"]; ok {
		if ScheduledTaskId20, ok := v.(string); ok {
			args.Query.Set("ScheduledTaskId.20", ScheduledTaskId20)
		} else {
			return nil, errors.New("ScheduledTaskId.20 must be string")
		}
	}
	if v, ok := optional["ScheduledTaskId.3"]; ok {
		if ScheduledTaskId3, ok := v.(string); ok {
			args.Query.Set("ScheduledTaskId.3", ScheduledTaskId3)
		} else {
			return nil, errors.New("ScheduledTaskId.3 must be string")
		}
	}
	if v, ok := optional["ScheduledTaskId.4"]; ok {
		if ScheduledTaskId4, ok := v.(string); ok {
			args.Query.Set("ScheduledTaskId.4", ScheduledTaskId4)
		} else {
			return nil, errors.New("ScheduledTaskId.4 must be string")
		}
	}
	if v, ok := optional["ScheduledTaskId.5"]; ok {
		if ScheduledTaskId5, ok := v.(string); ok {
			args.Query.Set("ScheduledTaskId.5", ScheduledTaskId5)
		} else {
			return nil, errors.New("ScheduledTaskId.5 must be string")
		}
	}
	if v, ok := optional["ScheduledTaskId.6"]; ok {
		if ScheduledTaskId6, ok := v.(string); ok {
			args.Query.Set("ScheduledTaskId.6", ScheduledTaskId6)
		} else {
			return nil, errors.New("ScheduledTaskId.6 must be string")
		}
	}
	if v, ok := optional["ScheduledTaskId.7"]; ok {
		if ScheduledTaskId7, ok := v.(string); ok {
			args.Query.Set("ScheduledTaskId.7", ScheduledTaskId7)
		} else {
			return nil, errors.New("ScheduledTaskId.7 must be string")
		}
	}
	if v, ok := optional["ScheduledTaskId.8"]; ok {
		if ScheduledTaskId8, ok := v.(string); ok {
			args.Query.Set("ScheduledTaskId.8", ScheduledTaskId8)
		} else {
			return nil, errors.New("ScheduledTaskId.8 must be string")
		}
	}
	if v, ok := optional["ScheduledTaskId.9"]; ok {
		if ScheduledTaskId9, ok := v.(string); ok {
			args.Query.Set("ScheduledTaskId.9", ScheduledTaskId9)
		} else {
			return nil, errors.New("ScheduledTaskId.9 must be string")
		}
	}
	if v, ok := optional["ScheduledTaskName.1"]; ok {
		if ScheduledTaskName1, ok := v.(string); ok {
			args.Query.Set("ScheduledTaskName.1", ScheduledTaskName1)
		} else {
			return nil, errors.New("ScheduledTaskName.1 must be string")
		}
	}
	if v, ok := optional["ScheduledTaskName.10"]; ok {
		if ScheduledTaskName10, ok := v.(string); ok {
			args.Query.Set("ScheduledTaskName.10", ScheduledTaskName10)
		} else {
			return nil, errors.New("ScheduledTaskName.10 must be string")
		}
	}
	if v, ok := optional["ScheduledTaskName.11"]; ok {
		if ScheduledTaskName11, ok := v.(string); ok {
			args.Query.Set("ScheduledTaskName.11", ScheduledTaskName11)
		} else {
			return nil, errors.New("ScheduledTaskName.11 must be string")
		}
	}
	if v, ok := optional["ScheduledTaskName.12"]; ok {
		if ScheduledTaskName12, ok := v.(string); ok {
			args.Query.Set("ScheduledTaskName.12", ScheduledTaskName12)
		} else {
			return nil, errors.New("ScheduledTaskName.12 must be string")
		}
	}
	if v, ok := optional["ScheduledTaskName.13"]; ok {
		if ScheduledTaskName13, ok := v.(string); ok {
			args.Query.Set("ScheduledTaskName.13", ScheduledTaskName13)
		} else {
			return nil, errors.New("ScheduledTaskName.13 must be string")
		}
	}
	if v, ok := optional["ScheduledTaskName.14"]; ok {
		if ScheduledTaskName14, ok := v.(string); ok {
			args.Query.Set("ScheduledTaskName.14", ScheduledTaskName14)
		} else {
			return nil, errors.New("ScheduledTaskName.14 must be string")
		}
	}
	if v, ok := optional["ScheduledTaskName.15"]; ok {
		if ScheduledTaskName15, ok := v.(string); ok {
			args.Query.Set("ScheduledTaskName.15", ScheduledTaskName15)
		} else {
			return nil, errors.New("ScheduledTaskName.15 must be string")
		}
	}
	if v, ok := optional["ScheduledTaskName.16"]; ok {
		if ScheduledTaskName16, ok := v.(string); ok {
			args.Query.Set("ScheduledTaskName.16", ScheduledTaskName16)
		} else {
			return nil, errors.New("ScheduledTaskName.16 must be string")
		}
	}
	if v, ok := optional["ScheduledTaskName.17"]; ok {
		if ScheduledTaskName17, ok := v.(string); ok {
			args.Query.Set("ScheduledTaskName.17", ScheduledTaskName17)
		} else {
			return nil, errors.New("ScheduledTaskName.17 must be string")
		}
	}
	if v, ok := optional["ScheduledTaskName.18"]; ok {
		if ScheduledTaskName18, ok := v.(string); ok {
			args.Query.Set("ScheduledTaskName.18", ScheduledTaskName18)
		} else {
			return nil, errors.New("ScheduledTaskName.18 must be string")
		}
	}
	if v, ok := optional["ScheduledTaskName.19"]; ok {
		if ScheduledTaskName19, ok := v.(string); ok {
			args.Query.Set("ScheduledTaskName.19", ScheduledTaskName19)
		} else {
			return nil, errors.New("ScheduledTaskName.19 must be string")
		}
	}
	if v, ok := optional["ScheduledTaskName.2"]; ok {
		if ScheduledTaskName2, ok := v.(string); ok {
			args.Query.Set("ScheduledTaskName.2", ScheduledTaskName2)
		} else {
			return nil, errors.New("ScheduledTaskName.2 must be string")
		}
	}
	if v, ok := optional["ScheduledTaskName.20"]; ok {
		if ScheduledTaskName20, ok := v.(string); ok {
			args.Query.Set("ScheduledTaskName.20", ScheduledTaskName20)
		} else {
			return nil, errors.New("ScheduledTaskName.20 must be string")
		}
	}
	if v, ok := optional["ScheduledTaskName.3"]; ok {
		if ScheduledTaskName3, ok := v.(string); ok {
			args.Query.Set("ScheduledTaskName.3", ScheduledTaskName3)
		} else {
			return nil, errors.New("ScheduledTaskName.3 must be string")
		}
	}
	if v, ok := optional["ScheduledTaskName.4"]; ok {
		if ScheduledTaskName4, ok := v.(string); ok {
			args.Query.Set("ScheduledTaskName.4", ScheduledTaskName4)
		} else {
			return nil, errors.New("ScheduledTaskName.4 must be string")
		}
	}
	if v, ok := optional["ScheduledTaskName.5"]; ok {
		if ScheduledTaskName5, ok := v.(string); ok {
			args.Query.Set("ScheduledTaskName.5", ScheduledTaskName5)
		} else {
			return nil, errors.New("ScheduledTaskName.5 must be string")
		}
	}
	if v, ok := optional["ScheduledTaskName.6"]; ok {
		if ScheduledTaskName6, ok := v.(string); ok {
			args.Query.Set("ScheduledTaskName.6", ScheduledTaskName6)
		} else {
			return nil, errors.New("ScheduledTaskName.6 must be string")
		}
	}
	if v, ok := optional["ScheduledTaskName.7"]; ok {
		if ScheduledTaskName7, ok := v.(string); ok {
			args.Query.Set("ScheduledTaskName.7", ScheduledTaskName7)
		} else {
			return nil, errors.New("ScheduledTaskName.7 must be string")
		}
	}
	if v, ok := optional["ScheduledTaskName.8"]; ok {
		if ScheduledTaskName8, ok := v.(string); ok {
			args.Query.Set("ScheduledTaskName.8", ScheduledTaskName8)
		} else {
			return nil, errors.New("ScheduledTaskName.8 must be string")
		}
	}
	if v, ok := optional["ScheduledTaskName.9"]; ok {
		if ScheduledTaskName9, ok := v.(string); ok {
			args.Query.Set("ScheduledTaskName.9", ScheduledTaskName9)
		} else {
			return nil, errors.New("ScheduledTaskName.9 must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(DescribeScheduledTasksResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DescribeScheduledTasksResponse represents the response of the api DescribeScheduledTasks.
type DescribeScheduledTasksResponse struct {
	PageNumber     int
	PageSize       int
	ScheduledTasks struct {
		ScheduledTask []struct {
			Description          string
			LaunchExpirationTime int
			LaunchTime           string
			RecurrenceEndTime    string
			RecurrenceType       string
			RecurrenceValue      string
			ScheduledAction      string
			ScheduledTaskId      string
			ScheduledTaskName    string
			TaskEnabled          bool
		}
	}
	TotalCount int
}

// DetachInstances version 2014-08-28
//
// required parameters:
//  name: InstanceId.1, type: string
//  name: ScalingGroupId, type: string
//
// optional parameters:
//  name: InstanceId.10, type: string
//  name: InstanceId.11, type: string
//  name: InstanceId.12, type: string
//  name: InstanceId.13, type: string
//  name: InstanceId.14, type: string
//  name: InstanceId.15, type: string
//  name: InstanceId.16, type: string
//  name: InstanceId.17, type: string
//  name: InstanceId.18, type: string
//  name: InstanceId.19, type: string
//  name: InstanceId.2, type: string
//  name: InstanceId.20, type: string
//  name: InstanceId.3, type: string
//  name: InstanceId.4, type: string
//  name: InstanceId.5, type: string
//  name: InstanceId.6, type: string
//  name: InstanceId.7, type: string
//  name: InstanceId.8, type: string
//  name: InstanceId.9, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) DetachInstances(InstanceId1, ScalingGroupId string, optional openapi.M) (*DetachInstancesResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "DetachInstances")
	args.Query.Set("InstanceId.1", InstanceId1)
	args.Query.Set("ScalingGroupId", ScalingGroupId)
	if v, ok := optional["InstanceId.10"]; ok {
		if InstanceId10, ok := v.(string); ok {
			args.Query.Set("InstanceId.10", InstanceId10)
		} else {
			return nil, errors.New("InstanceId.10 must be string")
		}
	}
	if v, ok := optional["InstanceId.11"]; ok {
		if InstanceId11, ok := v.(string); ok {
			args.Query.Set("InstanceId.11", InstanceId11)
		} else {
			return nil, errors.New("InstanceId.11 must be string")
		}
	}
	if v, ok := optional["InstanceId.12"]; ok {
		if InstanceId12, ok := v.(string); ok {
			args.Query.Set("InstanceId.12", InstanceId12)
		} else {
			return nil, errors.New("InstanceId.12 must be string")
		}
	}
	if v, ok := optional["InstanceId.13"]; ok {
		if InstanceId13, ok := v.(string); ok {
			args.Query.Set("InstanceId.13", InstanceId13)
		} else {
			return nil, errors.New("InstanceId.13 must be string")
		}
	}
	if v, ok := optional["InstanceId.14"]; ok {
		if InstanceId14, ok := v.(string); ok {
			args.Query.Set("InstanceId.14", InstanceId14)
		} else {
			return nil, errors.New("InstanceId.14 must be string")
		}
	}
	if v, ok := optional["InstanceId.15"]; ok {
		if InstanceId15, ok := v.(string); ok {
			args.Query.Set("InstanceId.15", InstanceId15)
		} else {
			return nil, errors.New("InstanceId.15 must be string")
		}
	}
	if v, ok := optional["InstanceId.16"]; ok {
		if InstanceId16, ok := v.(string); ok {
			args.Query.Set("InstanceId.16", InstanceId16)
		} else {
			return nil, errors.New("InstanceId.16 must be string")
		}
	}
	if v, ok := optional["InstanceId.17"]; ok {
		if InstanceId17, ok := v.(string); ok {
			args.Query.Set("InstanceId.17", InstanceId17)
		} else {
			return nil, errors.New("InstanceId.17 must be string")
		}
	}
	if v, ok := optional["InstanceId.18"]; ok {
		if InstanceId18, ok := v.(string); ok {
			args.Query.Set("InstanceId.18", InstanceId18)
		} else {
			return nil, errors.New("InstanceId.18 must be string")
		}
	}
	if v, ok := optional["InstanceId.19"]; ok {
		if InstanceId19, ok := v.(string); ok {
			args.Query.Set("InstanceId.19", InstanceId19)
		} else {
			return nil, errors.New("InstanceId.19 must be string")
		}
	}
	if v, ok := optional["InstanceId.2"]; ok {
		if InstanceId2, ok := v.(string); ok {
			args.Query.Set("InstanceId.2", InstanceId2)
		} else {
			return nil, errors.New("InstanceId.2 must be string")
		}
	}
	if v, ok := optional["InstanceId.20"]; ok {
		if InstanceId20, ok := v.(string); ok {
			args.Query.Set("InstanceId.20", InstanceId20)
		} else {
			return nil, errors.New("InstanceId.20 must be string")
		}
	}
	if v, ok := optional["InstanceId.3"]; ok {
		if InstanceId3, ok := v.(string); ok {
			args.Query.Set("InstanceId.3", InstanceId3)
		} else {
			return nil, errors.New("InstanceId.3 must be string")
		}
	}
	if v, ok := optional["InstanceId.4"]; ok {
		if InstanceId4, ok := v.(string); ok {
			args.Query.Set("InstanceId.4", InstanceId4)
		} else {
			return nil, errors.New("InstanceId.4 must be string")
		}
	}
	if v, ok := optional["InstanceId.5"]; ok {
		if InstanceId5, ok := v.(string); ok {
			args.Query.Set("InstanceId.5", InstanceId5)
		} else {
			return nil, errors.New("InstanceId.5 must be string")
		}
	}
	if v, ok := optional["InstanceId.6"]; ok {
		if InstanceId6, ok := v.(string); ok {
			args.Query.Set("InstanceId.6", InstanceId6)
		} else {
			return nil, errors.New("InstanceId.6 must be string")
		}
	}
	if v, ok := optional["InstanceId.7"]; ok {
		if InstanceId7, ok := v.(string); ok {
			args.Query.Set("InstanceId.7", InstanceId7)
		} else {
			return nil, errors.New("InstanceId.7 must be string")
		}
	}
	if v, ok := optional["InstanceId.8"]; ok {
		if InstanceId8, ok := v.(string); ok {
			args.Query.Set("InstanceId.8", InstanceId8)
		} else {
			return nil, errors.New("InstanceId.8 must be string")
		}
	}
	if v, ok := optional["InstanceId.9"]; ok {
		if InstanceId9, ok := v.(string); ok {
			args.Query.Set("InstanceId.9", InstanceId9)
		} else {
			return nil, errors.New("InstanceId.9 must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(DetachInstancesResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DetachInstancesResponse represents the response of the api DetachInstances.
type DetachInstancesResponse struct {
	ScalingActivityId string
}

// DisableScalingGroup version 2014-08-28
//
// required parameters:
//  name: ScalingGroupId, type: string
//
// optional parameters:
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) DisableScalingGroup(ScalingGroupId string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "DisableScalingGroup")
	args.Query.Set("ScalingGroupId", ScalingGroupId)
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// EnableScalingGroup version 2014-08-28
//
// required parameters:
//  name: ScalingGroupId, type: string
//
// optional parameters:
//  name: ActiveScalingConfigurationId, type: string
//  name: InstanceId.1, type: string
//  name: InstanceId.10, type: string
//  name: InstanceId.11, type: string
//  name: InstanceId.12, type: string
//  name: InstanceId.13, type: string
//  name: InstanceId.14, type: string
//  name: InstanceId.15, type: string
//  name: InstanceId.16, type: string
//  name: InstanceId.17, type: string
//  name: InstanceId.18, type: string
//  name: InstanceId.19, type: string
//  name: InstanceId.2, type: string
//  name: InstanceId.20, type: string
//  name: InstanceId.3, type: string
//  name: InstanceId.4, type: string
//  name: InstanceId.5, type: string
//  name: InstanceId.6, type: string
//  name: InstanceId.7, type: string
//  name: InstanceId.8, type: string
//  name: InstanceId.9, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) EnableScalingGroup(ScalingGroupId string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "EnableScalingGroup")
	args.Query.Set("ScalingGroupId", ScalingGroupId)
	if v, ok := optional["ActiveScalingConfigurationId"]; ok {
		if ActiveScalingConfigurationId, ok := v.(string); ok {
			args.Query.Set("ActiveScalingConfigurationId", ActiveScalingConfigurationId)
		} else {
			return nil, errors.New("ActiveScalingConfigurationId must be string")
		}
	}
	if v, ok := optional["InstanceId.1"]; ok {
		if InstanceId1, ok := v.(string); ok {
			args.Query.Set("InstanceId.1", InstanceId1)
		} else {
			return nil, errors.New("InstanceId.1 must be string")
		}
	}
	if v, ok := optional["InstanceId.10"]; ok {
		if InstanceId10, ok := v.(string); ok {
			args.Query.Set("InstanceId.10", InstanceId10)
		} else {
			return nil, errors.New("InstanceId.10 must be string")
		}
	}
	if v, ok := optional["InstanceId.11"]; ok {
		if InstanceId11, ok := v.(string); ok {
			args.Query.Set("InstanceId.11", InstanceId11)
		} else {
			return nil, errors.New("InstanceId.11 must be string")
		}
	}
	if v, ok := optional["InstanceId.12"]; ok {
		if InstanceId12, ok := v.(string); ok {
			args.Query.Set("InstanceId.12", InstanceId12)
		} else {
			return nil, errors.New("InstanceId.12 must be string")
		}
	}
	if v, ok := optional["InstanceId.13"]; ok {
		if InstanceId13, ok := v.(string); ok {
			args.Query.Set("InstanceId.13", InstanceId13)
		} else {
			return nil, errors.New("InstanceId.13 must be string")
		}
	}
	if v, ok := optional["InstanceId.14"]; ok {
		if InstanceId14, ok := v.(string); ok {
			args.Query.Set("InstanceId.14", InstanceId14)
		} else {
			return nil, errors.New("InstanceId.14 must be string")
		}
	}
	if v, ok := optional["InstanceId.15"]; ok {
		if InstanceId15, ok := v.(string); ok {
			args.Query.Set("InstanceId.15", InstanceId15)
		} else {
			return nil, errors.New("InstanceId.15 must be string")
		}
	}
	if v, ok := optional["InstanceId.16"]; ok {
		if InstanceId16, ok := v.(string); ok {
			args.Query.Set("InstanceId.16", InstanceId16)
		} else {
			return nil, errors.New("InstanceId.16 must be string")
		}
	}
	if v, ok := optional["InstanceId.17"]; ok {
		if InstanceId17, ok := v.(string); ok {
			args.Query.Set("InstanceId.17", InstanceId17)
		} else {
			return nil, errors.New("InstanceId.17 must be string")
		}
	}
	if v, ok := optional["InstanceId.18"]; ok {
		if InstanceId18, ok := v.(string); ok {
			args.Query.Set("InstanceId.18", InstanceId18)
		} else {
			return nil, errors.New("InstanceId.18 must be string")
		}
	}
	if v, ok := optional["InstanceId.19"]; ok {
		if InstanceId19, ok := v.(string); ok {
			args.Query.Set("InstanceId.19", InstanceId19)
		} else {
			return nil, errors.New("InstanceId.19 must be string")
		}
	}
	if v, ok := optional["InstanceId.2"]; ok {
		if InstanceId2, ok := v.(string); ok {
			args.Query.Set("InstanceId.2", InstanceId2)
		} else {
			return nil, errors.New("InstanceId.2 must be string")
		}
	}
	if v, ok := optional["InstanceId.20"]; ok {
		if InstanceId20, ok := v.(string); ok {
			args.Query.Set("InstanceId.20", InstanceId20)
		} else {
			return nil, errors.New("InstanceId.20 must be string")
		}
	}
	if v, ok := optional["InstanceId.3"]; ok {
		if InstanceId3, ok := v.(string); ok {
			args.Query.Set("InstanceId.3", InstanceId3)
		} else {
			return nil, errors.New("InstanceId.3 must be string")
		}
	}
	if v, ok := optional["InstanceId.4"]; ok {
		if InstanceId4, ok := v.(string); ok {
			args.Query.Set("InstanceId.4", InstanceId4)
		} else {
			return nil, errors.New("InstanceId.4 must be string")
		}
	}
	if v, ok := optional["InstanceId.5"]; ok {
		if InstanceId5, ok := v.(string); ok {
			args.Query.Set("InstanceId.5", InstanceId5)
		} else {
			return nil, errors.New("InstanceId.5 must be string")
		}
	}
	if v, ok := optional["InstanceId.6"]; ok {
		if InstanceId6, ok := v.(string); ok {
			args.Query.Set("InstanceId.6", InstanceId6)
		} else {
			return nil, errors.New("InstanceId.6 must be string")
		}
	}
	if v, ok := optional["InstanceId.7"]; ok {
		if InstanceId7, ok := v.(string); ok {
			args.Query.Set("InstanceId.7", InstanceId7)
		} else {
			return nil, errors.New("InstanceId.7 must be string")
		}
	}
	if v, ok := optional["InstanceId.8"]; ok {
		if InstanceId8, ok := v.(string); ok {
			args.Query.Set("InstanceId.8", InstanceId8)
		} else {
			return nil, errors.New("InstanceId.8 must be string")
		}
	}
	if v, ok := optional["InstanceId.9"]; ok {
		if InstanceId9, ok := v.(string); ok {
			args.Query.Set("InstanceId.9", InstanceId9)
		} else {
			return nil, errors.New("InstanceId.9 must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// ExecuteScalingRule version 2014-08-28
//
// required parameters:
//  name: ScalingRuleAri, type: string
//
// optional parameters:
//  name: ClientToken, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) ExecuteScalingRule(ScalingRuleAri string, optional openapi.M) (*ExecuteScalingRuleResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "ExecuteScalingRule")
	args.Query.Set("ScalingRuleAri", ScalingRuleAri)
	if v, ok := optional["ClientToken"]; ok {
		if ClientToken, ok := v.(string); ok {
			args.Query.Set("ClientToken", ClientToken)
		} else {
			return nil, errors.New("ClientToken must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(ExecuteScalingRuleResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// ExecuteScalingRuleResponse represents the response of the api ExecuteScalingRule.
type ExecuteScalingRuleResponse struct {
	ScalingActivityId string
}

// ModifyScalingGroup version 2014-08-28
//
// required parameters:
//  name: ScalingGroupId, type: string
//
// optional parameters:
//  name: ActiveScalingConfigurationId, type: string
//  name: DefaultCooldown, type: int, min value: 0, max value: 86400
//  name: MaxSize, type: int
//  name: MinSize, type: int
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: RemovalPolicy.1, type: string
//  name: RemovalPolicy.2, type: string
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: ScalingGroupName, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) ModifyScalingGroup(ScalingGroupId string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "ModifyScalingGroup")
	args.Query.Set("ScalingGroupId", ScalingGroupId)
	if v, ok := optional["ActiveScalingConfigurationId"]; ok {
		if ActiveScalingConfigurationId, ok := v.(string); ok {
			args.Query.Set("ActiveScalingConfigurationId", ActiveScalingConfigurationId)
		} else {
			return nil, errors.New("ActiveScalingConfigurationId must be string")
		}
	}
	if v, ok := optional["DefaultCooldown"]; ok {
		if DefaultCooldown, ok := v.(int); ok {
			if DefaultCooldown < 0 {
				return nil, errors.New("DefaultCooldown must be equal or greater than 0")
			}
			if DefaultCooldown > 86400 {
				return nil, errors.New("DefaultCooldown must be equal or less than 86400")
			}
			args.Query.Set("DefaultCooldown", fmt.Sprint(DefaultCooldown))
		} else {
			return nil, errors.New("DefaultCooldown must be int")
		}
	}
	if v, ok := optional["MaxSize"]; ok {
		if MaxSize, ok := v.(int); ok {
			args.Query.Set("MaxSize", fmt.Sprint(MaxSize))
		} else {
			return nil, errors.New("MaxSize must be int")
		}
	}
	if v, ok := optional["MinSize"]; ok {
		if MinSize, ok := v.(int); ok {
			args.Query.Set("MinSize", fmt.Sprint(MinSize))
		} else {
			return nil, errors.New("MinSize must be int")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["RemovalPolicy.1"]; ok {
		if RemovalPolicy1, ok := v.(string); ok {
			args.Query.Set("RemovalPolicy.1", RemovalPolicy1)
		} else {
			return nil, errors.New("RemovalPolicy.1 must be string")
		}
	}
	if v, ok := optional["RemovalPolicy.2"]; ok {
		if RemovalPolicy2, ok := v.(string); ok {
			args.Query.Set("RemovalPolicy.2", RemovalPolicy2)
		} else {
			return nil, errors.New("RemovalPolicy.2 must be string")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["ScalingGroupName"]; ok {
		if ScalingGroupName, ok := v.(string); ok {
			args.Query.Set("ScalingGroupName", ScalingGroupName)
		} else {
			return nil, errors.New("ScalingGroupName must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// ModifyScalingRule version 2014-08-28
//
// required parameters:
//  name: ScalingRuleId, type: string
//
// optional parameters:
//  name: AdjustmentType, type: string
//  name: AdjustmentValue, type: int
//  name: Cooldown, type: int
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: ScalingRuleName, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) ModifyScalingRule(ScalingRuleId string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "ModifyScalingRule")
	args.Query.Set("ScalingRuleId", ScalingRuleId)
	if v, ok := optional["AdjustmentType"]; ok {
		if AdjustmentType, ok := v.(string); ok {
			args.Query.Set("AdjustmentType", AdjustmentType)
		} else {
			return nil, errors.New("AdjustmentType must be string")
		}
	}
	if v, ok := optional["AdjustmentValue"]; ok {
		if AdjustmentValue, ok := v.(int); ok {
			args.Query.Set("AdjustmentValue", fmt.Sprint(AdjustmentValue))
		} else {
			return nil, errors.New("AdjustmentValue must be int")
		}
	}
	if v, ok := optional["Cooldown"]; ok {
		if Cooldown, ok := v.(int); ok {
			args.Query.Set("Cooldown", fmt.Sprint(Cooldown))
		} else {
			return nil, errors.New("Cooldown must be int")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["ScalingRuleName"]; ok {
		if ScalingRuleName, ok := v.(string); ok {
			args.Query.Set("ScalingRuleName", ScalingRuleName)
		} else {
			return nil, errors.New("ScalingRuleName must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// ModifyScheduledTask version 2014-08-28
//
// required parameters:
//  name: ScheduledTaskId, type: string
//
// optional parameters:
//  name: Description, type: string
//  name: LaunchExpirationTime, type: int, min value: 0, max value: 86400
//  name: LaunchTime, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: RecurrenceEndTime, type: string
//  name: RecurrenceType, type: string
//  name: RecurrenceValue, type: string
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: ScheduledAction, type: string
//  name: ScheduledTaskName, type: string
//  name: TaskEnabled, type: bool
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) ModifyScheduledTask(ScheduledTaskId string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "ModifyScheduledTask")
	args.Query.Set("ScheduledTaskId", ScheduledTaskId)
	if v, ok := optional["Description"]; ok {
		if Description, ok := v.(string); ok {
			args.Query.Set("Description", Description)
		} else {
			return nil, errors.New("Description must be string")
		}
	}
	if v, ok := optional["LaunchExpirationTime"]; ok {
		if LaunchExpirationTime, ok := v.(int); ok {
			if LaunchExpirationTime < 0 {
				return nil, errors.New("LaunchExpirationTime must be equal or greater than 0")
			}
			if LaunchExpirationTime > 86400 {
				return nil, errors.New("LaunchExpirationTime must be equal or less than 86400")
			}
			args.Query.Set("LaunchExpirationTime", fmt.Sprint(LaunchExpirationTime))
		} else {
			return nil, errors.New("LaunchExpirationTime must be int")
		}
	}
	if v, ok := optional["LaunchTime"]; ok {
		if LaunchTime, ok := v.(string); ok {
			args.Query.Set("LaunchTime", LaunchTime)
		} else {
			return nil, errors.New("LaunchTime must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["RecurrenceEndTime"]; ok {
		if RecurrenceEndTime, ok := v.(string); ok {
			args.Query.Set("RecurrenceEndTime", RecurrenceEndTime)
		} else {
			return nil, errors.New("RecurrenceEndTime must be string")
		}
	}
	if v, ok := optional["RecurrenceType"]; ok {
		if RecurrenceType, ok := v.(string); ok {
			args.Query.Set("RecurrenceType", RecurrenceType)
		} else {
			return nil, errors.New("RecurrenceType must be string")
		}
	}
	if v, ok := optional["RecurrenceValue"]; ok {
		if RecurrenceValue, ok := v.(string); ok {
			args.Query.Set("RecurrenceValue", RecurrenceValue)
		} else {
			return nil, errors.New("RecurrenceValue must be string")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["ScheduledAction"]; ok {
		if ScheduledAction, ok := v.(string); ok {
			args.Query.Set("ScheduledAction", ScheduledAction)
		} else {
			return nil, errors.New("ScheduledAction must be string")
		}
	}
	if v, ok := optional["ScheduledTaskName"]; ok {
		if ScheduledTaskName, ok := v.(string); ok {
			args.Query.Set("ScheduledTaskName", ScheduledTaskName)
		} else {
			return nil, errors.New("ScheduledTaskName must be string")
		}
	}
	if v, ok := optional["TaskEnabled"]; ok {
		if TaskEnabled, ok := v.(bool); ok {
			args.Query.Set("TaskEnabled", fmt.Sprint(TaskEnabled))
		} else {
			return nil, errors.New("TaskEnabled must be bool")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// RemoveInstances version 2014-08-28
//
// required parameters:
//  name: InstanceId.1, type: string
//  name: ScalingGroupId, type: string
//
// optional parameters:
//  name: InstanceId.10, type: string
//  name: InstanceId.11, type: string
//  name: InstanceId.12, type: string
//  name: InstanceId.13, type: string
//  name: InstanceId.14, type: string
//  name: InstanceId.15, type: string
//  name: InstanceId.16, type: string
//  name: InstanceId.17, type: string
//  name: InstanceId.18, type: string
//  name: InstanceId.19, type: string
//  name: InstanceId.2, type: string
//  name: InstanceId.20, type: string
//  name: InstanceId.3, type: string
//  name: InstanceId.4, type: string
//  name: InstanceId.5, type: string
//  name: InstanceId.6, type: string
//  name: InstanceId.7, type: string
//  name: InstanceId.8, type: string
//  name: InstanceId.9, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) RemoveInstances(InstanceId1, ScalingGroupId string, optional openapi.M) (*RemoveInstancesResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "RemoveInstances")
	args.Query.Set("InstanceId.1", InstanceId1)
	args.Query.Set("ScalingGroupId", ScalingGroupId)
	if v, ok := optional["InstanceId.10"]; ok {
		if InstanceId10, ok := v.(string); ok {
			args.Query.Set("InstanceId.10", InstanceId10)
		} else {
			return nil, errors.New("InstanceId.10 must be string")
		}
	}
	if v, ok := optional["InstanceId.11"]; ok {
		if InstanceId11, ok := v.(string); ok {
			args.Query.Set("InstanceId.11", InstanceId11)
		} else {
			return nil, errors.New("InstanceId.11 must be string")
		}
	}
	if v, ok := optional["InstanceId.12"]; ok {
		if InstanceId12, ok := v.(string); ok {
			args.Query.Set("InstanceId.12", InstanceId12)
		} else {
			return nil, errors.New("InstanceId.12 must be string")
		}
	}
	if v, ok := optional["InstanceId.13"]; ok {
		if InstanceId13, ok := v.(string); ok {
			args.Query.Set("InstanceId.13", InstanceId13)
		} else {
			return nil, errors.New("InstanceId.13 must be string")
		}
	}
	if v, ok := optional["InstanceId.14"]; ok {
		if InstanceId14, ok := v.(string); ok {
			args.Query.Set("InstanceId.14", InstanceId14)
		} else {
			return nil, errors.New("InstanceId.14 must be string")
		}
	}
	if v, ok := optional["InstanceId.15"]; ok {
		if InstanceId15, ok := v.(string); ok {
			args.Query.Set("InstanceId.15", InstanceId15)
		} else {
			return nil, errors.New("InstanceId.15 must be string")
		}
	}
	if v, ok := optional["InstanceId.16"]; ok {
		if InstanceId16, ok := v.(string); ok {
			args.Query.Set("InstanceId.16", InstanceId16)
		} else {
			return nil, errors.New("InstanceId.16 must be string")
		}
	}
	if v, ok := optional["InstanceId.17"]; ok {
		if InstanceId17, ok := v.(string); ok {
			args.Query.Set("InstanceId.17", InstanceId17)
		} else {
			return nil, errors.New("InstanceId.17 must be string")
		}
	}
	if v, ok := optional["InstanceId.18"]; ok {
		if InstanceId18, ok := v.(string); ok {
			args.Query.Set("InstanceId.18", InstanceId18)
		} else {
			return nil, errors.New("InstanceId.18 must be string")
		}
	}
	if v, ok := optional["InstanceId.19"]; ok {
		if InstanceId19, ok := v.(string); ok {
			args.Query.Set("InstanceId.19", InstanceId19)
		} else {
			return nil, errors.New("InstanceId.19 must be string")
		}
	}
	if v, ok := optional["InstanceId.2"]; ok {
		if InstanceId2, ok := v.(string); ok {
			args.Query.Set("InstanceId.2", InstanceId2)
		} else {
			return nil, errors.New("InstanceId.2 must be string")
		}
	}
	if v, ok := optional["InstanceId.20"]; ok {
		if InstanceId20, ok := v.(string); ok {
			args.Query.Set("InstanceId.20", InstanceId20)
		} else {
			return nil, errors.New("InstanceId.20 must be string")
		}
	}
	if v, ok := optional["InstanceId.3"]; ok {
		if InstanceId3, ok := v.(string); ok {
			args.Query.Set("InstanceId.3", InstanceId3)
		} else {
			return nil, errors.New("InstanceId.3 must be string")
		}
	}
	if v, ok := optional["InstanceId.4"]; ok {
		if InstanceId4, ok := v.(string); ok {
			args.Query.Set("InstanceId.4", InstanceId4)
		} else {
			return nil, errors.New("InstanceId.4 must be string")
		}
	}
	if v, ok := optional["InstanceId.5"]; ok {
		if InstanceId5, ok := v.(string); ok {
			args.Query.Set("InstanceId.5", InstanceId5)
		} else {
			return nil, errors.New("InstanceId.5 must be string")
		}
	}
	if v, ok := optional["InstanceId.6"]; ok {
		if InstanceId6, ok := v.(string); ok {
			args.Query.Set("InstanceId.6", InstanceId6)
		} else {
			return nil, errors.New("InstanceId.6 must be string")
		}
	}
	if v, ok := optional["InstanceId.7"]; ok {
		if InstanceId7, ok := v.(string); ok {
			args.Query.Set("InstanceId.7", InstanceId7)
		} else {
			return nil, errors.New("InstanceId.7 must be string")
		}
	}
	if v, ok := optional["InstanceId.8"]; ok {
		if InstanceId8, ok := v.(string); ok {
			args.Query.Set("InstanceId.8", InstanceId8)
		} else {
			return nil, errors.New("InstanceId.8 must be string")
		}
	}
	if v, ok := optional["InstanceId.9"]; ok {
		if InstanceId9, ok := v.(string); ok {
			args.Query.Set("InstanceId.9", InstanceId9)
		} else {
			return nil, errors.New("InstanceId.9 must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(RemoveInstancesResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// RemoveInstancesResponse represents the response of the api RemoveInstances.
type RemoveInstancesResponse struct {
	ScalingActivityId string
}
