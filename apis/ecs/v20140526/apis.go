// Copyright 2015 Chen Xianren. All rights reserved.
// Code generated by openapi-meta; DO NOT EDIT

package ecs

import (
	"errors"
	"fmt"

	"git.oschina.net/cxr29/aliyun-openapi-go-sdk"
)

var (
	_ = errors.New("")
	_ = fmt.Sprint("")
)

type API struct {
	openapi.Service
}

func New(accessKeyId, accessKeySecret string) API {
	return API{openapi.NewService(accessKeyId, accessKeySecret)}
}

func NewParams() openapi.Params {
	args := openapi.NewParams()
	args.Product = Product
	args.Style = Style
	args.Version = Version
	return args
}

const (
	Product = "Ecs"
	Style   = "RPC"
	Version = "2014-05-26"
)

// AddTags version 2014-05-26
//
// required parameters:
//  name: ResourceId, type: string
//  name: ResourceType, type: string
//  name: Tag.1.Key, type: string
//  name: Tag.1.Value, type: string
//
// optional parameters:
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: Tag.2.Key, type: string
//  name: Tag.2.Value, type: string
//  name: Tag.3.Key, type: string
//  name: Tag.3.Value, type: string
//  name: Tag.4.Key, type: string
//  name: Tag.4.Value, type: string
//  name: Tag.5.Key, type: string
//  name: Tag.5.Value, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) AddTags(ResourceId, ResourceType, Tag1Key, Tag1Value string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "AddTags")
	args.Query.Set("ResourceId", ResourceId)
	args.Query.Set("ResourceType", ResourceType)
	args.Query.Set("Tag.1.Key", Tag1Key)
	args.Query.Set("Tag.1.Value", Tag1Value)
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["Tag.2.Key"]; ok {
		if Tag2Key, ok := v.(string); ok {
			args.Query.Set("Tag.2.Key", Tag2Key)
		} else {
			return nil, errors.New("Tag.2.Key must be string")
		}
	}
	if v, ok := optional["Tag.2.Value"]; ok {
		if Tag2Value, ok := v.(string); ok {
			args.Query.Set("Tag.2.Value", Tag2Value)
		} else {
			return nil, errors.New("Tag.2.Value must be string")
		}
	}
	if v, ok := optional["Tag.3.Key"]; ok {
		if Tag3Key, ok := v.(string); ok {
			args.Query.Set("Tag.3.Key", Tag3Key)
		} else {
			return nil, errors.New("Tag.3.Key must be string")
		}
	}
	if v, ok := optional["Tag.3.Value"]; ok {
		if Tag3Value, ok := v.(string); ok {
			args.Query.Set("Tag.3.Value", Tag3Value)
		} else {
			return nil, errors.New("Tag.3.Value must be string")
		}
	}
	if v, ok := optional["Tag.4.Key"]; ok {
		if Tag4Key, ok := v.(string); ok {
			args.Query.Set("Tag.4.Key", Tag4Key)
		} else {
			return nil, errors.New("Tag.4.Key must be string")
		}
	}
	if v, ok := optional["Tag.4.Value"]; ok {
		if Tag4Value, ok := v.(string); ok {
			args.Query.Set("Tag.4.Value", Tag4Value)
		} else {
			return nil, errors.New("Tag.4.Value must be string")
		}
	}
	if v, ok := optional["Tag.5.Key"]; ok {
		if Tag5Key, ok := v.(string); ok {
			args.Query.Set("Tag.5.Key", Tag5Key)
		} else {
			return nil, errors.New("Tag.5.Key must be string")
		}
	}
	if v, ok := optional["Tag.5.Value"]; ok {
		if Tag5Value, ok := v.(string); ok {
			args.Query.Set("Tag.5.Value", Tag5Value)
		} else {
			return nil, errors.New("Tag.5.Value must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// AllocateEipAddress version 2014-05-26
//
// optional parameters:
//  name: Bandwidth, type: string
//  name: InternetChargeType, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) AllocateEipAddress(optional openapi.M) (*AllocateEipAddressResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "AllocateEipAddress")
	if v, ok := optional["Bandwidth"]; ok {
		if Bandwidth, ok := v.(string); ok {
			args.Query.Set("Bandwidth", Bandwidth)
		} else {
			return nil, errors.New("Bandwidth must be string")
		}
	}
	if v, ok := optional["InternetChargeType"]; ok {
		if InternetChargeType, ok := v.(string); ok {
			args.Query.Set("InternetChargeType", InternetChargeType)
		} else {
			return nil, errors.New("InternetChargeType must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(AllocateEipAddressResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// AllocateEipAddressResponse represents the response of the api AllocateEipAddress.
type AllocateEipAddressResponse struct {
	AllocationId string
	EipAddress   string
}

// AllocatePublicIpAddress version 2014-05-26
//
// required parameters:
//  name: InstanceId, type: string
//
// optional parameters:
//  name: IpAddress, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: VlanId, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) AllocatePublicIpAddress(InstanceId string, optional openapi.M) (*AllocatePublicIpAddressResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "AllocatePublicIpAddress")
	args.Query.Set("InstanceId", InstanceId)
	if v, ok := optional["IpAddress"]; ok {
		if IpAddress, ok := v.(string); ok {
			args.Query.Set("IpAddress", IpAddress)
		} else {
			return nil, errors.New("IpAddress must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["VlanId"]; ok {
		if VlanId, ok := v.(string); ok {
			args.Query.Set("VlanId", VlanId)
		} else {
			return nil, errors.New("VlanId must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(AllocatePublicIpAddressResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// AllocatePublicIpAddressResponse represents the response of the api AllocatePublicIpAddress.
type AllocatePublicIpAddressResponse struct {
	IpAddress string
}

// AssociateEipAddress version 2014-05-26
//
// required parameters:
//  name: AllocationId, type: string
//  name: InstanceId, type: string
//
// optional parameters:
//  name: InstanceType, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) AssociateEipAddress(AllocationId, InstanceId string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "AssociateEipAddress")
	args.Query.Set("AllocationId", AllocationId)
	args.Query.Set("InstanceId", InstanceId)
	if v, ok := optional["InstanceType"]; ok {
		if InstanceType, ok := v.(string); ok {
			args.Query.Set("InstanceType", InstanceType)
		} else {
			return nil, errors.New("InstanceType must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// AssociateHaVip version 2014-05-26
//
// required parameters:
//  name: HaVipId, type: string
//  name: InstanceId, type: string
//
// optional parameters:
//  name: ClientToken, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) AssociateHaVip(HaVipId, InstanceId string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "AssociateHaVip")
	args.Query.Set("HaVipId", HaVipId)
	args.Query.Set("InstanceId", InstanceId)
	if v, ok := optional["ClientToken"]; ok {
		if ClientToken, ok := v.(string); ok {
			args.Query.Set("ClientToken", ClientToken)
		} else {
			return nil, errors.New("ClientToken must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// AttachDisk version 2014-05-26
//
// required parameters:
//  name: DiskId, type: string
//  name: InstanceId, type: string
//
// optional parameters:
//  name: DeleteWithInstance, type: bool
//  name: Device, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) AttachDisk(DiskId, InstanceId string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "AttachDisk")
	args.Query.Set("DiskId", DiskId)
	args.Query.Set("InstanceId", InstanceId)
	if v, ok := optional["DeleteWithInstance"]; ok {
		if DeleteWithInstance, ok := v.(bool); ok {
			args.Query.Set("DeleteWithInstance", fmt.Sprint(DeleteWithInstance))
		} else {
			return nil, errors.New("DeleteWithInstance must be bool")
		}
	}
	if v, ok := optional["Device"]; ok {
		if Device, ok := v.(string); ok {
			args.Query.Set("Device", Device)
		} else {
			return nil, errors.New("Device must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// AuthorizeSecurityGroup version 2014-05-26
//
// required parameters:
//  name: IpProtocol, type: string
//  name: PortRange, type: string
//  name: SecurityGroupId, type: string
//
// optional parameters:
//  name: ClientToken, type: string
//  name: NicType, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: Policy, type: string
//  name: Priority, type: string
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: SourceCidrIp, type: string
//  name: SourceGroupId, type: string
//  name: SourceGroupOwnerAccount, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) AuthorizeSecurityGroup(IpProtocol, PortRange, SecurityGroupId string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "AuthorizeSecurityGroup")
	args.Query.Set("IpProtocol", IpProtocol)
	args.Query.Set("PortRange", PortRange)
	args.Query.Set("SecurityGroupId", SecurityGroupId)
	if v, ok := optional["ClientToken"]; ok {
		if ClientToken, ok := v.(string); ok {
			args.Query.Set("ClientToken", ClientToken)
		} else {
			return nil, errors.New("ClientToken must be string")
		}
	}
	if v, ok := optional["NicType"]; ok {
		if NicType, ok := v.(string); ok {
			args.Query.Set("NicType", NicType)
		} else {
			return nil, errors.New("NicType must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["Policy"]; ok {
		if Policy, ok := v.(string); ok {
			args.Query.Set("Policy", Policy)
		} else {
			return nil, errors.New("Policy must be string")
		}
	}
	if v, ok := optional["Priority"]; ok {
		if Priority, ok := v.(string); ok {
			args.Query.Set("Priority", Priority)
		} else {
			return nil, errors.New("Priority must be string")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["SourceCidrIp"]; ok {
		if SourceCidrIp, ok := v.(string); ok {
			args.Query.Set("SourceCidrIp", SourceCidrIp)
		} else {
			return nil, errors.New("SourceCidrIp must be string")
		}
	}
	if v, ok := optional["SourceGroupId"]; ok {
		if SourceGroupId, ok := v.(string); ok {
			args.Query.Set("SourceGroupId", SourceGroupId)
		} else {
			return nil, errors.New("SourceGroupId must be string")
		}
	}
	if v, ok := optional["SourceGroupOwnerAccount"]; ok {
		if SourceGroupOwnerAccount, ok := v.(string); ok {
			args.Query.Set("SourceGroupOwnerAccount", SourceGroupOwnerAccount)
		} else {
			return nil, errors.New("SourceGroupOwnerAccount must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// AuthorizeSecurityGroupEgress version 2014-05-26
//
// required parameters:
//  name: IpProtocol, type: string
//  name: PortRange, type: string
//  name: SecurityGroupId, type: string
//
// optional parameters:
//  name: ClientToken, type: string
//  name: DestCidrIp, type: string
//  name: DestGroupId, type: string
//  name: DestGroupOwnerAccount, type: string
//  name: NicType, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: Policy, type: string
//  name: Priority, type: string
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) AuthorizeSecurityGroupEgress(IpProtocol, PortRange, SecurityGroupId string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "AuthorizeSecurityGroupEgress")
	args.Query.Set("IpProtocol", IpProtocol)
	args.Query.Set("PortRange", PortRange)
	args.Query.Set("SecurityGroupId", SecurityGroupId)
	if v, ok := optional["ClientToken"]; ok {
		if ClientToken, ok := v.(string); ok {
			args.Query.Set("ClientToken", ClientToken)
		} else {
			return nil, errors.New("ClientToken must be string")
		}
	}
	if v, ok := optional["DestCidrIp"]; ok {
		if DestCidrIp, ok := v.(string); ok {
			args.Query.Set("DestCidrIp", DestCidrIp)
		} else {
			return nil, errors.New("DestCidrIp must be string")
		}
	}
	if v, ok := optional["DestGroupId"]; ok {
		if DestGroupId, ok := v.(string); ok {
			args.Query.Set("DestGroupId", DestGroupId)
		} else {
			return nil, errors.New("DestGroupId must be string")
		}
	}
	if v, ok := optional["DestGroupOwnerAccount"]; ok {
		if DestGroupOwnerAccount, ok := v.(string); ok {
			args.Query.Set("DestGroupOwnerAccount", DestGroupOwnerAccount)
		} else {
			return nil, errors.New("DestGroupOwnerAccount must be string")
		}
	}
	if v, ok := optional["NicType"]; ok {
		if NicType, ok := v.(string); ok {
			args.Query.Set("NicType", NicType)
		} else {
			return nil, errors.New("NicType must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["Policy"]; ok {
		if Policy, ok := v.(string); ok {
			args.Query.Set("Policy", Policy)
		} else {
			return nil, errors.New("Policy must be string")
		}
	}
	if v, ok := optional["Priority"]; ok {
		if Priority, ok := v.(string); ok {
			args.Query.Set("Priority", Priority)
		} else {
			return nil, errors.New("Priority must be string")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// CancelCopyImage version 2014-05-26
//
// required parameters:
//  name: ImageId, type: string
//
// optional parameters:
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) CancelCopyImage(ImageId string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "CancelCopyImage")
	args.Query.Set("ImageId", ImageId)
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// CheckAutoSnapshotPolicy version 2014-05-26
//
// optional parameters:
//  name: DataDiskPolicyEnabled, type: bool
//  name: DataDiskPolicyRetentionDays, type: int, min value: 1, max value: 3
//  name: DataDiskPolicyRetentionLastWeek, type: bool
//  name: DataDiskPolicyTimePeriod, type: int, min value: 1, max value: 4
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: SystemDiskPolicyEnabled, type: bool
//  name: SystemDiskPolicyRetentionDays, type: int, min value: 1, max value: 3
//  name: SystemDiskPolicyRetentionLastWeek, type: bool
//  name: SystemDiskPolicyTimePeriod, type: int, min value: 1, max value: 4
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) CheckAutoSnapshotPolicy(optional openapi.M) (*CheckAutoSnapshotPolicyResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "CheckAutoSnapshotPolicy")
	if v, ok := optional["DataDiskPolicyEnabled"]; ok {
		if DataDiskPolicyEnabled, ok := v.(bool); ok {
			args.Query.Set("DataDiskPolicyEnabled", fmt.Sprint(DataDiskPolicyEnabled))
		} else {
			return nil, errors.New("DataDiskPolicyEnabled must be bool")
		}
	}
	if v, ok := optional["DataDiskPolicyRetentionDays"]; ok {
		if DataDiskPolicyRetentionDays, ok := v.(int); ok {
			if DataDiskPolicyRetentionDays < 1 {
				return nil, errors.New("DataDiskPolicyRetentionDays must be equal or greater than 1")
			}
			if DataDiskPolicyRetentionDays > 3 {
				return nil, errors.New("DataDiskPolicyRetentionDays must be equal or less than 3")
			}
			args.Query.Set("DataDiskPolicyRetentionDays", fmt.Sprint(DataDiskPolicyRetentionDays))
		} else {
			return nil, errors.New("DataDiskPolicyRetentionDays must be int")
		}
	}
	if v, ok := optional["DataDiskPolicyRetentionLastWeek"]; ok {
		if DataDiskPolicyRetentionLastWeek, ok := v.(bool); ok {
			args.Query.Set("DataDiskPolicyRetentionLastWeek", fmt.Sprint(DataDiskPolicyRetentionLastWeek))
		} else {
			return nil, errors.New("DataDiskPolicyRetentionLastWeek must be bool")
		}
	}
	if v, ok := optional["DataDiskPolicyTimePeriod"]; ok {
		if DataDiskPolicyTimePeriod, ok := v.(int); ok {
			if DataDiskPolicyTimePeriod < 1 {
				return nil, errors.New("DataDiskPolicyTimePeriod must be equal or greater than 1")
			}
			if DataDiskPolicyTimePeriod > 4 {
				return nil, errors.New("DataDiskPolicyTimePeriod must be equal or less than 4")
			}
			args.Query.Set("DataDiskPolicyTimePeriod", fmt.Sprint(DataDiskPolicyTimePeriod))
		} else {
			return nil, errors.New("DataDiskPolicyTimePeriod must be int")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["SystemDiskPolicyEnabled"]; ok {
		if SystemDiskPolicyEnabled, ok := v.(bool); ok {
			args.Query.Set("SystemDiskPolicyEnabled", fmt.Sprint(SystemDiskPolicyEnabled))
		} else {
			return nil, errors.New("SystemDiskPolicyEnabled must be bool")
		}
	}
	if v, ok := optional["SystemDiskPolicyRetentionDays"]; ok {
		if SystemDiskPolicyRetentionDays, ok := v.(int); ok {
			if SystemDiskPolicyRetentionDays < 1 {
				return nil, errors.New("SystemDiskPolicyRetentionDays must be equal or greater than 1")
			}
			if SystemDiskPolicyRetentionDays > 3 {
				return nil, errors.New("SystemDiskPolicyRetentionDays must be equal or less than 3")
			}
			args.Query.Set("SystemDiskPolicyRetentionDays", fmt.Sprint(SystemDiskPolicyRetentionDays))
		} else {
			return nil, errors.New("SystemDiskPolicyRetentionDays must be int")
		}
	}
	if v, ok := optional["SystemDiskPolicyRetentionLastWeek"]; ok {
		if SystemDiskPolicyRetentionLastWeek, ok := v.(bool); ok {
			args.Query.Set("SystemDiskPolicyRetentionLastWeek", fmt.Sprint(SystemDiskPolicyRetentionLastWeek))
		} else {
			return nil, errors.New("SystemDiskPolicyRetentionLastWeek must be bool")
		}
	}
	if v, ok := optional["SystemDiskPolicyTimePeriod"]; ok {
		if SystemDiskPolicyTimePeriod, ok := v.(int); ok {
			if SystemDiskPolicyTimePeriod < 1 {
				return nil, errors.New("SystemDiskPolicyTimePeriod must be equal or greater than 1")
			}
			if SystemDiskPolicyTimePeriod > 4 {
				return nil, errors.New("SystemDiskPolicyTimePeriod must be equal or less than 4")
			}
			args.Query.Set("SystemDiskPolicyTimePeriod", fmt.Sprint(SystemDiskPolicyTimePeriod))
		} else {
			return nil, errors.New("SystemDiskPolicyTimePeriod must be int")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(CheckAutoSnapshotPolicyResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// CheckAutoSnapshotPolicyResponse represents the response of the api CheckAutoSnapshotPolicy.
type CheckAutoSnapshotPolicyResponse struct {
	AutoSnapshotOccupation int
	IsPermittedModify      string
}

// CheckDiskEnableAutoSnapshotValidation version 2014-05-26
//
// required parameters:
//  name: DiskIds, type: string
//
// optional parameters:
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) CheckDiskEnableAutoSnapshotValidation(DiskIds string, optional openapi.M) (*CheckDiskEnableAutoSnapshotValidationResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "CheckDiskEnableAutoSnapshotValidation")
	args.Query.Set("DiskIds", DiskIds)
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(CheckDiskEnableAutoSnapshotValidationResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// CheckDiskEnableAutoSnapshotValidationResponse represents the response of the api CheckDiskEnableAutoSnapshotValidation.
type CheckDiskEnableAutoSnapshotValidationResponse struct {
	AutoSnapshotOccupation int
	IsPermitted            string
}

// CopyImage version 2014-05-26
//
// required parameters:
//  name: DestinationDescription, type: string
//  name: DestinationImageName, type: string
//  name: DestinationRegionId, type: string
//  name: ImageId, type: string
//
// optional parameters:
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) CopyImage(DestinationDescription, DestinationImageName, DestinationRegionId, ImageId string, optional openapi.M) (*CopyImageResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "CopyImage")
	args.Query.Set("DestinationDescription", DestinationDescription)
	args.Query.Set("DestinationImageName", DestinationImageName)
	args.Query.Set("DestinationRegionId", DestinationRegionId)
	args.Query.Set("ImageId", ImageId)
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(CopyImageResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// CopyImageResponse represents the response of the api CopyImage.
type CopyImageResponse struct {
	ImageId string
}

// CreateDisk version 2014-05-26
//
// required parameters:
//  name: ZoneId, type: string
//
// optional parameters:
//  name: ClientToken, type: string
//  name: Description, type: string
//  name: DiskCategory, type: string
//  name: DiskName, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: Size, type: int, min value: 5, max value: 2048
//  name: SnapshotId, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) CreateDisk(ZoneId string, optional openapi.M) (*CreateDiskResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "CreateDisk")
	args.Query.Set("ZoneId", ZoneId)
	if v, ok := optional["ClientToken"]; ok {
		if ClientToken, ok := v.(string); ok {
			args.Query.Set("ClientToken", ClientToken)
		} else {
			return nil, errors.New("ClientToken must be string")
		}
	}
	if v, ok := optional["Description"]; ok {
		if Description, ok := v.(string); ok {
			args.Query.Set("Description", Description)
		} else {
			return nil, errors.New("Description must be string")
		}
	}
	if v, ok := optional["DiskCategory"]; ok {
		if DiskCategory, ok := v.(string); ok {
			args.Query.Set("DiskCategory", DiskCategory)
		} else {
			return nil, errors.New("DiskCategory must be string")
		}
	}
	if v, ok := optional["DiskName"]; ok {
		if DiskName, ok := v.(string); ok {
			args.Query.Set("DiskName", DiskName)
		} else {
			return nil, errors.New("DiskName must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["Size"]; ok {
		if Size, ok := v.(int); ok {
			if Size < 5 {
				return nil, errors.New("Size must be equal or greater than 5")
			}
			if Size > 2048 {
				return nil, errors.New("Size must be equal or less than 2048")
			}
			args.Query.Set("Size", fmt.Sprint(Size))
		} else {
			return nil, errors.New("Size must be int")
		}
	}
	if v, ok := optional["SnapshotId"]; ok {
		if SnapshotId, ok := v.(string); ok {
			args.Query.Set("SnapshotId", SnapshotId)
		} else {
			return nil, errors.New("SnapshotId must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(CreateDiskResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// CreateDiskResponse represents the response of the api CreateDisk.
type CreateDiskResponse struct {
	DiskId string
}

// CreateHaVip version 2014-05-26
//
// required parameters:
//  name: VSwitchId, type: string
//
// optional parameters:
//  name: ClientToken, type: string
//  name: Description, type: string
//  name: IpAddress, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) CreateHaVip(VSwitchId string, optional openapi.M) (*CreateHaVipResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "CreateHaVip")
	args.Query.Set("VSwitchId", VSwitchId)
	if v, ok := optional["ClientToken"]; ok {
		if ClientToken, ok := v.(string); ok {
			args.Query.Set("ClientToken", ClientToken)
		} else {
			return nil, errors.New("ClientToken must be string")
		}
	}
	if v, ok := optional["Description"]; ok {
		if Description, ok := v.(string); ok {
			args.Query.Set("Description", Description)
		} else {
			return nil, errors.New("Description must be string")
		}
	}
	if v, ok := optional["IpAddress"]; ok {
		if IpAddress, ok := v.(string); ok {
			args.Query.Set("IpAddress", IpAddress)
		} else {
			return nil, errors.New("IpAddress must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(CreateHaVipResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// CreateHaVipResponse represents the response of the api CreateHaVip.
type CreateHaVipResponse struct {
	HaVipId string
}

// CreateImage version 2014-05-26
//
// required parameters:
//  name: SnapshotId, type: string
//
// optional parameters:
//  name: ClientToken, type: string
//  name: Description, type: string
//  name: ImageName, type: string
//  name: ImageVersion, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) CreateImage(SnapshotId string, optional openapi.M) (*CreateImageResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "CreateImage")
	args.Query.Set("SnapshotId", SnapshotId)
	if v, ok := optional["ClientToken"]; ok {
		if ClientToken, ok := v.(string); ok {
			args.Query.Set("ClientToken", ClientToken)
		} else {
			return nil, errors.New("ClientToken must be string")
		}
	}
	if v, ok := optional["Description"]; ok {
		if Description, ok := v.(string); ok {
			args.Query.Set("Description", Description)
		} else {
			return nil, errors.New("Description must be string")
		}
	}
	if v, ok := optional["ImageName"]; ok {
		if ImageName, ok := v.(string); ok {
			args.Query.Set("ImageName", ImageName)
		} else {
			return nil, errors.New("ImageName must be string")
		}
	}
	if v, ok := optional["ImageVersion"]; ok {
		if ImageVersion, ok := v.(string); ok {
			args.Query.Set("ImageVersion", ImageVersion)
		} else {
			return nil, errors.New("ImageVersion must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(CreateImageResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// CreateImageResponse represents the response of the api CreateImage.
type CreateImageResponse struct {
	ImageId string
}

// CreateInstance version 2014-05-26
//
// required parameters:
//  name: ImageId, type: string
//  name: InstanceType, type: string
//  name: SecurityGroupId, type: string
//
// optional parameters:
//  name: ClientToken, type: string
//  name: ClusterId, type: string
//  name: DataDisk.1.Category, type: string
//  name: DataDisk.1.DeleteWithInstance, type: bool
//  name: DataDisk.1.Description, type: string
//  name: DataDisk.1.Device, type: string
//  name: DataDisk.1.DiskName, type: string
//  name: DataDisk.1.Size, type: int
//  name: DataDisk.1.SnapshotId, type: string
//  name: DataDisk.2.Category, type: string
//  name: DataDisk.2.DeleteWithInstance, type: bool
//  name: DataDisk.2.Description, type: string
//  name: DataDisk.2.Device, type: string
//  name: DataDisk.2.DiskName, type: string
//  name: DataDisk.2.Size, type: int
//  name: DataDisk.2.SnapshotId, type: string
//  name: DataDisk.3.Category, type: string
//  name: DataDisk.3.DeleteWithInstance, type: bool
//  name: DataDisk.3.Description, type: string
//  name: DataDisk.3.Device, type: string
//  name: DataDisk.3.DiskName, type: string
//  name: DataDisk.3.Size, type: int
//  name: DataDisk.3.SnapshotId, type: string
//  name: DataDisk.4.Category, type: string
//  name: DataDisk.4.DeleteWithInstance, type: bool
//  name: DataDisk.4.Description, type: string
//  name: DataDisk.4.Device, type: string
//  name: DataDisk.4.DiskName, type: string
//  name: DataDisk.4.Size, type: int
//  name: DataDisk.4.SnapshotId, type: string
//  name: Description, type: string
//  name: HostName, type: string
//  name: InnerIpAddress, type: string
//  name: InstanceChargeType, type: string
//  name: InstanceName, type: string
//  name: InternetChargeType, type: string
//  name: InternetMaxBandwidthIn, type: int, min value: 1, max value: 200
//  name: InternetMaxBandwidthOut, type: int
//  name: IoOptimized, type: string
//  name: NodeControllerId, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: Password, type: string
//  name: Period, type: int
//  name: PrivateIpAddress, type: string
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: SystemDisk.Category, type: string
//  name: SystemDisk.Description, type: string
//  name: SystemDisk.DiskName, type: string
//  name: UseAdditionalService, type: bool
//  name: VSwitchId, type: string
//  name: VlanId, type: string
//  name: ZoneId, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) CreateInstance(ImageId, InstanceType, SecurityGroupId string, optional openapi.M) (*CreateInstanceResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "CreateInstance")
	args.Query.Set("ImageId", ImageId)
	args.Query.Set("InstanceType", InstanceType)
	args.Query.Set("SecurityGroupId", SecurityGroupId)
	if v, ok := optional["ClientToken"]; ok {
		if ClientToken, ok := v.(string); ok {
			args.Query.Set("ClientToken", ClientToken)
		} else {
			return nil, errors.New("ClientToken must be string")
		}
	}
	if v, ok := optional["ClusterId"]; ok {
		if ClusterId, ok := v.(string); ok {
			args.Query.Set("ClusterId", ClusterId)
		} else {
			return nil, errors.New("ClusterId must be string")
		}
	}
	if v, ok := optional["DataDisk.1.Category"]; ok {
		if DataDisk1Category, ok := v.(string); ok {
			args.Query.Set("DataDisk.1.Category", DataDisk1Category)
		} else {
			return nil, errors.New("DataDisk.1.Category must be string")
		}
	}
	if v, ok := optional["DataDisk.1.DeleteWithInstance"]; ok {
		if DataDisk1DeleteWithInstance, ok := v.(bool); ok {
			args.Query.Set("DataDisk.1.DeleteWithInstance", fmt.Sprint(DataDisk1DeleteWithInstance))
		} else {
			return nil, errors.New("DataDisk.1.DeleteWithInstance must be bool")
		}
	}
	if v, ok := optional["DataDisk.1.Description"]; ok {
		if DataDisk1Description, ok := v.(string); ok {
			args.Query.Set("DataDisk.1.Description", DataDisk1Description)
		} else {
			return nil, errors.New("DataDisk.1.Description must be string")
		}
	}
	if v, ok := optional["DataDisk.1.Device"]; ok {
		if DataDisk1Device, ok := v.(string); ok {
			args.Query.Set("DataDisk.1.Device", DataDisk1Device)
		} else {
			return nil, errors.New("DataDisk.1.Device must be string")
		}
	}
	if v, ok := optional["DataDisk.1.DiskName"]; ok {
		if DataDisk1DiskName, ok := v.(string); ok {
			args.Query.Set("DataDisk.1.DiskName", DataDisk1DiskName)
		} else {
			return nil, errors.New("DataDisk.1.DiskName must be string")
		}
	}
	if v, ok := optional["DataDisk.1.Size"]; ok {
		if DataDisk1Size, ok := v.(int); ok {
			args.Query.Set("DataDisk.1.Size", fmt.Sprint(DataDisk1Size))
		} else {
			return nil, errors.New("DataDisk.1.Size must be int")
		}
	}
	if v, ok := optional["DataDisk.1.SnapshotId"]; ok {
		if DataDisk1SnapshotId, ok := v.(string); ok {
			args.Query.Set("DataDisk.1.SnapshotId", DataDisk1SnapshotId)
		} else {
			return nil, errors.New("DataDisk.1.SnapshotId must be string")
		}
	}
	if v, ok := optional["DataDisk.2.Category"]; ok {
		if DataDisk2Category, ok := v.(string); ok {
			args.Query.Set("DataDisk.2.Category", DataDisk2Category)
		} else {
			return nil, errors.New("DataDisk.2.Category must be string")
		}
	}
	if v, ok := optional["DataDisk.2.DeleteWithInstance"]; ok {
		if DataDisk2DeleteWithInstance, ok := v.(bool); ok {
			args.Query.Set("DataDisk.2.DeleteWithInstance", fmt.Sprint(DataDisk2DeleteWithInstance))
		} else {
			return nil, errors.New("DataDisk.2.DeleteWithInstance must be bool")
		}
	}
	if v, ok := optional["DataDisk.2.Description"]; ok {
		if DataDisk2Description, ok := v.(string); ok {
			args.Query.Set("DataDisk.2.Description", DataDisk2Description)
		} else {
			return nil, errors.New("DataDisk.2.Description must be string")
		}
	}
	if v, ok := optional["DataDisk.2.Device"]; ok {
		if DataDisk2Device, ok := v.(string); ok {
			args.Query.Set("DataDisk.2.Device", DataDisk2Device)
		} else {
			return nil, errors.New("DataDisk.2.Device must be string")
		}
	}
	if v, ok := optional["DataDisk.2.DiskName"]; ok {
		if DataDisk2DiskName, ok := v.(string); ok {
			args.Query.Set("DataDisk.2.DiskName", DataDisk2DiskName)
		} else {
			return nil, errors.New("DataDisk.2.DiskName must be string")
		}
	}
	if v, ok := optional["DataDisk.2.Size"]; ok {
		if DataDisk2Size, ok := v.(int); ok {
			args.Query.Set("DataDisk.2.Size", fmt.Sprint(DataDisk2Size))
		} else {
			return nil, errors.New("DataDisk.2.Size must be int")
		}
	}
	if v, ok := optional["DataDisk.2.SnapshotId"]; ok {
		if DataDisk2SnapshotId, ok := v.(string); ok {
			args.Query.Set("DataDisk.2.SnapshotId", DataDisk2SnapshotId)
		} else {
			return nil, errors.New("DataDisk.2.SnapshotId must be string")
		}
	}
	if v, ok := optional["DataDisk.3.Category"]; ok {
		if DataDisk3Category, ok := v.(string); ok {
			args.Query.Set("DataDisk.3.Category", DataDisk3Category)
		} else {
			return nil, errors.New("DataDisk.3.Category must be string")
		}
	}
	if v, ok := optional["DataDisk.3.DeleteWithInstance"]; ok {
		if DataDisk3DeleteWithInstance, ok := v.(bool); ok {
			args.Query.Set("DataDisk.3.DeleteWithInstance", fmt.Sprint(DataDisk3DeleteWithInstance))
		} else {
			return nil, errors.New("DataDisk.3.DeleteWithInstance must be bool")
		}
	}
	if v, ok := optional["DataDisk.3.Description"]; ok {
		if DataDisk3Description, ok := v.(string); ok {
			args.Query.Set("DataDisk.3.Description", DataDisk3Description)
		} else {
			return nil, errors.New("DataDisk.3.Description must be string")
		}
	}
	if v, ok := optional["DataDisk.3.Device"]; ok {
		if DataDisk3Device, ok := v.(string); ok {
			args.Query.Set("DataDisk.3.Device", DataDisk3Device)
		} else {
			return nil, errors.New("DataDisk.3.Device must be string")
		}
	}
	if v, ok := optional["DataDisk.3.DiskName"]; ok {
		if DataDisk3DiskName, ok := v.(string); ok {
			args.Query.Set("DataDisk.3.DiskName", DataDisk3DiskName)
		} else {
			return nil, errors.New("DataDisk.3.DiskName must be string")
		}
	}
	if v, ok := optional["DataDisk.3.Size"]; ok {
		if DataDisk3Size, ok := v.(int); ok {
			args.Query.Set("DataDisk.3.Size", fmt.Sprint(DataDisk3Size))
		} else {
			return nil, errors.New("DataDisk.3.Size must be int")
		}
	}
	if v, ok := optional["DataDisk.3.SnapshotId"]; ok {
		if DataDisk3SnapshotId, ok := v.(string); ok {
			args.Query.Set("DataDisk.3.SnapshotId", DataDisk3SnapshotId)
		} else {
			return nil, errors.New("DataDisk.3.SnapshotId must be string")
		}
	}
	if v, ok := optional["DataDisk.4.Category"]; ok {
		if DataDisk4Category, ok := v.(string); ok {
			args.Query.Set("DataDisk.4.Category", DataDisk4Category)
		} else {
			return nil, errors.New("DataDisk.4.Category must be string")
		}
	}
	if v, ok := optional["DataDisk.4.DeleteWithInstance"]; ok {
		if DataDisk4DeleteWithInstance, ok := v.(bool); ok {
			args.Query.Set("DataDisk.4.DeleteWithInstance", fmt.Sprint(DataDisk4DeleteWithInstance))
		} else {
			return nil, errors.New("DataDisk.4.DeleteWithInstance must be bool")
		}
	}
	if v, ok := optional["DataDisk.4.Description"]; ok {
		if DataDisk4Description, ok := v.(string); ok {
			args.Query.Set("DataDisk.4.Description", DataDisk4Description)
		} else {
			return nil, errors.New("DataDisk.4.Description must be string")
		}
	}
	if v, ok := optional["DataDisk.4.Device"]; ok {
		if DataDisk4Device, ok := v.(string); ok {
			args.Query.Set("DataDisk.4.Device", DataDisk4Device)
		} else {
			return nil, errors.New("DataDisk.4.Device must be string")
		}
	}
	if v, ok := optional["DataDisk.4.DiskName"]; ok {
		if DataDisk4DiskName, ok := v.(string); ok {
			args.Query.Set("DataDisk.4.DiskName", DataDisk4DiskName)
		} else {
			return nil, errors.New("DataDisk.4.DiskName must be string")
		}
	}
	if v, ok := optional["DataDisk.4.Size"]; ok {
		if DataDisk4Size, ok := v.(int); ok {
			args.Query.Set("DataDisk.4.Size", fmt.Sprint(DataDisk4Size))
		} else {
			return nil, errors.New("DataDisk.4.Size must be int")
		}
	}
	if v, ok := optional["DataDisk.4.SnapshotId"]; ok {
		if DataDisk4SnapshotId, ok := v.(string); ok {
			args.Query.Set("DataDisk.4.SnapshotId", DataDisk4SnapshotId)
		} else {
			return nil, errors.New("DataDisk.4.SnapshotId must be string")
		}
	}
	if v, ok := optional["Description"]; ok {
		if Description, ok := v.(string); ok {
			args.Query.Set("Description", Description)
		} else {
			return nil, errors.New("Description must be string")
		}
	}
	if v, ok := optional["HostName"]; ok {
		if HostName, ok := v.(string); ok {
			args.Query.Set("HostName", HostName)
		} else {
			return nil, errors.New("HostName must be string")
		}
	}
	if v, ok := optional["InnerIpAddress"]; ok {
		if InnerIpAddress, ok := v.(string); ok {
			args.Query.Set("InnerIpAddress", InnerIpAddress)
		} else {
			return nil, errors.New("InnerIpAddress must be string")
		}
	}
	if v, ok := optional["InstanceChargeType"]; ok {
		if InstanceChargeType, ok := v.(string); ok {
			args.Query.Set("InstanceChargeType", InstanceChargeType)
		} else {
			return nil, errors.New("InstanceChargeType must be string")
		}
	}
	if v, ok := optional["InstanceName"]; ok {
		if InstanceName, ok := v.(string); ok {
			args.Query.Set("InstanceName", InstanceName)
		} else {
			return nil, errors.New("InstanceName must be string")
		}
	}
	if v, ok := optional["InternetChargeType"]; ok {
		if InternetChargeType, ok := v.(string); ok {
			args.Query.Set("InternetChargeType", InternetChargeType)
		} else {
			return nil, errors.New("InternetChargeType must be string")
		}
	}
	if v, ok := optional["InternetMaxBandwidthIn"]; ok {
		if InternetMaxBandwidthIn, ok := v.(int); ok {
			if InternetMaxBandwidthIn < 1 {
				return nil, errors.New("InternetMaxBandwidthIn must be equal or greater than 1")
			}
			if InternetMaxBandwidthIn > 200 {
				return nil, errors.New("InternetMaxBandwidthIn must be equal or less than 200")
			}
			args.Query.Set("InternetMaxBandwidthIn", fmt.Sprint(InternetMaxBandwidthIn))
		} else {
			return nil, errors.New("InternetMaxBandwidthIn must be int")
		}
	}
	if v, ok := optional["InternetMaxBandwidthOut"]; ok {
		if InternetMaxBandwidthOut, ok := v.(int); ok {
			args.Query.Set("InternetMaxBandwidthOut", fmt.Sprint(InternetMaxBandwidthOut))
		} else {
			return nil, errors.New("InternetMaxBandwidthOut must be int")
		}
	}
	if v, ok := optional["IoOptimized"]; ok {
		if IoOptimized, ok := v.(string); ok {
			args.Query.Set("IoOptimized", IoOptimized)
		} else {
			return nil, errors.New("IoOptimized must be string")
		}
	}
	if v, ok := optional["NodeControllerId"]; ok {
		if NodeControllerId, ok := v.(string); ok {
			args.Query.Set("NodeControllerId", NodeControllerId)
		} else {
			return nil, errors.New("NodeControllerId must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["Password"]; ok {
		if Password, ok := v.(string); ok {
			args.Query.Set("Password", Password)
		} else {
			return nil, errors.New("Password must be string")
		}
	}
	if v, ok := optional["Period"]; ok {
		if Period, ok := v.(int); ok {
			args.Query.Set("Period", fmt.Sprint(Period))
		} else {
			return nil, errors.New("Period must be int")
		}
	}
	if v, ok := optional["PrivateIpAddress"]; ok {
		if PrivateIpAddress, ok := v.(string); ok {
			args.Query.Set("PrivateIpAddress", PrivateIpAddress)
		} else {
			return nil, errors.New("PrivateIpAddress must be string")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["SystemDisk.Category"]; ok {
		if SystemDiskCategory, ok := v.(string); ok {
			args.Query.Set("SystemDisk.Category", SystemDiskCategory)
		} else {
			return nil, errors.New("SystemDisk.Category must be string")
		}
	}
	if v, ok := optional["SystemDisk.Description"]; ok {
		if SystemDiskDescription, ok := v.(string); ok {
			args.Query.Set("SystemDisk.Description", SystemDiskDescription)
		} else {
			return nil, errors.New("SystemDisk.Description must be string")
		}
	}
	if v, ok := optional["SystemDisk.DiskName"]; ok {
		if SystemDiskDiskName, ok := v.(string); ok {
			args.Query.Set("SystemDisk.DiskName", SystemDiskDiskName)
		} else {
			return nil, errors.New("SystemDisk.DiskName must be string")
		}
	}
	if v, ok := optional["UseAdditionalService"]; ok {
		if UseAdditionalService, ok := v.(bool); ok {
			args.Query.Set("UseAdditionalService", fmt.Sprint(UseAdditionalService))
		} else {
			return nil, errors.New("UseAdditionalService must be bool")
		}
	}
	if v, ok := optional["VSwitchId"]; ok {
		if VSwitchId, ok := v.(string); ok {
			args.Query.Set("VSwitchId", VSwitchId)
		} else {
			return nil, errors.New("VSwitchId must be string")
		}
	}
	if v, ok := optional["VlanId"]; ok {
		if VlanId, ok := v.(string); ok {
			args.Query.Set("VlanId", VlanId)
		} else {
			return nil, errors.New("VlanId must be string")
		}
	}
	if v, ok := optional["ZoneId"]; ok {
		if ZoneId, ok := v.(string); ok {
			args.Query.Set("ZoneId", ZoneId)
		} else {
			return nil, errors.New("ZoneId must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(CreateInstanceResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// CreateInstanceResponse represents the response of the api CreateInstance.
type CreateInstanceResponse struct {
	InstanceId string
}

// CreateRouteEntry version 2014-05-26
//
// required parameters:
//  name: DestinationCidrBlock, type: string
//  name: NextHopId, type: string
//  name: RouteTableId, type: string
//
// optional parameters:
//  name: ClientToken, type: string
//  name: NextHopType, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) CreateRouteEntry(DestinationCidrBlock, NextHopId, RouteTableId string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "CreateRouteEntry")
	args.Query.Set("DestinationCidrBlock", DestinationCidrBlock)
	args.Query.Set("NextHopId", NextHopId)
	args.Query.Set("RouteTableId", RouteTableId)
	if v, ok := optional["ClientToken"]; ok {
		if ClientToken, ok := v.(string); ok {
			args.Query.Set("ClientToken", ClientToken)
		} else {
			return nil, errors.New("ClientToken must be string")
		}
	}
	if v, ok := optional["NextHopType"]; ok {
		if NextHopType, ok := v.(string); ok {
			args.Query.Set("NextHopType", NextHopType)
		} else {
			return nil, errors.New("NextHopType must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// CreateSecurityGroup version 2014-05-26
//
// optional parameters:
//  name: ClientToken, type: string
//  name: Description, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: SecurityGroupName, type: string
//  name: VpcId, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) CreateSecurityGroup(optional openapi.M) (*CreateSecurityGroupResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "CreateSecurityGroup")
	if v, ok := optional["ClientToken"]; ok {
		if ClientToken, ok := v.(string); ok {
			args.Query.Set("ClientToken", ClientToken)
		} else {
			return nil, errors.New("ClientToken must be string")
		}
	}
	if v, ok := optional["Description"]; ok {
		if Description, ok := v.(string); ok {
			args.Query.Set("Description", Description)
		} else {
			return nil, errors.New("Description must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["SecurityGroupName"]; ok {
		if SecurityGroupName, ok := v.(string); ok {
			args.Query.Set("SecurityGroupName", SecurityGroupName)
		} else {
			return nil, errors.New("SecurityGroupName must be string")
		}
	}
	if v, ok := optional["VpcId"]; ok {
		if VpcId, ok := v.(string); ok {
			args.Query.Set("VpcId", VpcId)
		} else {
			return nil, errors.New("VpcId must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(CreateSecurityGroupResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// CreateSecurityGroupResponse represents the response of the api CreateSecurityGroup.
type CreateSecurityGroupResponse struct {
	SecurityGroupId string
}

// CreateSnapshot version 2014-05-26
//
// required parameters:
//  name: DiskId, type: string
//
// optional parameters:
//  name: ClientToken, type: string
//  name: Description, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: SnapshotName, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) CreateSnapshot(DiskId string, optional openapi.M) (*CreateSnapshotResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "CreateSnapshot")
	args.Query.Set("DiskId", DiskId)
	if v, ok := optional["ClientToken"]; ok {
		if ClientToken, ok := v.(string); ok {
			args.Query.Set("ClientToken", ClientToken)
		} else {
			return nil, errors.New("ClientToken must be string")
		}
	}
	if v, ok := optional["Description"]; ok {
		if Description, ok := v.(string); ok {
			args.Query.Set("Description", Description)
		} else {
			return nil, errors.New("Description must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["SnapshotName"]; ok {
		if SnapshotName, ok := v.(string); ok {
			args.Query.Set("SnapshotName", SnapshotName)
		} else {
			return nil, errors.New("SnapshotName must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(CreateSnapshotResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// CreateSnapshotResponse represents the response of the api CreateSnapshot.
type CreateSnapshotResponse struct {
	SnapshotId string
}

// CreateVSwitch version 2014-05-26
//
// required parameters:
//  name: CidrBlock, type: string
//  name: VpcId, type: string
//  name: ZoneId, type: string
//
// optional parameters:
//  name: ClientToken, type: string
//  name: Description, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: VSwitchName, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) CreateVSwitch(CidrBlock, VpcId, ZoneId string, optional openapi.M) (*CreateVSwitchResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "CreateVSwitch")
	args.Query.Set("CidrBlock", CidrBlock)
	args.Query.Set("VpcId", VpcId)
	args.Query.Set("ZoneId", ZoneId)
	if v, ok := optional["ClientToken"]; ok {
		if ClientToken, ok := v.(string); ok {
			args.Query.Set("ClientToken", ClientToken)
		} else {
			return nil, errors.New("ClientToken must be string")
		}
	}
	if v, ok := optional["Description"]; ok {
		if Description, ok := v.(string); ok {
			args.Query.Set("Description", Description)
		} else {
			return nil, errors.New("Description must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["VSwitchName"]; ok {
		if VSwitchName, ok := v.(string); ok {
			args.Query.Set("VSwitchName", VSwitchName)
		} else {
			return nil, errors.New("VSwitchName must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(CreateVSwitchResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// CreateVSwitchResponse represents the response of the api CreateVSwitch.
type CreateVSwitchResponse struct {
	VSwitchId string
}

// CreateVpc version 2014-05-26
//
// optional parameters:
//  name: CidrBlock, type: string
//  name: ClientToken, type: string
//  name: Description, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: UserCidr, type: string
//  name: VpcName, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) CreateVpc(optional openapi.M) (*CreateVpcResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "CreateVpc")
	if v, ok := optional["CidrBlock"]; ok {
		if CidrBlock, ok := v.(string); ok {
			args.Query.Set("CidrBlock", CidrBlock)
		} else {
			return nil, errors.New("CidrBlock must be string")
		}
	}
	if v, ok := optional["ClientToken"]; ok {
		if ClientToken, ok := v.(string); ok {
			args.Query.Set("ClientToken", ClientToken)
		} else {
			return nil, errors.New("ClientToken must be string")
		}
	}
	if v, ok := optional["Description"]; ok {
		if Description, ok := v.(string); ok {
			args.Query.Set("Description", Description)
		} else {
			return nil, errors.New("Description must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["UserCidr"]; ok {
		if UserCidr, ok := v.(string); ok {
			args.Query.Set("UserCidr", UserCidr)
		} else {
			return nil, errors.New("UserCidr must be string")
		}
	}
	if v, ok := optional["VpcName"]; ok {
		if VpcName, ok := v.(string); ok {
			args.Query.Set("VpcName", VpcName)
		} else {
			return nil, errors.New("VpcName must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(CreateVpcResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// CreateVpcResponse represents the response of the api CreateVpc.
type CreateVpcResponse struct {
	RouteTableId string
	VRouterId    string
	VpcId        string
}

// DeleteDisk version 2014-05-26
//
// required parameters:
//  name: DiskId, type: string
//
// optional parameters:
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) DeleteDisk(DiskId string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "DeleteDisk")
	args.Query.Set("DiskId", DiskId)
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DeleteHaVip version 2014-05-26
//
// required parameters:
//  name: HaVipId, type: string
//
// optional parameters:
//  name: ClientToken, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) DeleteHaVip(HaVipId string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "DeleteHaVip")
	args.Query.Set("HaVipId", HaVipId)
	if v, ok := optional["ClientToken"]; ok {
		if ClientToken, ok := v.(string); ok {
			args.Query.Set("ClientToken", ClientToken)
		} else {
			return nil, errors.New("ClientToken must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DeleteImage version 2014-05-26
//
// required parameters:
//  name: ImageId, type: string
//
// optional parameters:
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) DeleteImage(ImageId string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "DeleteImage")
	args.Query.Set("ImageId", ImageId)
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DeleteInstance version 2014-05-26
//
// required parameters:
//  name: InstanceId, type: string
//
// optional parameters:
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) DeleteInstance(InstanceId string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "DeleteInstance")
	args.Query.Set("InstanceId", InstanceId)
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DeleteRouteEntry version 2014-05-26
//
// required parameters:
//  name: DestinationCidrBlock, type: string
//  name: NextHopId, type: string
//  name: RouteTableId, type: string
//
// optional parameters:
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) DeleteRouteEntry(DestinationCidrBlock, NextHopId, RouteTableId string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "DeleteRouteEntry")
	args.Query.Set("DestinationCidrBlock", DestinationCidrBlock)
	args.Query.Set("NextHopId", NextHopId)
	args.Query.Set("RouteTableId", RouteTableId)
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DeleteSecurityGroup version 2014-05-26
//
// required parameters:
//  name: SecurityGroupId, type: string
//
// optional parameters:
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) DeleteSecurityGroup(SecurityGroupId string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "DeleteSecurityGroup")
	args.Query.Set("SecurityGroupId", SecurityGroupId)
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DeleteSnapshot version 2014-05-26
//
// required parameters:
//  name: SnapshotId, type: string
//
// optional parameters:
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) DeleteSnapshot(SnapshotId string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "DeleteSnapshot")
	args.Query.Set("SnapshotId", SnapshotId)
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DeleteVSwitch version 2014-05-26
//
// required parameters:
//  name: VSwitchId, type: string
//
// optional parameters:
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) DeleteVSwitch(VSwitchId string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "DeleteVSwitch")
	args.Query.Set("VSwitchId", VSwitchId)
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DeleteVpc version 2014-05-26
//
// required parameters:
//  name: VpcId, type: string
//
// optional parameters:
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) DeleteVpc(VpcId string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "DeleteVpc")
	args.Query.Set("VpcId", VpcId)
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DescribeAutoSnapshotPolicy version 2014-05-26
//
// optional parameters:
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) DescribeAutoSnapshotPolicy(optional openapi.M) (*DescribeAutoSnapshotPolicyResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "DescribeAutoSnapshotPolicy")
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(DescribeAutoSnapshotPolicyResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DescribeAutoSnapshotPolicyResponse represents the response of the api DescribeAutoSnapshotPolicy.
type DescribeAutoSnapshotPolicyResponse struct {
	AutoSnapshotExcutionStatus struct {
		DataDiskExcutionStatus   string // optional values: Executed|Failed|Standby
		SystemDiskExcutionStatus string // optional values: Executed|Failed|Standby
	}
	AutoSnapshotOccupation int
	AutoSnapshotPolicy     struct {
		DataDiskPolicyEnabled             string
		DataDiskPolicyRetentionDays       string
		DataDiskPolicyRetentionLastWeek   string
		DataDiskPolicyTimePeriod          string
		SystemDiskPolicyEnabled           string
		SystemDiskPolicyRetentionDays     string
		SystemDiskPolicyRetentionLastWeek string
		SystemDiskPolicyTimePeriod        string
	}
}

// DescribeDiskMonitorData version 2014-05-26
//
// required parameters:
//  name: DiskId, type: string
//  name: EndTime, type: string
//  name: StartTime, type: string
//
// optional parameters:
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: Period, type: int
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) DescribeDiskMonitorData(DiskId, EndTime, StartTime string, optional openapi.M) (*DescribeDiskMonitorDataResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "DescribeDiskMonitorData")
	args.Query.Set("DiskId", DiskId)
	args.Query.Set("EndTime", EndTime)
	args.Query.Set("StartTime", StartTime)
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["Period"]; ok {
		if Period, ok := v.(int); ok {
			args.Query.Set("Period", fmt.Sprint(Period))
		} else {
			return nil, errors.New("Period must be int")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(DescribeDiskMonitorDataResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DescribeDiskMonitorDataResponse represents the response of the api DescribeDiskMonitorData.
type DescribeDiskMonitorDataResponse struct {
	MonitorData struct {
		DiskMonitorData []struct {
			BPSRead   int
			BPSTotal  int
			BPSWrite  int
			DiskId    string
			IOPSRead  int
			IOPSTotal int
			IOPSWrite int
			TimeStamp string
		}
	}
	TotalCount int
}

// DescribeDisks version 2014-05-26
//
// optional parameters:
//  name: Category, type: string
//  name: DeleteAutoSnapshot, type: bool
//  name: DeleteWithInstance, type: bool
//  name: DiskChargeType, type: string
//  name: DiskIds, type: string
//  name: DiskName, type: string
//  name: DiskType, type: string
//  name: EnableAutoSnapshot, type: bool
//  name: Filter.1.Key, type: string
//  name: Filter.1.Value, type: string
//  name: Filter.2.Key, type: string
//  name: Filter.2.Value, type: string
//  name: InstanceId, type: string
//  name: LockReason, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: PageNumber, type: int, min value: 1
//  name: PageSize, type: int, min value: 1, max value: 100
//  name: Portable, type: bool
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: SnapshotId, type: string
//  name: Status, type: string
//  name: Tag.1.Key, type: string
//  name: Tag.1.Value, type: string
//  name: Tag.2.Key, type: string
//  name: Tag.2.Value, type: string
//  name: Tag.3.Key, type: string
//  name: Tag.3.Value, type: string
//  name: Tag.4.Key, type: string
//  name: Tag.4.Value, type: string
//  name: Tag.5.Key, type: string
//  name: Tag.5.Value, type: string
//  name: ZoneId, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) DescribeDisks(optional openapi.M) (*DescribeDisksResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "DescribeDisks")
	if v, ok := optional["Category"]; ok {
		if Category, ok := v.(string); ok {
			args.Query.Set("Category", Category)
		} else {
			return nil, errors.New("Category must be string")
		}
	}
	if v, ok := optional["DeleteAutoSnapshot"]; ok {
		if DeleteAutoSnapshot, ok := v.(bool); ok {
			args.Query.Set("DeleteAutoSnapshot", fmt.Sprint(DeleteAutoSnapshot))
		} else {
			return nil, errors.New("DeleteAutoSnapshot must be bool")
		}
	}
	if v, ok := optional["DeleteWithInstance"]; ok {
		if DeleteWithInstance, ok := v.(bool); ok {
			args.Query.Set("DeleteWithInstance", fmt.Sprint(DeleteWithInstance))
		} else {
			return nil, errors.New("DeleteWithInstance must be bool")
		}
	}
	if v, ok := optional["DiskChargeType"]; ok {
		if DiskChargeType, ok := v.(string); ok {
			args.Query.Set("DiskChargeType", DiskChargeType)
		} else {
			return nil, errors.New("DiskChargeType must be string")
		}
	}
	if v, ok := optional["DiskIds"]; ok {
		if DiskIds, ok := v.(string); ok {
			args.Query.Set("DiskIds", DiskIds)
		} else {
			return nil, errors.New("DiskIds must be string")
		}
	}
	if v, ok := optional["DiskName"]; ok {
		if DiskName, ok := v.(string); ok {
			args.Query.Set("DiskName", DiskName)
		} else {
			return nil, errors.New("DiskName must be string")
		}
	}
	if v, ok := optional["DiskType"]; ok {
		if DiskType, ok := v.(string); ok {
			args.Query.Set("DiskType", DiskType)
		} else {
			return nil, errors.New("DiskType must be string")
		}
	}
	if v, ok := optional["EnableAutoSnapshot"]; ok {
		if EnableAutoSnapshot, ok := v.(bool); ok {
			args.Query.Set("EnableAutoSnapshot", fmt.Sprint(EnableAutoSnapshot))
		} else {
			return nil, errors.New("EnableAutoSnapshot must be bool")
		}
	}
	if v, ok := optional["Filter.1.Key"]; ok {
		if Filter1Key, ok := v.(string); ok {
			args.Query.Set("Filter.1.Key", Filter1Key)
		} else {
			return nil, errors.New("Filter.1.Key must be string")
		}
	}
	if v, ok := optional["Filter.1.Value"]; ok {
		if Filter1Value, ok := v.(string); ok {
			args.Query.Set("Filter.1.Value", Filter1Value)
		} else {
			return nil, errors.New("Filter.1.Value must be string")
		}
	}
	if v, ok := optional["Filter.2.Key"]; ok {
		if Filter2Key, ok := v.(string); ok {
			args.Query.Set("Filter.2.Key", Filter2Key)
		} else {
			return nil, errors.New("Filter.2.Key must be string")
		}
	}
	if v, ok := optional["Filter.2.Value"]; ok {
		if Filter2Value, ok := v.(string); ok {
			args.Query.Set("Filter.2.Value", Filter2Value)
		} else {
			return nil, errors.New("Filter.2.Value must be string")
		}
	}
	if v, ok := optional["InstanceId"]; ok {
		if InstanceId, ok := v.(string); ok {
			args.Query.Set("InstanceId", InstanceId)
		} else {
			return nil, errors.New("InstanceId must be string")
		}
	}
	if v, ok := optional["LockReason"]; ok {
		if LockReason, ok := v.(string); ok {
			args.Query.Set("LockReason", LockReason)
		} else {
			return nil, errors.New("LockReason must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["PageNumber"]; ok {
		if PageNumber, ok := v.(int); ok {
			if PageNumber < 1 {
				return nil, errors.New("PageNumber must be equal or greater than 1")
			}
			args.Query.Set("PageNumber", fmt.Sprint(PageNumber))
		} else {
			return nil, errors.New("PageNumber must be int")
		}
	}
	if v, ok := optional["PageSize"]; ok {
		if PageSize, ok := v.(int); ok {
			if PageSize < 1 {
				return nil, errors.New("PageSize must be equal or greater than 1")
			}
			if PageSize > 100 {
				return nil, errors.New("PageSize must be equal or less than 100")
			}
			args.Query.Set("PageSize", fmt.Sprint(PageSize))
		} else {
			return nil, errors.New("PageSize must be int")
		}
	}
	if v, ok := optional["Portable"]; ok {
		if Portable, ok := v.(bool); ok {
			args.Query.Set("Portable", fmt.Sprint(Portable))
		} else {
			return nil, errors.New("Portable must be bool")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["SnapshotId"]; ok {
		if SnapshotId, ok := v.(string); ok {
			args.Query.Set("SnapshotId", SnapshotId)
		} else {
			return nil, errors.New("SnapshotId must be string")
		}
	}
	if v, ok := optional["Status"]; ok {
		if Status, ok := v.(string); ok {
			args.Query.Set("Status", Status)
		} else {
			return nil, errors.New("Status must be string")
		}
	}
	if v, ok := optional["Tag.1.Key"]; ok {
		if Tag1Key, ok := v.(string); ok {
			args.Query.Set("Tag.1.Key", Tag1Key)
		} else {
			return nil, errors.New("Tag.1.Key must be string")
		}
	}
	if v, ok := optional["Tag.1.Value"]; ok {
		if Tag1Value, ok := v.(string); ok {
			args.Query.Set("Tag.1.Value", Tag1Value)
		} else {
			return nil, errors.New("Tag.1.Value must be string")
		}
	}
	if v, ok := optional["Tag.2.Key"]; ok {
		if Tag2Key, ok := v.(string); ok {
			args.Query.Set("Tag.2.Key", Tag2Key)
		} else {
			return nil, errors.New("Tag.2.Key must be string")
		}
	}
	if v, ok := optional["Tag.2.Value"]; ok {
		if Tag2Value, ok := v.(string); ok {
			args.Query.Set("Tag.2.Value", Tag2Value)
		} else {
			return nil, errors.New("Tag.2.Value must be string")
		}
	}
	if v, ok := optional["Tag.3.Key"]; ok {
		if Tag3Key, ok := v.(string); ok {
			args.Query.Set("Tag.3.Key", Tag3Key)
		} else {
			return nil, errors.New("Tag.3.Key must be string")
		}
	}
	if v, ok := optional["Tag.3.Value"]; ok {
		if Tag3Value, ok := v.(string); ok {
			args.Query.Set("Tag.3.Value", Tag3Value)
		} else {
			return nil, errors.New("Tag.3.Value must be string")
		}
	}
	if v, ok := optional["Tag.4.Key"]; ok {
		if Tag4Key, ok := v.(string); ok {
			args.Query.Set("Tag.4.Key", Tag4Key)
		} else {
			return nil, errors.New("Tag.4.Key must be string")
		}
	}
	if v, ok := optional["Tag.4.Value"]; ok {
		if Tag4Value, ok := v.(string); ok {
			args.Query.Set("Tag.4.Value", Tag4Value)
		} else {
			return nil, errors.New("Tag.4.Value must be string")
		}
	}
	if v, ok := optional["Tag.5.Key"]; ok {
		if Tag5Key, ok := v.(string); ok {
			args.Query.Set("Tag.5.Key", Tag5Key)
		} else {
			return nil, errors.New("Tag.5.Key must be string")
		}
	}
	if v, ok := optional["Tag.5.Value"]; ok {
		if Tag5Value, ok := v.(string); ok {
			args.Query.Set("Tag.5.Value", Tag5Value)
		} else {
			return nil, errors.New("Tag.5.Value must be string")
		}
	}
	if v, ok := optional["ZoneId"]; ok {
		if ZoneId, ok := v.(string); ok {
			args.Query.Set("ZoneId", ZoneId)
		} else {
			return nil, errors.New("ZoneId must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(DescribeDisksResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DescribeDisksResponse represents the response of the api DescribeDisks.
type DescribeDisksResponse struct {
	Disks struct {
		Disk []struct {
			AttachedTime       string
			Category           string // optional values: cloud|ephemeral|ephemeral_ssd
			CreationTime       string
			DeleteAutoSnapshot bool
			DeleteWithInstance bool
			Description        string
			DetachedTime       string
			Device             string
			DiskChargeType     string
			DiskId             string
			DiskName           string
			EnableAutoSnapshot bool
			ExpiredTime        string
			ImageId            string
			InstanceId         string
			OperationLocks     struct {
				OperationLock []struct {
					LockReason string
				}
			}
			Portable         bool
			ProductCode      string
			RegionId         string
			Size             int
			SourceSnapshotId string
			Status           string
			Tags             struct {
				Tag []struct {
					TagKey   string
					TagValue string
				}
			}
			Type   string // optional values: data|system
			ZoneId string
		}
	}
	PageNumber int
	PageSize   int
	TotalCount int
}

// DescribeEipAddresses version 2014-05-26
//
// optional parameters:
//  name: AllocationId, type: string
//  name: AssociatedInstanceId, type: string
//  name: AssociatedInstanceType, type: string
//  name: EipAddress, type: string
//  name: Filter.1.Key, type: string
//  name: Filter.1.Value, type: string
//  name: Filter.2.Key, type: string
//  name: Filter.2.Value, type: string
//  name: LockReason, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: PageNumber, type: int, min value: 1
//  name: PageSize, type: int, max value: 100
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: Status, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) DescribeEipAddresses(optional openapi.M) (*DescribeEipAddressesResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "DescribeEipAddresses")
	if v, ok := optional["AllocationId"]; ok {
		if AllocationId, ok := v.(string); ok {
			args.Query.Set("AllocationId", AllocationId)
		} else {
			return nil, errors.New("AllocationId must be string")
		}
	}
	if v, ok := optional["AssociatedInstanceId"]; ok {
		if AssociatedInstanceId, ok := v.(string); ok {
			args.Query.Set("AssociatedInstanceId", AssociatedInstanceId)
		} else {
			return nil, errors.New("AssociatedInstanceId must be string")
		}
	}
	if v, ok := optional["AssociatedInstanceType"]; ok {
		if AssociatedInstanceType, ok := v.(string); ok {
			args.Query.Set("AssociatedInstanceType", AssociatedInstanceType)
		} else {
			return nil, errors.New("AssociatedInstanceType must be string")
		}
	}
	if v, ok := optional["EipAddress"]; ok {
		if EipAddress, ok := v.(string); ok {
			args.Query.Set("EipAddress", EipAddress)
		} else {
			return nil, errors.New("EipAddress must be string")
		}
	}
	if v, ok := optional["Filter.1.Key"]; ok {
		if Filter1Key, ok := v.(string); ok {
			args.Query.Set("Filter.1.Key", Filter1Key)
		} else {
			return nil, errors.New("Filter.1.Key must be string")
		}
	}
	if v, ok := optional["Filter.1.Value"]; ok {
		if Filter1Value, ok := v.(string); ok {
			args.Query.Set("Filter.1.Value", Filter1Value)
		} else {
			return nil, errors.New("Filter.1.Value must be string")
		}
	}
	if v, ok := optional["Filter.2.Key"]; ok {
		if Filter2Key, ok := v.(string); ok {
			args.Query.Set("Filter.2.Key", Filter2Key)
		} else {
			return nil, errors.New("Filter.2.Key must be string")
		}
	}
	if v, ok := optional["Filter.2.Value"]; ok {
		if Filter2Value, ok := v.(string); ok {
			args.Query.Set("Filter.2.Value", Filter2Value)
		} else {
			return nil, errors.New("Filter.2.Value must be string")
		}
	}
	if v, ok := optional["LockReason"]; ok {
		if LockReason, ok := v.(string); ok {
			args.Query.Set("LockReason", LockReason)
		} else {
			return nil, errors.New("LockReason must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["PageNumber"]; ok {
		if PageNumber, ok := v.(int); ok {
			if PageNumber < 1 {
				return nil, errors.New("PageNumber must be equal or greater than 1")
			}
			args.Query.Set("PageNumber", fmt.Sprint(PageNumber))
		} else {
			return nil, errors.New("PageNumber must be int")
		}
	}
	if v, ok := optional["PageSize"]; ok {
		if PageSize, ok := v.(int); ok {
			if PageSize > 100 {
				return nil, errors.New("PageSize must be equal or less than 100")
			}
			args.Query.Set("PageSize", fmt.Sprint(PageSize))
		} else {
			return nil, errors.New("PageSize must be int")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["Status"]; ok {
		if Status, ok := v.(string); ok {
			args.Query.Set("Status", Status)
		} else {
			return nil, errors.New("Status must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(DescribeEipAddressesResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DescribeEipAddressesResponse represents the response of the api DescribeEipAddresses.
type DescribeEipAddressesResponse struct {
	EipAddresses struct {
		EipAddress []struct {
			AllocationId       string
			AllocationTime     string
			Bandwidth          string
			InstanceId         string
			InstanceType       string
			InternetChargeType string
			IpAddress          string
			OperationLocks     struct {
				LockReason []struct {
					LockReason string
				}
			}
			RegionId string
			Status   string
		}
	}
	PageNumber int
	PageSize   int
	TotalCount int
}

// DescribeEipMonitorData version 2014-05-26
//
// required parameters:
//  name: AllocationId, type: string
//  name: EndTime, type: string
//  name: StartTime, type: string
//
// optional parameters:
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: Period, type: int
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) DescribeEipMonitorData(AllocationId, EndTime, StartTime string, optional openapi.M) (*DescribeEipMonitorDataResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "DescribeEipMonitorData")
	args.Query.Set("AllocationId", AllocationId)
	args.Query.Set("EndTime", EndTime)
	args.Query.Set("StartTime", StartTime)
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["Period"]; ok {
		if Period, ok := v.(int); ok {
			args.Query.Set("Period", fmt.Sprint(Period))
		} else {
			return nil, errors.New("Period must be int")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(DescribeEipMonitorDataResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DescribeEipMonitorDataResponse represents the response of the api DescribeEipMonitorData.
type DescribeEipMonitorDataResponse struct {
	EipMonitorDatas struct {
		EipMonitorData []struct {
			EipBandwidth int
			EipFlow      int
			EipPackets   int
			EipRX        int
			EipTX        int
			TimeStamp    string
		}
	}
}

// DescribeHaVips version 2014-05-26
//
// required parameters:
//  name: Filter, type: string
//
// optional parameters:
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: PageNumber, type: int, min value: 1
//  name: PageSize, type: int, min value: 1, max value: 50
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) DescribeHaVips(Filter string, optional openapi.M) (*DescribeHaVipsResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "DescribeHaVips")
	args.Query.Set("Filter", Filter)
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["PageNumber"]; ok {
		if PageNumber, ok := v.(int); ok {
			if PageNumber < 1 {
				return nil, errors.New("PageNumber must be equal or greater than 1")
			}
			args.Query.Set("PageNumber", fmt.Sprint(PageNumber))
		} else {
			return nil, errors.New("PageNumber must be int")
		}
	}
	if v, ok := optional["PageSize"]; ok {
		if PageSize, ok := v.(int); ok {
			if PageSize < 1 {
				return nil, errors.New("PageSize must be equal or greater than 1")
			}
			if PageSize > 50 {
				return nil, errors.New("PageSize must be equal or less than 50")
			}
			args.Query.Set("PageSize", fmt.Sprint(PageSize))
		} else {
			return nil, errors.New("PageSize must be int")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(DescribeHaVipsResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DescribeHaVipsResponse represents the response of the api DescribeHaVips.
type DescribeHaVipsResponse struct {
	HaVips struct {
		HaVip []struct {
			CreateTime       string
			Description      string
			HaVipId          string
			IpAddress        string
			MasterInstanceId string
			RegionId         string
			Status           string
			VSwitchId        string
			VpcId            string
		}
	}
	PageNumber int
	PageSize   int
	TotalCount int
}

// DescribeImageSharePermission version 2014-05-26
//
// required parameters:
//  name: ImageId, type: string
//
// optional parameters:
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: PageNumber, type: int
//  name: PageSize, type: int
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) DescribeImageSharePermission(ImageId string, optional openapi.M) (*DescribeImageSharePermissionResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "DescribeImageSharePermission")
	args.Query.Set("ImageId", ImageId)
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["PageNumber"]; ok {
		if PageNumber, ok := v.(int); ok {
			args.Query.Set("PageNumber", fmt.Sprint(PageNumber))
		} else {
			return nil, errors.New("PageNumber must be int")
		}
	}
	if v, ok := optional["PageSize"]; ok {
		if PageSize, ok := v.(int); ok {
			args.Query.Set("PageSize", fmt.Sprint(PageSize))
		} else {
			return nil, errors.New("PageSize must be int")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(DescribeImageSharePermissionResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DescribeImageSharePermissionResponse represents the response of the api DescribeImageSharePermission.
type DescribeImageSharePermissionResponse struct {
	Accounts struct {
		Account []struct {
			AliyunId string
		}
	}
	ImageId     string
	PageNumber  int
	PageSize    int
	RegionId    string
	ShareGroups struct {
		ShareGroup []struct {
			Group string
		}
	}
	TotalCount int
}

// DescribeImages version 2014-05-26
//
// optional parameters:
//  name: Filter.1.Key, type: string
//  name: Filter.1.Value, type: string
//  name: Filter.2.Key, type: string
//  name: Filter.2.Value, type: string
//  name: ImageId, type: string
//  name: ImageName, type: string
//  name: ImageOwnerAlias, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: PageNumber, type: int, min value: 1
//  name: PageSize, type: int, min value: 1, max value: 100
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: ShowExpired, type: bool
//  name: SnapshotId, type: string
//  name: Status, type: string
//  name: Tag.1.Key, type: string
//  name: Tag.1.Value, type: string
//  name: Tag.2.Key, type: string
//  name: Tag.2.Value, type: string
//  name: Tag.3.Key, type: string
//  name: Tag.3.Value, type: string
//  name: Tag.4.Key, type: string
//  name: Tag.4.Value, type: string
//  name: Tag.5.Key, type: string
//  name: Tag.5.Value, type: string
//  name: Usage, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) DescribeImages(optional openapi.M) (*DescribeImagesResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "DescribeImages")
	if v, ok := optional["Filter.1.Key"]; ok {
		if Filter1Key, ok := v.(string); ok {
			args.Query.Set("Filter.1.Key", Filter1Key)
		} else {
			return nil, errors.New("Filter.1.Key must be string")
		}
	}
	if v, ok := optional["Filter.1.Value"]; ok {
		if Filter1Value, ok := v.(string); ok {
			args.Query.Set("Filter.1.Value", Filter1Value)
		} else {
			return nil, errors.New("Filter.1.Value must be string")
		}
	}
	if v, ok := optional["Filter.2.Key"]; ok {
		if Filter2Key, ok := v.(string); ok {
			args.Query.Set("Filter.2.Key", Filter2Key)
		} else {
			return nil, errors.New("Filter.2.Key must be string")
		}
	}
	if v, ok := optional["Filter.2.Value"]; ok {
		if Filter2Value, ok := v.(string); ok {
			args.Query.Set("Filter.2.Value", Filter2Value)
		} else {
			return nil, errors.New("Filter.2.Value must be string")
		}
	}
	if v, ok := optional["ImageId"]; ok {
		if ImageId, ok := v.(string); ok {
			args.Query.Set("ImageId", ImageId)
		} else {
			return nil, errors.New("ImageId must be string")
		}
	}
	if v, ok := optional["ImageName"]; ok {
		if ImageName, ok := v.(string); ok {
			args.Query.Set("ImageName", ImageName)
		} else {
			return nil, errors.New("ImageName must be string")
		}
	}
	if v, ok := optional["ImageOwnerAlias"]; ok {
		if ImageOwnerAlias, ok := v.(string); ok {
			args.Query.Set("ImageOwnerAlias", ImageOwnerAlias)
		} else {
			return nil, errors.New("ImageOwnerAlias must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["PageNumber"]; ok {
		if PageNumber, ok := v.(int); ok {
			if PageNumber < 1 {
				return nil, errors.New("PageNumber must be equal or greater than 1")
			}
			args.Query.Set("PageNumber", fmt.Sprint(PageNumber))
		} else {
			return nil, errors.New("PageNumber must be int")
		}
	}
	if v, ok := optional["PageSize"]; ok {
		if PageSize, ok := v.(int); ok {
			if PageSize < 1 {
				return nil, errors.New("PageSize must be equal or greater than 1")
			}
			if PageSize > 100 {
				return nil, errors.New("PageSize must be equal or less than 100")
			}
			args.Query.Set("PageSize", fmt.Sprint(PageSize))
		} else {
			return nil, errors.New("PageSize must be int")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["ShowExpired"]; ok {
		if ShowExpired, ok := v.(bool); ok {
			args.Query.Set("ShowExpired", fmt.Sprint(ShowExpired))
		} else {
			return nil, errors.New("ShowExpired must be bool")
		}
	}
	if v, ok := optional["SnapshotId"]; ok {
		if SnapshotId, ok := v.(string); ok {
			args.Query.Set("SnapshotId", SnapshotId)
		} else {
			return nil, errors.New("SnapshotId must be string")
		}
	}
	if v, ok := optional["Status"]; ok {
		if Status, ok := v.(string); ok {
			args.Query.Set("Status", Status)
		} else {
			return nil, errors.New("Status must be string")
		}
	}
	if v, ok := optional["Tag.1.Key"]; ok {
		if Tag1Key, ok := v.(string); ok {
			args.Query.Set("Tag.1.Key", Tag1Key)
		} else {
			return nil, errors.New("Tag.1.Key must be string")
		}
	}
	if v, ok := optional["Tag.1.Value"]; ok {
		if Tag1Value, ok := v.(string); ok {
			args.Query.Set("Tag.1.Value", Tag1Value)
		} else {
			return nil, errors.New("Tag.1.Value must be string")
		}
	}
	if v, ok := optional["Tag.2.Key"]; ok {
		if Tag2Key, ok := v.(string); ok {
			args.Query.Set("Tag.2.Key", Tag2Key)
		} else {
			return nil, errors.New("Tag.2.Key must be string")
		}
	}
	if v, ok := optional["Tag.2.Value"]; ok {
		if Tag2Value, ok := v.(string); ok {
			args.Query.Set("Tag.2.Value", Tag2Value)
		} else {
			return nil, errors.New("Tag.2.Value must be string")
		}
	}
	if v, ok := optional["Tag.3.Key"]; ok {
		if Tag3Key, ok := v.(string); ok {
			args.Query.Set("Tag.3.Key", Tag3Key)
		} else {
			return nil, errors.New("Tag.3.Key must be string")
		}
	}
	if v, ok := optional["Tag.3.Value"]; ok {
		if Tag3Value, ok := v.(string); ok {
			args.Query.Set("Tag.3.Value", Tag3Value)
		} else {
			return nil, errors.New("Tag.3.Value must be string")
		}
	}
	if v, ok := optional["Tag.4.Key"]; ok {
		if Tag4Key, ok := v.(string); ok {
			args.Query.Set("Tag.4.Key", Tag4Key)
		} else {
			return nil, errors.New("Tag.4.Key must be string")
		}
	}
	if v, ok := optional["Tag.4.Value"]; ok {
		if Tag4Value, ok := v.(string); ok {
			args.Query.Set("Tag.4.Value", Tag4Value)
		} else {
			return nil, errors.New("Tag.4.Value must be string")
		}
	}
	if v, ok := optional["Tag.5.Key"]; ok {
		if Tag5Key, ok := v.(string); ok {
			args.Query.Set("Tag.5.Key", Tag5Key)
		} else {
			return nil, errors.New("Tag.5.Key must be string")
		}
	}
	if v, ok := optional["Tag.5.Value"]; ok {
		if Tag5Value, ok := v.(string); ok {
			args.Query.Set("Tag.5.Value", Tag5Value)
		} else {
			return nil, errors.New("Tag.5.Value must be string")
		}
	}
	if v, ok := optional["Usage"]; ok {
		if Usage, ok := v.(string); ok {
			args.Query.Set("Usage", Usage)
		} else {
			return nil, errors.New("Usage must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(DescribeImagesResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DescribeImagesResponse represents the response of the api DescribeImages.
type DescribeImagesResponse struct {
	Images struct {
		Image []struct {
			Architecture       string // optional values: i386|x86_64
			CreationTime       string
			Description        string
			DiskDeviceMappings struct {
				DiskDeviceMapping []struct {
					Device     string
					Size       string
					SnapshotId string
				}
			}
			ImageId         string
			ImageName       string
			ImageOwnerAlias string
			ImageVersion    string
			IsCopied        bool
			IsSelfShared    string
			IsSubscribed    bool
			OSName          string
			OSType          string
			Platform        string
			ProductCode     string
			Progress        string
			Size            int
			Status          string
			Tags            struct {
				Tag []struct {
					TagKey   string
					TagValue string
				}
			}
			Usage string
		}
	}
	PageNumber int
	PageSize   int
	RegionId   string
	TotalCount int
}

// DescribeInstanceAttribute version 2014-05-26
//
// required parameters:
//  name: InstanceId, type: string
//
// optional parameters:
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) DescribeInstanceAttribute(InstanceId string, optional openapi.M) (*DescribeInstanceAttributeResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "DescribeInstanceAttribute")
	args.Query.Set("InstanceId", InstanceId)
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(DescribeInstanceAttributeResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DescribeInstanceAttributeResponse represents the response of the api DescribeInstanceAttribute.
type DescribeInstanceAttributeResponse struct {
	ClusterId    string
	CreationTime string
	Description  string
	EipAddress   struct {
		AllocationId       string
		Bandwidth          int
		InternetChargeType string
		IpAddress          string
	}
	ExpiredTime             string
	HostName                string
	ImageId                 string
	InstanceChargeType      string
	InstanceId              string
	InstanceName            string
	InstanceNetworkType     string
	InstanceType            string
	InternetChargeType      string
	InternetMaxBandwidthIn  int
	InternetMaxBandwidthOut int
	IoOptimized             string
	OperationLocks          struct {
		LockReason []struct {
			LockReason string
		}
	}
	RegionId      string
	SerialNumber  string
	Status        string // optional values: Deleted|Resetting|Running|Starting|Stopped|Stopping|Transferring
	VlanId        string
	VpcAttributes struct {
		NatIpAddress string
		VSwitchId    string
		VpcId        string
	}
	ZoneId string
}

// DescribeInstanceMonitorData version 2014-05-26
//
// required parameters:
//  name: EndTime, type: string
//  name: InstanceId, type: string
//  name: StartTime, type: string
//
// optional parameters:
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: Period, type: int
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) DescribeInstanceMonitorData(EndTime, InstanceId, StartTime string, optional openapi.M) (*DescribeInstanceMonitorDataResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "DescribeInstanceMonitorData")
	args.Query.Set("EndTime", EndTime)
	args.Query.Set("InstanceId", InstanceId)
	args.Query.Set("StartTime", StartTime)
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["Period"]; ok {
		if Period, ok := v.(int); ok {
			args.Query.Set("Period", fmt.Sprint(Period))
		} else {
			return nil, errors.New("Period must be int")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(DescribeInstanceMonitorDataResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DescribeInstanceMonitorDataResponse represents the response of the api DescribeInstanceMonitorData.
type DescribeInstanceMonitorDataResponse struct {
	MonitorData struct {
		InstanceMonitorData []struct {
			BPSRead           int
			BPSWrite          int
			CPU               int
			IOPSRead          int
			IOPSWrite         int
			InstanceId        string
			InternetBandwidth int
			InternetRX        int
			InternetTX        int
			IntranetBandwidth int
			IntranetRX        int
			IntranetTX        int
			TimeStamp         string
		}
	}
}

// DescribeInstanceStatus version 2014-05-26
//
// optional parameters:
//  name: ClusterId, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: PageNumber, type: int, min value: 1
//  name: PageSize, type: int, min value: 1, max value: 50
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: ZoneId, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) DescribeInstanceStatus(optional openapi.M) (*DescribeInstanceStatusResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "DescribeInstanceStatus")
	if v, ok := optional["ClusterId"]; ok {
		if ClusterId, ok := v.(string); ok {
			args.Query.Set("ClusterId", ClusterId)
		} else {
			return nil, errors.New("ClusterId must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["PageNumber"]; ok {
		if PageNumber, ok := v.(int); ok {
			if PageNumber < 1 {
				return nil, errors.New("PageNumber must be equal or greater than 1")
			}
			args.Query.Set("PageNumber", fmt.Sprint(PageNumber))
		} else {
			return nil, errors.New("PageNumber must be int")
		}
	}
	if v, ok := optional["PageSize"]; ok {
		if PageSize, ok := v.(int); ok {
			if PageSize < 1 {
				return nil, errors.New("PageSize must be equal or greater than 1")
			}
			if PageSize > 50 {
				return nil, errors.New("PageSize must be equal or less than 50")
			}
			args.Query.Set("PageSize", fmt.Sprint(PageSize))
		} else {
			return nil, errors.New("PageSize must be int")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["ZoneId"]; ok {
		if ZoneId, ok := v.(string); ok {
			args.Query.Set("ZoneId", ZoneId)
		} else {
			return nil, errors.New("ZoneId must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(DescribeInstanceStatusResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DescribeInstanceStatusResponse represents the response of the api DescribeInstanceStatus.
type DescribeInstanceStatusResponse struct {
	InstanceStatuses struct {
		InstanceStatus []struct {
			InstanceId string
			Status     string // optional values: Deleted|Resetting|Running|Starting|Stopped|Stopping|Transferring
		}
	}
	PageNumber int
	PageSize   int
	TotalCount int
}

// DescribeInstanceTypes version 2014-05-26
//
// optional parameters:
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) DescribeInstanceTypes(optional openapi.M) (*DescribeInstanceTypesResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "DescribeInstanceTypes")
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(DescribeInstanceTypesResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DescribeInstanceTypesResponse represents the response of the api DescribeInstanceTypes.
type DescribeInstanceTypesResponse struct {
	InstanceTypes struct {
		InstanceType []struct {
			CpuCoreCount   int
			InstanceTypeId string
			MemorySize     float32
		}
	}
}

// DescribeInstanceVncPasswd version 2014-05-26
//
// required parameters:
//  name: InstanceId, type: string
//
// optional parameters:
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) DescribeInstanceVncPasswd(InstanceId string, optional openapi.M) (*DescribeInstanceVncPasswdResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "DescribeInstanceVncPasswd")
	args.Query.Set("InstanceId", InstanceId)
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(DescribeInstanceVncPasswdResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DescribeInstanceVncPasswdResponse represents the response of the api DescribeInstanceVncPasswd.
type DescribeInstanceVncPasswdResponse struct {
	VncPasswd string
}

// DescribeInstanceVncUrl version 2014-05-26
//
// required parameters:
//  name: InstanceId, type: string
//
// optional parameters:
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) DescribeInstanceVncUrl(InstanceId string, optional openapi.M) (*DescribeInstanceVncUrlResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "DescribeInstanceVncUrl")
	args.Query.Set("InstanceId", InstanceId)
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(DescribeInstanceVncUrlResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DescribeInstanceVncUrlResponse represents the response of the api DescribeInstanceVncUrl.
type DescribeInstanceVncUrlResponse struct {
	VncUrl string
}

// DescribeInstances version 2014-05-26
//
// optional parameters:
//  name: DeviceAvailable, type: bool
//  name: Filter.1.Key, type: string
//  name: Filter.1.Value, type: string
//  name: Filter.2.Key, type: string
//  name: Filter.2.Value, type: string
//  name: Filter.3.Key, type: string
//  name: Filter.3.Value, type: string
//  name: Filter.4.Key, type: string
//  name: Filter.4.Value, type: string
//  name: ImageId, type: string
//  name: InnerIpAddresses, type: string
//  name: InstanceChargeType, type: string
//  name: InstanceIds, type: string
//  name: InstanceName, type: string
//  name: InstanceNetworkType, type: string
//  name: InternetChargeType, type: string
//  name: IoOptimized, type: bool
//  name: LockReason, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: PageNumber, type: int, min value: 1
//  name: PageSize, type: int, min value: 1, max value: 100
//  name: PrivateIpAddresses, type: string
//  name: PublicIpAddresses, type: string
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: SecurityGroupId, type: string
//  name: Status, type: string
//  name: Tag.1.Key, type: string
//  name: Tag.1.Value, type: string
//  name: Tag.2.Key, type: string
//  name: Tag.2.Value, type: string
//  name: Tag.3.Key, type: string
//  name: Tag.3.Value, type: string
//  name: Tag.4.Key, type: string
//  name: Tag.4.Value, type: string
//  name: Tag.5.Key, type: string
//  name: Tag.5.Value, type: string
//  name: VSwitchId, type: string
//  name: VpcId, type: string
//  name: ZoneId, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) DescribeInstances(optional openapi.M) (*DescribeInstancesResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "DescribeInstances")
	if v, ok := optional["DeviceAvailable"]; ok {
		if DeviceAvailable, ok := v.(bool); ok {
			args.Query.Set("DeviceAvailable", fmt.Sprint(DeviceAvailable))
		} else {
			return nil, errors.New("DeviceAvailable must be bool")
		}
	}
	if v, ok := optional["Filter.1.Key"]; ok {
		if Filter1Key, ok := v.(string); ok {
			args.Query.Set("Filter.1.Key", Filter1Key)
		} else {
			return nil, errors.New("Filter.1.Key must be string")
		}
	}
	if v, ok := optional["Filter.1.Value"]; ok {
		if Filter1Value, ok := v.(string); ok {
			args.Query.Set("Filter.1.Value", Filter1Value)
		} else {
			return nil, errors.New("Filter.1.Value must be string")
		}
	}
	if v, ok := optional["Filter.2.Key"]; ok {
		if Filter2Key, ok := v.(string); ok {
			args.Query.Set("Filter.2.Key", Filter2Key)
		} else {
			return nil, errors.New("Filter.2.Key must be string")
		}
	}
	if v, ok := optional["Filter.2.Value"]; ok {
		if Filter2Value, ok := v.(string); ok {
			args.Query.Set("Filter.2.Value", Filter2Value)
		} else {
			return nil, errors.New("Filter.2.Value must be string")
		}
	}
	if v, ok := optional["Filter.3.Key"]; ok {
		if Filter3Key, ok := v.(string); ok {
			args.Query.Set("Filter.3.Key", Filter3Key)
		} else {
			return nil, errors.New("Filter.3.Key must be string")
		}
	}
	if v, ok := optional["Filter.3.Value"]; ok {
		if Filter3Value, ok := v.(string); ok {
			args.Query.Set("Filter.3.Value", Filter3Value)
		} else {
			return nil, errors.New("Filter.3.Value must be string")
		}
	}
	if v, ok := optional["Filter.4.Key"]; ok {
		if Filter4Key, ok := v.(string); ok {
			args.Query.Set("Filter.4.Key", Filter4Key)
		} else {
			return nil, errors.New("Filter.4.Key must be string")
		}
	}
	if v, ok := optional["Filter.4.Value"]; ok {
		if Filter4Value, ok := v.(string); ok {
			args.Query.Set("Filter.4.Value", Filter4Value)
		} else {
			return nil, errors.New("Filter.4.Value must be string")
		}
	}
	if v, ok := optional["ImageId"]; ok {
		if ImageId, ok := v.(string); ok {
			args.Query.Set("ImageId", ImageId)
		} else {
			return nil, errors.New("ImageId must be string")
		}
	}
	if v, ok := optional["InnerIpAddresses"]; ok {
		if InnerIpAddresses, ok := v.(string); ok {
			args.Query.Set("InnerIpAddresses", InnerIpAddresses)
		} else {
			return nil, errors.New("InnerIpAddresses must be string")
		}
	}
	if v, ok := optional["InstanceChargeType"]; ok {
		if InstanceChargeType, ok := v.(string); ok {
			args.Query.Set("InstanceChargeType", InstanceChargeType)
		} else {
			return nil, errors.New("InstanceChargeType must be string")
		}
	}
	if v, ok := optional["InstanceIds"]; ok {
		if InstanceIds, ok := v.(string); ok {
			args.Query.Set("InstanceIds", InstanceIds)
		} else {
			return nil, errors.New("InstanceIds must be string")
		}
	}
	if v, ok := optional["InstanceName"]; ok {
		if InstanceName, ok := v.(string); ok {
			args.Query.Set("InstanceName", InstanceName)
		} else {
			return nil, errors.New("InstanceName must be string")
		}
	}
	if v, ok := optional["InstanceNetworkType"]; ok {
		if InstanceNetworkType, ok := v.(string); ok {
			args.Query.Set("InstanceNetworkType", InstanceNetworkType)
		} else {
			return nil, errors.New("InstanceNetworkType must be string")
		}
	}
	if v, ok := optional["InternetChargeType"]; ok {
		if InternetChargeType, ok := v.(string); ok {
			args.Query.Set("InternetChargeType", InternetChargeType)
		} else {
			return nil, errors.New("InternetChargeType must be string")
		}
	}
	if v, ok := optional["IoOptimized"]; ok {
		if IoOptimized, ok := v.(bool); ok {
			args.Query.Set("IoOptimized", fmt.Sprint(IoOptimized))
		} else {
			return nil, errors.New("IoOptimized must be bool")
		}
	}
	if v, ok := optional["LockReason"]; ok {
		if LockReason, ok := v.(string); ok {
			args.Query.Set("LockReason", LockReason)
		} else {
			return nil, errors.New("LockReason must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["PageNumber"]; ok {
		if PageNumber, ok := v.(int); ok {
			if PageNumber < 1 {
				return nil, errors.New("PageNumber must be equal or greater than 1")
			}
			args.Query.Set("PageNumber", fmt.Sprint(PageNumber))
		} else {
			return nil, errors.New("PageNumber must be int")
		}
	}
	if v, ok := optional["PageSize"]; ok {
		if PageSize, ok := v.(int); ok {
			if PageSize < 1 {
				return nil, errors.New("PageSize must be equal or greater than 1")
			}
			if PageSize > 100 {
				return nil, errors.New("PageSize must be equal or less than 100")
			}
			args.Query.Set("PageSize", fmt.Sprint(PageSize))
		} else {
			return nil, errors.New("PageSize must be int")
		}
	}
	if v, ok := optional["PrivateIpAddresses"]; ok {
		if PrivateIpAddresses, ok := v.(string); ok {
			args.Query.Set("PrivateIpAddresses", PrivateIpAddresses)
		} else {
			return nil, errors.New("PrivateIpAddresses must be string")
		}
	}
	if v, ok := optional["PublicIpAddresses"]; ok {
		if PublicIpAddresses, ok := v.(string); ok {
			args.Query.Set("PublicIpAddresses", PublicIpAddresses)
		} else {
			return nil, errors.New("PublicIpAddresses must be string")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["SecurityGroupId"]; ok {
		if SecurityGroupId, ok := v.(string); ok {
			args.Query.Set("SecurityGroupId", SecurityGroupId)
		} else {
			return nil, errors.New("SecurityGroupId must be string")
		}
	}
	if v, ok := optional["Status"]; ok {
		if Status, ok := v.(string); ok {
			args.Query.Set("Status", Status)
		} else {
			return nil, errors.New("Status must be string")
		}
	}
	if v, ok := optional["Tag.1.Key"]; ok {
		if Tag1Key, ok := v.(string); ok {
			args.Query.Set("Tag.1.Key", Tag1Key)
		} else {
			return nil, errors.New("Tag.1.Key must be string")
		}
	}
	if v, ok := optional["Tag.1.Value"]; ok {
		if Tag1Value, ok := v.(string); ok {
			args.Query.Set("Tag.1.Value", Tag1Value)
		} else {
			return nil, errors.New("Tag.1.Value must be string")
		}
	}
	if v, ok := optional["Tag.2.Key"]; ok {
		if Tag2Key, ok := v.(string); ok {
			args.Query.Set("Tag.2.Key", Tag2Key)
		} else {
			return nil, errors.New("Tag.2.Key must be string")
		}
	}
	if v, ok := optional["Tag.2.Value"]; ok {
		if Tag2Value, ok := v.(string); ok {
			args.Query.Set("Tag.2.Value", Tag2Value)
		} else {
			return nil, errors.New("Tag.2.Value must be string")
		}
	}
	if v, ok := optional["Tag.3.Key"]; ok {
		if Tag3Key, ok := v.(string); ok {
			args.Query.Set("Tag.3.Key", Tag3Key)
		} else {
			return nil, errors.New("Tag.3.Key must be string")
		}
	}
	if v, ok := optional["Tag.3.Value"]; ok {
		if Tag3Value, ok := v.(string); ok {
			args.Query.Set("Tag.3.Value", Tag3Value)
		} else {
			return nil, errors.New("Tag.3.Value must be string")
		}
	}
	if v, ok := optional["Tag.4.Key"]; ok {
		if Tag4Key, ok := v.(string); ok {
			args.Query.Set("Tag.4.Key", Tag4Key)
		} else {
			return nil, errors.New("Tag.4.Key must be string")
		}
	}
	if v, ok := optional["Tag.4.Value"]; ok {
		if Tag4Value, ok := v.(string); ok {
			args.Query.Set("Tag.4.Value", Tag4Value)
		} else {
			return nil, errors.New("Tag.4.Value must be string")
		}
	}
	if v, ok := optional["Tag.5.Key"]; ok {
		if Tag5Key, ok := v.(string); ok {
			args.Query.Set("Tag.5.Key", Tag5Key)
		} else {
			return nil, errors.New("Tag.5.Key must be string")
		}
	}
	if v, ok := optional["Tag.5.Value"]; ok {
		if Tag5Value, ok := v.(string); ok {
			args.Query.Set("Tag.5.Value", Tag5Value)
		} else {
			return nil, errors.New("Tag.5.Value must be string")
		}
	}
	if v, ok := optional["VSwitchId"]; ok {
		if VSwitchId, ok := v.(string); ok {
			args.Query.Set("VSwitchId", VSwitchId)
		} else {
			return nil, errors.New("VSwitchId must be string")
		}
	}
	if v, ok := optional["VpcId"]; ok {
		if VpcId, ok := v.(string); ok {
			args.Query.Set("VpcId", VpcId)
		} else {
			return nil, errors.New("VpcId must be string")
		}
	}
	if v, ok := optional["ZoneId"]; ok {
		if ZoneId, ok := v.(string); ok {
			args.Query.Set("ZoneId", ZoneId)
		} else {
			return nil, errors.New("ZoneId must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(DescribeInstancesResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DescribeInstancesResponse represents the response of the api DescribeInstances.
type DescribeInstancesResponse struct {
	Instances struct {
		Instance []struct {
			ClusterId       string
			CreationTime    string
			Description     string
			DeviceAvailable bool
			EipAddress      struct {
				AllocationId       string
				Bandwidth          int
				InternetChargeType string
				IpAddress          string
			}
			ExpiredTime             string
			HostName                string
			ImageId                 string
			InstanceChargeType      string
			InstanceId              string
			InstanceName            string
			InstanceNetworkType     string
			InstanceType            string
			InternetChargeType      string
			InternetMaxBandwidthIn  int
			InternetMaxBandwidthOut int
			IoOptimized             bool
			OperationLocks          struct {
				LockReason []struct {
					LockReason string
				}
			}
			RegionId     string
			SerialNumber string
			Status       string // optional values: Deleted|Resetting|Running|Starting|Stopped|Stopping|Transferring
			Tags         struct {
				Tag []struct {
					TagKey   string
					TagValue string
				}
			}
			VlanId        string
			VpcAttributes struct {
				NatIpAddress string
				VSwitchId    string
				VpcId        string
			}
			ZoneId string
		}
	}
	PageNumber int
	PageSize   int
	TotalCount int
}

// DescribeLimitation version 2014-05-26
//
// required parameters:
//  name: Limitation, type: string
//
// optional parameters:
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) DescribeLimitation(Limitation string, optional openapi.M) (*DescribeLimitationResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "DescribeLimitation")
	args.Query.Set("Limitation", Limitation)
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(DescribeLimitationResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DescribeLimitationResponse represents the response of the api DescribeLimitation.
type DescribeLimitationResponse struct {
	Limitation string
	Value      string
}

// DescribeRegions version 2014-05-26
//
// optional parameters:
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) DescribeRegions(optional openapi.M) (*DescribeRegionsResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "DescribeRegions")
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(DescribeRegionsResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DescribeRegionsResponse represents the response of the api DescribeRegions.
type DescribeRegionsResponse struct {
	Regions struct {
		Region []struct {
			LocalName string
			RegionId  string
		}
	}
}

// DescribeResourceByTags version 2014-05-26
//
// optional parameters:
//  name: OwnerId, type: int64
//  name: PageNumber, type: int, min value: 0
//  name: PageSize, type: int, min value: 0, max value: 100
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: ResourceType, type: string
//  name: Tag.1.Key, type: string
//  name: Tag.1.Value, type: string
//  name: Tag.2.Key, type: string
//  name: Tag.2.Value, type: string
//  name: Tag.3.Key, type: string
//  name: Tag.3.Value, type: string
//  name: Tag.4.Key, type: string
//  name: Tag.4.Value, type: string
//  name: Tag.5.Key, type: string
//  name: Tag.5.Value, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) DescribeResourceByTags(optional openapi.M) (*DescribeResourceByTagsResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "DescribeResourceByTags")
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["PageNumber"]; ok {
		if PageNumber, ok := v.(int); ok {
			if PageNumber < 0 {
				return nil, errors.New("PageNumber must be equal or greater than 0")
			}
			args.Query.Set("PageNumber", fmt.Sprint(PageNumber))
		} else {
			return nil, errors.New("PageNumber must be int")
		}
	}
	if v, ok := optional["PageSize"]; ok {
		if PageSize, ok := v.(int); ok {
			if PageSize < 0 {
				return nil, errors.New("PageSize must be equal or greater than 0")
			}
			if PageSize > 100 {
				return nil, errors.New("PageSize must be equal or less than 100")
			}
			args.Query.Set("PageSize", fmt.Sprint(PageSize))
		} else {
			return nil, errors.New("PageSize must be int")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceType"]; ok {
		if ResourceType, ok := v.(string); ok {
			args.Query.Set("ResourceType", ResourceType)
		} else {
			return nil, errors.New("ResourceType must be string")
		}
	}
	if v, ok := optional["Tag.1.Key"]; ok {
		if Tag1Key, ok := v.(string); ok {
			args.Query.Set("Tag.1.Key", Tag1Key)
		} else {
			return nil, errors.New("Tag.1.Key must be string")
		}
	}
	if v, ok := optional["Tag.1.Value"]; ok {
		if Tag1Value, ok := v.(string); ok {
			args.Query.Set("Tag.1.Value", Tag1Value)
		} else {
			return nil, errors.New("Tag.1.Value must be string")
		}
	}
	if v, ok := optional["Tag.2.Key"]; ok {
		if Tag2Key, ok := v.(string); ok {
			args.Query.Set("Tag.2.Key", Tag2Key)
		} else {
			return nil, errors.New("Tag.2.Key must be string")
		}
	}
	if v, ok := optional["Tag.2.Value"]; ok {
		if Tag2Value, ok := v.(string); ok {
			args.Query.Set("Tag.2.Value", Tag2Value)
		} else {
			return nil, errors.New("Tag.2.Value must be string")
		}
	}
	if v, ok := optional["Tag.3.Key"]; ok {
		if Tag3Key, ok := v.(string); ok {
			args.Query.Set("Tag.3.Key", Tag3Key)
		} else {
			return nil, errors.New("Tag.3.Key must be string")
		}
	}
	if v, ok := optional["Tag.3.Value"]; ok {
		if Tag3Value, ok := v.(string); ok {
			args.Query.Set("Tag.3.Value", Tag3Value)
		} else {
			return nil, errors.New("Tag.3.Value must be string")
		}
	}
	if v, ok := optional["Tag.4.Key"]; ok {
		if Tag4Key, ok := v.(string); ok {
			args.Query.Set("Tag.4.Key", Tag4Key)
		} else {
			return nil, errors.New("Tag.4.Key must be string")
		}
	}
	if v, ok := optional["Tag.4.Value"]; ok {
		if Tag4Value, ok := v.(string); ok {
			args.Query.Set("Tag.4.Value", Tag4Value)
		} else {
			return nil, errors.New("Tag.4.Value must be string")
		}
	}
	if v, ok := optional["Tag.5.Key"]; ok {
		if Tag5Key, ok := v.(string); ok {
			args.Query.Set("Tag.5.Key", Tag5Key)
		} else {
			return nil, errors.New("Tag.5.Key must be string")
		}
	}
	if v, ok := optional["Tag.5.Value"]; ok {
		if Tag5Value, ok := v.(string); ok {
			args.Query.Set("Tag.5.Value", Tag5Value)
		} else {
			return nil, errors.New("Tag.5.Value must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(DescribeResourceByTagsResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DescribeResourceByTagsResponse represents the response of the api DescribeResourceByTags.
type DescribeResourceByTagsResponse struct {
	PageNumber int
	PageSize   int
	Resources  struct {
		Resource []struct {
			RegionId     string
			ResourceId   string
			ResourceType string
		}
	}
	TotalCount int
}

// DescribeRouteTables version 2014-05-26
//
// required parameters:
//  name: VRouterId, type: string
//
// optional parameters:
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: PageNumber, type: int, min value: 1
//  name: PageSize, type: int, min value: 1, max value: 50
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: RouteTableId, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) DescribeRouteTables(VRouterId string, optional openapi.M) (*DescribeRouteTablesResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "DescribeRouteTables")
	args.Query.Set("VRouterId", VRouterId)
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["PageNumber"]; ok {
		if PageNumber, ok := v.(int); ok {
			if PageNumber < 1 {
				return nil, errors.New("PageNumber must be equal or greater than 1")
			}
			args.Query.Set("PageNumber", fmt.Sprint(PageNumber))
		} else {
			return nil, errors.New("PageNumber must be int")
		}
	}
	if v, ok := optional["PageSize"]; ok {
		if PageSize, ok := v.(int); ok {
			if PageSize < 1 {
				return nil, errors.New("PageSize must be equal or greater than 1")
			}
			if PageSize > 50 {
				return nil, errors.New("PageSize must be equal or less than 50")
			}
			args.Query.Set("PageSize", fmt.Sprint(PageSize))
		} else {
			return nil, errors.New("PageSize must be int")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["RouteTableId"]; ok {
		if RouteTableId, ok := v.(string); ok {
			args.Query.Set("RouteTableId", RouteTableId)
		} else {
			return nil, errors.New("RouteTableId must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(DescribeRouteTablesResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DescribeRouteTablesResponse represents the response of the api DescribeRouteTables.
type DescribeRouteTablesResponse struct {
	PageNumber  int
	PageSize    int
	RouteTables struct {
		RouteTable []struct {
			CreationTime string
			RouteEntrys  struct {
				RouteEntry []struct {
					DestinationCidrBlock string
					InstanceId           string
					NextHopType          string
					RouteTableId         string
					Status               string
					Type                 string
				}
			}
			RouteTableId   string
			RouteTableType string
			VRouterId      string
		}
	}
	TotalCount int
}

// DescribeSecurityGroupAttribute version 2014-05-26
//
// required parameters:
//  name: SecurityGroupId, type: string
//
// optional parameters:
//  name: Direction, type: string
//  name: NicType, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) DescribeSecurityGroupAttribute(SecurityGroupId string, optional openapi.M) (*DescribeSecurityGroupAttributeResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "DescribeSecurityGroupAttribute")
	args.Query.Set("SecurityGroupId", SecurityGroupId)
	if v, ok := optional["Direction"]; ok {
		if Direction, ok := v.(string); ok {
			args.Query.Set("Direction", Direction)
		} else {
			return nil, errors.New("Direction must be string")
		}
	}
	if v, ok := optional["NicType"]; ok {
		if NicType, ok := v.(string); ok {
			args.Query.Set("NicType", NicType)
		} else {
			return nil, errors.New("NicType must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(DescribeSecurityGroupAttributeResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DescribeSecurityGroupAttributeResponse represents the response of the api DescribeSecurityGroupAttribute.
type DescribeSecurityGroupAttributeResponse struct {
	Description string
	Permissions struct {
		Permission []struct {
			DestCidrIp              string
			DestGroupId             string
			DestGroupOwnerAccount   string
			Direction               string
			IpProtocol              string
			NicType                 string
			Policy                  string
			PortRange               string
			Priority                string
			SourceCidrIp            string
			SourceGroupId           string
			SourceGroupOwnerAccount string
		}
	}
	RegionId          string
	SecurityGroupId   string
	SecurityGroupName string
	VpcId             string
}

// DescribeSecurityGroups version 2014-05-26
//
// optional parameters:
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: PageNumber, type: int, min value: 1
//  name: PageSize, type: int, min value: 1, max value: 100
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: SecurityGroupIds, type: string
//  name: VpcId, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) DescribeSecurityGroups(optional openapi.M) (*DescribeSecurityGroupsResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "DescribeSecurityGroups")
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["PageNumber"]; ok {
		if PageNumber, ok := v.(int); ok {
			if PageNumber < 1 {
				return nil, errors.New("PageNumber must be equal or greater than 1")
			}
			args.Query.Set("PageNumber", fmt.Sprint(PageNumber))
		} else {
			return nil, errors.New("PageNumber must be int")
		}
	}
	if v, ok := optional["PageSize"]; ok {
		if PageSize, ok := v.(int); ok {
			if PageSize < 1 {
				return nil, errors.New("PageSize must be equal or greater than 1")
			}
			if PageSize > 100 {
				return nil, errors.New("PageSize must be equal or less than 100")
			}
			args.Query.Set("PageSize", fmt.Sprint(PageSize))
		} else {
			return nil, errors.New("PageSize must be int")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["SecurityGroupIds"]; ok {
		if SecurityGroupIds, ok := v.(string); ok {
			args.Query.Set("SecurityGroupIds", SecurityGroupIds)
		} else {
			return nil, errors.New("SecurityGroupIds must be string")
		}
	}
	if v, ok := optional["VpcId"]; ok {
		if VpcId, ok := v.(string); ok {
			args.Query.Set("VpcId", VpcId)
		} else {
			return nil, errors.New("VpcId must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(DescribeSecurityGroupsResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DescribeSecurityGroupsResponse represents the response of the api DescribeSecurityGroups.
type DescribeSecurityGroupsResponse struct {
	PageNumber     int
	PageSize       int
	RegionId       string
	SecurityGroups struct {
		SecurityGroup []struct {
			CreationTime      string
			Description       string
			SecurityGroupId   string
			SecurityGroupName string
			VpcId             string
		}
	}
	TotalCount int
}

// DescribeSnapshots version 2014-05-26
//
// optional parameters:
//  name: DiskId, type: string
//  name: Filter.1.Key, type: string
//  name: Filter.1.Value, type: string
//  name: Filter.2.Key, type: string
//  name: Filter.2.Value, type: string
//  name: InstanceId, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: PageNumber, type: int, min value: 1
//  name: PageSize, type: int, min value: 1, max value: 100
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: SnapshotIds, type: string
//  name: SnapshotName, type: string
//  name: SnapshotType, type: string
//  name: SourceDiskType, type: string
//  name: Status, type: string
//  name: Tag.1.Key, type: string
//  name: Tag.1.Value, type: string
//  name: Tag.2.Key, type: string
//  name: Tag.2.Value, type: string
//  name: Tag.3.Key, type: string
//  name: Tag.3.Value, type: string
//  name: Tag.4.Key, type: string
//  name: Tag.4.Value, type: string
//  name: Tag.5.Key, type: string
//  name: Tag.5.Value, type: string
//  name: Usage, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) DescribeSnapshots(optional openapi.M) (*DescribeSnapshotsResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "DescribeSnapshots")
	if v, ok := optional["DiskId"]; ok {
		if DiskId, ok := v.(string); ok {
			args.Query.Set("DiskId", DiskId)
		} else {
			return nil, errors.New("DiskId must be string")
		}
	}
	if v, ok := optional["Filter.1.Key"]; ok {
		if Filter1Key, ok := v.(string); ok {
			args.Query.Set("Filter.1.Key", Filter1Key)
		} else {
			return nil, errors.New("Filter.1.Key must be string")
		}
	}
	if v, ok := optional["Filter.1.Value"]; ok {
		if Filter1Value, ok := v.(string); ok {
			args.Query.Set("Filter.1.Value", Filter1Value)
		} else {
			return nil, errors.New("Filter.1.Value must be string")
		}
	}
	if v, ok := optional["Filter.2.Key"]; ok {
		if Filter2Key, ok := v.(string); ok {
			args.Query.Set("Filter.2.Key", Filter2Key)
		} else {
			return nil, errors.New("Filter.2.Key must be string")
		}
	}
	if v, ok := optional["Filter.2.Value"]; ok {
		if Filter2Value, ok := v.(string); ok {
			args.Query.Set("Filter.2.Value", Filter2Value)
		} else {
			return nil, errors.New("Filter.2.Value must be string")
		}
	}
	if v, ok := optional["InstanceId"]; ok {
		if InstanceId, ok := v.(string); ok {
			args.Query.Set("InstanceId", InstanceId)
		} else {
			return nil, errors.New("InstanceId must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["PageNumber"]; ok {
		if PageNumber, ok := v.(int); ok {
			if PageNumber < 1 {
				return nil, errors.New("PageNumber must be equal or greater than 1")
			}
			args.Query.Set("PageNumber", fmt.Sprint(PageNumber))
		} else {
			return nil, errors.New("PageNumber must be int")
		}
	}
	if v, ok := optional["PageSize"]; ok {
		if PageSize, ok := v.(int); ok {
			if PageSize < 1 {
				return nil, errors.New("PageSize must be equal or greater than 1")
			}
			if PageSize > 100 {
				return nil, errors.New("PageSize must be equal or less than 100")
			}
			args.Query.Set("PageSize", fmt.Sprint(PageSize))
		} else {
			return nil, errors.New("PageSize must be int")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["SnapshotIds"]; ok {
		if SnapshotIds, ok := v.(string); ok {
			args.Query.Set("SnapshotIds", SnapshotIds)
		} else {
			return nil, errors.New("SnapshotIds must be string")
		}
	}
	if v, ok := optional["SnapshotName"]; ok {
		if SnapshotName, ok := v.(string); ok {
			args.Query.Set("SnapshotName", SnapshotName)
		} else {
			return nil, errors.New("SnapshotName must be string")
		}
	}
	if v, ok := optional["SnapshotType"]; ok {
		if SnapshotType, ok := v.(string); ok {
			args.Query.Set("SnapshotType", SnapshotType)
		} else {
			return nil, errors.New("SnapshotType must be string")
		}
	}
	if v, ok := optional["SourceDiskType"]; ok {
		if SourceDiskType, ok := v.(string); ok {
			args.Query.Set("SourceDiskType", SourceDiskType)
		} else {
			return nil, errors.New("SourceDiskType must be string")
		}
	}
	if v, ok := optional["Status"]; ok {
		if Status, ok := v.(string); ok {
			args.Query.Set("Status", Status)
		} else {
			return nil, errors.New("Status must be string")
		}
	}
	if v, ok := optional["Tag.1.Key"]; ok {
		if Tag1Key, ok := v.(string); ok {
			args.Query.Set("Tag.1.Key", Tag1Key)
		} else {
			return nil, errors.New("Tag.1.Key must be string")
		}
	}
	if v, ok := optional["Tag.1.Value"]; ok {
		if Tag1Value, ok := v.(string); ok {
			args.Query.Set("Tag.1.Value", Tag1Value)
		} else {
			return nil, errors.New("Tag.1.Value must be string")
		}
	}
	if v, ok := optional["Tag.2.Key"]; ok {
		if Tag2Key, ok := v.(string); ok {
			args.Query.Set("Tag.2.Key", Tag2Key)
		} else {
			return nil, errors.New("Tag.2.Key must be string")
		}
	}
	if v, ok := optional["Tag.2.Value"]; ok {
		if Tag2Value, ok := v.(string); ok {
			args.Query.Set("Tag.2.Value", Tag2Value)
		} else {
			return nil, errors.New("Tag.2.Value must be string")
		}
	}
	if v, ok := optional["Tag.3.Key"]; ok {
		if Tag3Key, ok := v.(string); ok {
			args.Query.Set("Tag.3.Key", Tag3Key)
		} else {
			return nil, errors.New("Tag.3.Key must be string")
		}
	}
	if v, ok := optional["Tag.3.Value"]; ok {
		if Tag3Value, ok := v.(string); ok {
			args.Query.Set("Tag.3.Value", Tag3Value)
		} else {
			return nil, errors.New("Tag.3.Value must be string")
		}
	}
	if v, ok := optional["Tag.4.Key"]; ok {
		if Tag4Key, ok := v.(string); ok {
			args.Query.Set("Tag.4.Key", Tag4Key)
		} else {
			return nil, errors.New("Tag.4.Key must be string")
		}
	}
	if v, ok := optional["Tag.4.Value"]; ok {
		if Tag4Value, ok := v.(string); ok {
			args.Query.Set("Tag.4.Value", Tag4Value)
		} else {
			return nil, errors.New("Tag.4.Value must be string")
		}
	}
	if v, ok := optional["Tag.5.Key"]; ok {
		if Tag5Key, ok := v.(string); ok {
			args.Query.Set("Tag.5.Key", Tag5Key)
		} else {
			return nil, errors.New("Tag.5.Key must be string")
		}
	}
	if v, ok := optional["Tag.5.Value"]; ok {
		if Tag5Value, ok := v.(string); ok {
			args.Query.Set("Tag.5.Value", Tag5Value)
		} else {
			return nil, errors.New("Tag.5.Value must be string")
		}
	}
	if v, ok := optional["Usage"]; ok {
		if Usage, ok := v.(string); ok {
			args.Query.Set("Usage", Usage)
		} else {
			return nil, errors.New("Usage must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(DescribeSnapshotsResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DescribeSnapshotsResponse represents the response of the api DescribeSnapshots.
type DescribeSnapshotsResponse struct {
	PageNumber int
	PageSize   int
	Snapshots  struct {
		Snapshot []struct {
			CreationTime   string
			Description    string
			ProductCode    string
			Progress       string
			SnapshotId     string
			SnapshotName   string
			SourceDiskId   string
			SourceDiskSize string
			SourceDiskType string // optional values: data|system
			Status         string
			Tags           struct {
				Tag []struct {
					TagKey   string
					TagValue string
				}
			}
			Usage string
		}
	}
	TotalCount int
}

// DescribeTagKeys version 2014-05-26
//
// optional parameters:
//  name: OwnerId, type: int64
//  name: PageNumber, type: int, min value: 0
//  name: PageSize, type: int, min value: 0, max value: 100
//  name: ResourceId, type: string
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: ResourceType, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) DescribeTagKeys(optional openapi.M) (*DescribeTagKeysResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "DescribeTagKeys")
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["PageNumber"]; ok {
		if PageNumber, ok := v.(int); ok {
			if PageNumber < 0 {
				return nil, errors.New("PageNumber must be equal or greater than 0")
			}
			args.Query.Set("PageNumber", fmt.Sprint(PageNumber))
		} else {
			return nil, errors.New("PageNumber must be int")
		}
	}
	if v, ok := optional["PageSize"]; ok {
		if PageSize, ok := v.(int); ok {
			if PageSize < 0 {
				return nil, errors.New("PageSize must be equal or greater than 0")
			}
			if PageSize > 100 {
				return nil, errors.New("PageSize must be equal or less than 100")
			}
			args.Query.Set("PageSize", fmt.Sprint(PageSize))
		} else {
			return nil, errors.New("PageSize must be int")
		}
	}
	if v, ok := optional["ResourceId"]; ok {
		if ResourceId, ok := v.(string); ok {
			args.Query.Set("ResourceId", ResourceId)
		} else {
			return nil, errors.New("ResourceId must be string")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceType"]; ok {
		if ResourceType, ok := v.(string); ok {
			args.Query.Set("ResourceType", ResourceType)
		} else {
			return nil, errors.New("ResourceType must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(DescribeTagKeysResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DescribeTagKeysResponse represents the response of the api DescribeTagKeys.
type DescribeTagKeysResponse struct {
	PageNumber int
	PageSize   int
	TotalCount int
}

// DescribeTags version 2014-05-26
//
// optional parameters:
//  name: OwnerId, type: int64
//  name: PageNumber, type: int, min value: 0
//  name: PageSize, type: int, min value: 0, max value: 100
//  name: ResourceId, type: string
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: ResourceType, type: string
//  name: Tag.1.Key, type: string
//  name: Tag.1.Value, type: string
//  name: Tag.2.Key, type: string
//  name: Tag.2.Value, type: string
//  name: Tag.3.Key, type: string
//  name: Tag.3.Value, type: string
//  name: Tag.4.Key, type: string
//  name: Tag.4.Value, type: string
//  name: Tag.5.Key, type: string
//  name: Tag.5.Value, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) DescribeTags(optional openapi.M) (*DescribeTagsResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "DescribeTags")
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["PageNumber"]; ok {
		if PageNumber, ok := v.(int); ok {
			if PageNumber < 0 {
				return nil, errors.New("PageNumber must be equal or greater than 0")
			}
			args.Query.Set("PageNumber", fmt.Sprint(PageNumber))
		} else {
			return nil, errors.New("PageNumber must be int")
		}
	}
	if v, ok := optional["PageSize"]; ok {
		if PageSize, ok := v.(int); ok {
			if PageSize < 0 {
				return nil, errors.New("PageSize must be equal or greater than 0")
			}
			if PageSize > 100 {
				return nil, errors.New("PageSize must be equal or less than 100")
			}
			args.Query.Set("PageSize", fmt.Sprint(PageSize))
		} else {
			return nil, errors.New("PageSize must be int")
		}
	}
	if v, ok := optional["ResourceId"]; ok {
		if ResourceId, ok := v.(string); ok {
			args.Query.Set("ResourceId", ResourceId)
		} else {
			return nil, errors.New("ResourceId must be string")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceType"]; ok {
		if ResourceType, ok := v.(string); ok {
			args.Query.Set("ResourceType", ResourceType)
		} else {
			return nil, errors.New("ResourceType must be string")
		}
	}
	if v, ok := optional["Tag.1.Key"]; ok {
		if Tag1Key, ok := v.(string); ok {
			args.Query.Set("Tag.1.Key", Tag1Key)
		} else {
			return nil, errors.New("Tag.1.Key must be string")
		}
	}
	if v, ok := optional["Tag.1.Value"]; ok {
		if Tag1Value, ok := v.(string); ok {
			args.Query.Set("Tag.1.Value", Tag1Value)
		} else {
			return nil, errors.New("Tag.1.Value must be string")
		}
	}
	if v, ok := optional["Tag.2.Key"]; ok {
		if Tag2Key, ok := v.(string); ok {
			args.Query.Set("Tag.2.Key", Tag2Key)
		} else {
			return nil, errors.New("Tag.2.Key must be string")
		}
	}
	if v, ok := optional["Tag.2.Value"]; ok {
		if Tag2Value, ok := v.(string); ok {
			args.Query.Set("Tag.2.Value", Tag2Value)
		} else {
			return nil, errors.New("Tag.2.Value must be string")
		}
	}
	if v, ok := optional["Tag.3.Key"]; ok {
		if Tag3Key, ok := v.(string); ok {
			args.Query.Set("Tag.3.Key", Tag3Key)
		} else {
			return nil, errors.New("Tag.3.Key must be string")
		}
	}
	if v, ok := optional["Tag.3.Value"]; ok {
		if Tag3Value, ok := v.(string); ok {
			args.Query.Set("Tag.3.Value", Tag3Value)
		} else {
			return nil, errors.New("Tag.3.Value must be string")
		}
	}
	if v, ok := optional["Tag.4.Key"]; ok {
		if Tag4Key, ok := v.(string); ok {
			args.Query.Set("Tag.4.Key", Tag4Key)
		} else {
			return nil, errors.New("Tag.4.Key must be string")
		}
	}
	if v, ok := optional["Tag.4.Value"]; ok {
		if Tag4Value, ok := v.(string); ok {
			args.Query.Set("Tag.4.Value", Tag4Value)
		} else {
			return nil, errors.New("Tag.4.Value must be string")
		}
	}
	if v, ok := optional["Tag.5.Key"]; ok {
		if Tag5Key, ok := v.(string); ok {
			args.Query.Set("Tag.5.Key", Tag5Key)
		} else {
			return nil, errors.New("Tag.5.Key must be string")
		}
	}
	if v, ok := optional["Tag.5.Value"]; ok {
		if Tag5Value, ok := v.(string); ok {
			args.Query.Set("Tag.5.Value", Tag5Value)
		} else {
			return nil, errors.New("Tag.5.Value must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(DescribeTagsResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DescribeTagsResponse represents the response of the api DescribeTags.
type DescribeTagsResponse struct {
	PageNumber int
	PageSize   int
	Tags       struct {
		Tag []struct {
			TagKey   string
			TagValue string
		}
	}
	TotalCount int
}

// DescribeVRouters version 2014-05-26
//
// optional parameters:
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: PageNumber, type: int, min value: 1
//  name: PageSize, type: int, min value: 1, max value: 50
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: VRouterId, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) DescribeVRouters(optional openapi.M) (*DescribeVRoutersResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "DescribeVRouters")
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["PageNumber"]; ok {
		if PageNumber, ok := v.(int); ok {
			if PageNumber < 1 {
				return nil, errors.New("PageNumber must be equal or greater than 1")
			}
			args.Query.Set("PageNumber", fmt.Sprint(PageNumber))
		} else {
			return nil, errors.New("PageNumber must be int")
		}
	}
	if v, ok := optional["PageSize"]; ok {
		if PageSize, ok := v.(int); ok {
			if PageSize < 1 {
				return nil, errors.New("PageSize must be equal or greater than 1")
			}
			if PageSize > 50 {
				return nil, errors.New("PageSize must be equal or less than 50")
			}
			args.Query.Set("PageSize", fmt.Sprint(PageSize))
		} else {
			return nil, errors.New("PageSize must be int")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["VRouterId"]; ok {
		if VRouterId, ok := v.(string); ok {
			args.Query.Set("VRouterId", VRouterId)
		} else {
			return nil, errors.New("VRouterId must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(DescribeVRoutersResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DescribeVRoutersResponse represents the response of the api DescribeVRouters.
type DescribeVRoutersResponse struct {
	PageNumber int
	PageSize   int
	TotalCount int
	VRouters   struct {
		VRouter []struct {
			CreationTime string
			Description  string
			RegionId     string
			VRouterId    string
			VRouterName  string
			VpcId        string
		}
	}
}

// DescribeVSwitches version 2014-05-26
//
// required parameters:
//  name: VpcId, type: string
//
// optional parameters:
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: PageNumber, type: int, min value: 1
//  name: PageSize, type: int, min value: 1, max value: 50
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: VSwitchId, type: string
//  name: ZoneId, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) DescribeVSwitches(VpcId string, optional openapi.M) (*DescribeVSwitchesResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "DescribeVSwitches")
	args.Query.Set("VpcId", VpcId)
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["PageNumber"]; ok {
		if PageNumber, ok := v.(int); ok {
			if PageNumber < 1 {
				return nil, errors.New("PageNumber must be equal or greater than 1")
			}
			args.Query.Set("PageNumber", fmt.Sprint(PageNumber))
		} else {
			return nil, errors.New("PageNumber must be int")
		}
	}
	if v, ok := optional["PageSize"]; ok {
		if PageSize, ok := v.(int); ok {
			if PageSize < 1 {
				return nil, errors.New("PageSize must be equal or greater than 1")
			}
			if PageSize > 50 {
				return nil, errors.New("PageSize must be equal or less than 50")
			}
			args.Query.Set("PageSize", fmt.Sprint(PageSize))
		} else {
			return nil, errors.New("PageSize must be int")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["VSwitchId"]; ok {
		if VSwitchId, ok := v.(string); ok {
			args.Query.Set("VSwitchId", VSwitchId)
		} else {
			return nil, errors.New("VSwitchId must be string")
		}
	}
	if v, ok := optional["ZoneId"]; ok {
		if ZoneId, ok := v.(string); ok {
			args.Query.Set("ZoneId", ZoneId)
		} else {
			return nil, errors.New("ZoneId must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(DescribeVSwitchesResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DescribeVSwitchesResponse represents the response of the api DescribeVSwitches.
type DescribeVSwitchesResponse struct {
	PageNumber int
	PageSize   int
	TotalCount int
	VSwitches  struct {
		VSwitch []struct {
			AvailableIpAddressCount int64
			CidrBlock               string
			CreationTime            string
			Description             string
			Status                  string
			VSwitchId               string
			VSwitchName             string
			VpcId                   string
			ZoneId                  string
		}
	}
}

// DescribeVpcs version 2014-05-26
//
// optional parameters:
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: PageNumber, type: int, min value: 1
//  name: PageSize, type: int, min value: 1, max value: 50
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: VpcId, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) DescribeVpcs(optional openapi.M) (*DescribeVpcsResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "DescribeVpcs")
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["PageNumber"]; ok {
		if PageNumber, ok := v.(int); ok {
			if PageNumber < 1 {
				return nil, errors.New("PageNumber must be equal or greater than 1")
			}
			args.Query.Set("PageNumber", fmt.Sprint(PageNumber))
		} else {
			return nil, errors.New("PageNumber must be int")
		}
	}
	if v, ok := optional["PageSize"]; ok {
		if PageSize, ok := v.(int); ok {
			if PageSize < 1 {
				return nil, errors.New("PageSize must be equal or greater than 1")
			}
			if PageSize > 50 {
				return nil, errors.New("PageSize must be equal or less than 50")
			}
			args.Query.Set("PageSize", fmt.Sprint(PageSize))
		} else {
			return nil, errors.New("PageSize must be int")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["VpcId"]; ok {
		if VpcId, ok := v.(string); ok {
			args.Query.Set("VpcId", VpcId)
		} else {
			return nil, errors.New("VpcId must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(DescribeVpcsResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DescribeVpcsResponse represents the response of the api DescribeVpcs.
type DescribeVpcsResponse struct {
	PageNumber int
	PageSize   int
	TotalCount int
	Vpcs       struct {
		Vpc []struct {
			CidrBlock    string
			CreationTime string
			Description  string
			RegionId     string
			Status       string
			VRouterId    string
			VpcId        string
			VpcName      string
		}
	}
}

// DescribeZones version 2014-05-26
//
// optional parameters:
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) DescribeZones(optional openapi.M) (*DescribeZonesResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "DescribeZones")
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(DescribeZonesResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DescribeZonesResponse represents the response of the api DescribeZones.
type DescribeZonesResponse struct {
	Zones struct {
		Zone []struct {
			LocalName string
			ZoneId    string
		}
	}
}

// DetachDisk version 2014-05-26
//
// required parameters:
//  name: DiskId, type: string
//  name: InstanceId, type: string
//
// optional parameters:
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) DetachDisk(DiskId, InstanceId string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "DetachDisk")
	args.Query.Set("DiskId", DiskId)
	args.Query.Set("InstanceId", InstanceId)
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// JoinSecurityGroup version 2014-05-26
//
// required parameters:
//  name: InstanceId, type: string
//  name: SecurityGroupId, type: string
//
// optional parameters:
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) JoinSecurityGroup(InstanceId, SecurityGroupId string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "JoinSecurityGroup")
	args.Query.Set("InstanceId", InstanceId)
	args.Query.Set("SecurityGroupId", SecurityGroupId)
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// LeaveSecurityGroup version 2014-05-26
//
// required parameters:
//  name: InstanceId, type: string
//  name: SecurityGroupId, type: string
//
// optional parameters:
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) LeaveSecurityGroup(InstanceId, SecurityGroupId string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "LeaveSecurityGroup")
	args.Query.Set("InstanceId", InstanceId)
	args.Query.Set("SecurityGroupId", SecurityGroupId)
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// ModifyAutoSnapshotPolicy version 2014-05-26
//
// optional parameters:
//  name: DataDiskPolicyEnabled, type: bool
//  name: DataDiskPolicyRetentionDays, type: int, min value: 1, max value: 3
//  name: DataDiskPolicyRetentionLastWeek, type: bool
//  name: DataDiskPolicyTimePeriod, type: int, min value: 1, max value: 4
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: SystemDiskPolicyEnabled, type: bool
//  name: SystemDiskPolicyRetentionDays, type: int, min value: 1, max value: 3
//  name: SystemDiskPolicyRetentionLastWeek, type: bool
//  name: SystemDiskPolicyTimePeriod, type: int, min value: 1, max value: 4
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) ModifyAutoSnapshotPolicy(optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "ModifyAutoSnapshotPolicy")
	if v, ok := optional["DataDiskPolicyEnabled"]; ok {
		if DataDiskPolicyEnabled, ok := v.(bool); ok {
			args.Query.Set("DataDiskPolicyEnabled", fmt.Sprint(DataDiskPolicyEnabled))
		} else {
			return nil, errors.New("DataDiskPolicyEnabled must be bool")
		}
	}
	if v, ok := optional["DataDiskPolicyRetentionDays"]; ok {
		if DataDiskPolicyRetentionDays, ok := v.(int); ok {
			if DataDiskPolicyRetentionDays < 1 {
				return nil, errors.New("DataDiskPolicyRetentionDays must be equal or greater than 1")
			}
			if DataDiskPolicyRetentionDays > 3 {
				return nil, errors.New("DataDiskPolicyRetentionDays must be equal or less than 3")
			}
			args.Query.Set("DataDiskPolicyRetentionDays", fmt.Sprint(DataDiskPolicyRetentionDays))
		} else {
			return nil, errors.New("DataDiskPolicyRetentionDays must be int")
		}
	}
	if v, ok := optional["DataDiskPolicyRetentionLastWeek"]; ok {
		if DataDiskPolicyRetentionLastWeek, ok := v.(bool); ok {
			args.Query.Set("DataDiskPolicyRetentionLastWeek", fmt.Sprint(DataDiskPolicyRetentionLastWeek))
		} else {
			return nil, errors.New("DataDiskPolicyRetentionLastWeek must be bool")
		}
	}
	if v, ok := optional["DataDiskPolicyTimePeriod"]; ok {
		if DataDiskPolicyTimePeriod, ok := v.(int); ok {
			if DataDiskPolicyTimePeriod < 1 {
				return nil, errors.New("DataDiskPolicyTimePeriod must be equal or greater than 1")
			}
			if DataDiskPolicyTimePeriod > 4 {
				return nil, errors.New("DataDiskPolicyTimePeriod must be equal or less than 4")
			}
			args.Query.Set("DataDiskPolicyTimePeriod", fmt.Sprint(DataDiskPolicyTimePeriod))
		} else {
			return nil, errors.New("DataDiskPolicyTimePeriod must be int")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["SystemDiskPolicyEnabled"]; ok {
		if SystemDiskPolicyEnabled, ok := v.(bool); ok {
			args.Query.Set("SystemDiskPolicyEnabled", fmt.Sprint(SystemDiskPolicyEnabled))
		} else {
			return nil, errors.New("SystemDiskPolicyEnabled must be bool")
		}
	}
	if v, ok := optional["SystemDiskPolicyRetentionDays"]; ok {
		if SystemDiskPolicyRetentionDays, ok := v.(int); ok {
			if SystemDiskPolicyRetentionDays < 1 {
				return nil, errors.New("SystemDiskPolicyRetentionDays must be equal or greater than 1")
			}
			if SystemDiskPolicyRetentionDays > 3 {
				return nil, errors.New("SystemDiskPolicyRetentionDays must be equal or less than 3")
			}
			args.Query.Set("SystemDiskPolicyRetentionDays", fmt.Sprint(SystemDiskPolicyRetentionDays))
		} else {
			return nil, errors.New("SystemDiskPolicyRetentionDays must be int")
		}
	}
	if v, ok := optional["SystemDiskPolicyRetentionLastWeek"]; ok {
		if SystemDiskPolicyRetentionLastWeek, ok := v.(bool); ok {
			args.Query.Set("SystemDiskPolicyRetentionLastWeek", fmt.Sprint(SystemDiskPolicyRetentionLastWeek))
		} else {
			return nil, errors.New("SystemDiskPolicyRetentionLastWeek must be bool")
		}
	}
	if v, ok := optional["SystemDiskPolicyTimePeriod"]; ok {
		if SystemDiskPolicyTimePeriod, ok := v.(int); ok {
			if SystemDiskPolicyTimePeriod < 1 {
				return nil, errors.New("SystemDiskPolicyTimePeriod must be equal or greater than 1")
			}
			if SystemDiskPolicyTimePeriod > 4 {
				return nil, errors.New("SystemDiskPolicyTimePeriod must be equal or less than 4")
			}
			args.Query.Set("SystemDiskPolicyTimePeriod", fmt.Sprint(SystemDiskPolicyTimePeriod))
		} else {
			return nil, errors.New("SystemDiskPolicyTimePeriod must be int")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// ModifyDiskAttribute version 2014-05-26
//
// required parameters:
//  name: DiskId, type: string
//
// optional parameters:
//  name: DeleteAutoSnapshot, type: bool
//  name: DeleteWithInstance, type: bool
//  name: Description, type: string
//  name: DiskName, type: string
//  name: EnableAutoSnapshot, type: bool
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) ModifyDiskAttribute(DiskId string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "ModifyDiskAttribute")
	args.Query.Set("DiskId", DiskId)
	if v, ok := optional["DeleteAutoSnapshot"]; ok {
		if DeleteAutoSnapshot, ok := v.(bool); ok {
			args.Query.Set("DeleteAutoSnapshot", fmt.Sprint(DeleteAutoSnapshot))
		} else {
			return nil, errors.New("DeleteAutoSnapshot must be bool")
		}
	}
	if v, ok := optional["DeleteWithInstance"]; ok {
		if DeleteWithInstance, ok := v.(bool); ok {
			args.Query.Set("DeleteWithInstance", fmt.Sprint(DeleteWithInstance))
		} else {
			return nil, errors.New("DeleteWithInstance must be bool")
		}
	}
	if v, ok := optional["Description"]; ok {
		if Description, ok := v.(string); ok {
			args.Query.Set("Description", Description)
		} else {
			return nil, errors.New("Description must be string")
		}
	}
	if v, ok := optional["DiskName"]; ok {
		if DiskName, ok := v.(string); ok {
			args.Query.Set("DiskName", DiskName)
		} else {
			return nil, errors.New("DiskName must be string")
		}
	}
	if v, ok := optional["EnableAutoSnapshot"]; ok {
		if EnableAutoSnapshot, ok := v.(bool); ok {
			args.Query.Set("EnableAutoSnapshot", fmt.Sprint(EnableAutoSnapshot))
		} else {
			return nil, errors.New("EnableAutoSnapshot must be bool")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// ModifyEipAddressAttribute version 2014-05-26
//
// required parameters:
//  name: AllocationId, type: string
//  name: Bandwidth, type: string
//
// optional parameters:
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) ModifyEipAddressAttribute(AllocationId, Bandwidth string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "ModifyEipAddressAttribute")
	args.Query.Set("AllocationId", AllocationId)
	args.Query.Set("Bandwidth", Bandwidth)
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// ModifyHaVipAttribute version 2014-05-26
//
// required parameters:
//  name: HaVipId, type: string
//
// optional parameters:
//  name: ClientToken, type: string
//  name: Description, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) ModifyHaVipAttribute(HaVipId string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "ModifyHaVipAttribute")
	args.Query.Set("HaVipId", HaVipId)
	if v, ok := optional["ClientToken"]; ok {
		if ClientToken, ok := v.(string); ok {
			args.Query.Set("ClientToken", ClientToken)
		} else {
			return nil, errors.New("ClientToken must be string")
		}
	}
	if v, ok := optional["Description"]; ok {
		if Description, ok := v.(string); ok {
			args.Query.Set("Description", Description)
		} else {
			return nil, errors.New("Description must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// ModifyImageAttribute version 2014-05-26
//
// required parameters:
//  name: ImageId, type: string
//
// optional parameters:
//  name: Description, type: string
//  name: ImageName, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) ModifyImageAttribute(ImageId string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "ModifyImageAttribute")
	args.Query.Set("ImageId", ImageId)
	if v, ok := optional["Description"]; ok {
		if Description, ok := v.(string); ok {
			args.Query.Set("Description", Description)
		} else {
			return nil, errors.New("Description must be string")
		}
	}
	if v, ok := optional["ImageName"]; ok {
		if ImageName, ok := v.(string); ok {
			args.Query.Set("ImageName", ImageName)
		} else {
			return nil, errors.New("ImageName must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// ModifyImageShareGroupPermission version 2014-05-26
//
// required parameters:
//  name: ImageId, type: string
//
// optional parameters:
//  name: AddGroup.1, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: RemoveGroup.1, type: string
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) ModifyImageShareGroupPermission(ImageId string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "ModifyImageShareGroupPermission")
	args.Query.Set("ImageId", ImageId)
	if v, ok := optional["AddGroup.1"]; ok {
		if AddGroup1, ok := v.(string); ok {
			args.Query.Set("AddGroup.1", AddGroup1)
		} else {
			return nil, errors.New("AddGroup.1 must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["RemoveGroup.1"]; ok {
		if RemoveGroup1, ok := v.(string); ok {
			args.Query.Set("RemoveGroup.1", RemoveGroup1)
		} else {
			return nil, errors.New("RemoveGroup.1 must be string")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// ModifyImageSharePermission version 2014-05-26
//
// required parameters:
//  name: ImageId, type: string
//
// optional parameters:
//  name: AddAccount.1, type: string
//  name: AddAccount.10, type: string
//  name: AddAccount.2, type: string
//  name: AddAccount.3, type: string
//  name: AddAccount.4, type: string
//  name: AddAccount.5, type: string
//  name: AddAccount.6, type: string
//  name: AddAccount.7, type: string
//  name: AddAccount.8, type: string
//  name: AddAccount.9, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: RemoveAccount.1, type: string
//  name: RemoveAccount.10, type: string
//  name: RemoveAccount.2, type: string
//  name: RemoveAccount.3, type: string
//  name: RemoveAccount.4, type: string
//  name: RemoveAccount.5, type: string
//  name: RemoveAccount.6, type: string
//  name: RemoveAccount.7, type: string
//  name: RemoveAccount.8, type: string
//  name: RemoveAccount.9, type: string
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) ModifyImageSharePermission(ImageId string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "ModifyImageSharePermission")
	args.Query.Set("ImageId", ImageId)
	if v, ok := optional["AddAccount.1"]; ok {
		if AddAccount1, ok := v.(string); ok {
			args.Query.Set("AddAccount.1", AddAccount1)
		} else {
			return nil, errors.New("AddAccount.1 must be string")
		}
	}
	if v, ok := optional["AddAccount.10"]; ok {
		if AddAccount10, ok := v.(string); ok {
			args.Query.Set("AddAccount.10", AddAccount10)
		} else {
			return nil, errors.New("AddAccount.10 must be string")
		}
	}
	if v, ok := optional["AddAccount.2"]; ok {
		if AddAccount2, ok := v.(string); ok {
			args.Query.Set("AddAccount.2", AddAccount2)
		} else {
			return nil, errors.New("AddAccount.2 must be string")
		}
	}
	if v, ok := optional["AddAccount.3"]; ok {
		if AddAccount3, ok := v.(string); ok {
			args.Query.Set("AddAccount.3", AddAccount3)
		} else {
			return nil, errors.New("AddAccount.3 must be string")
		}
	}
	if v, ok := optional["AddAccount.4"]; ok {
		if AddAccount4, ok := v.(string); ok {
			args.Query.Set("AddAccount.4", AddAccount4)
		} else {
			return nil, errors.New("AddAccount.4 must be string")
		}
	}
	if v, ok := optional["AddAccount.5"]; ok {
		if AddAccount5, ok := v.(string); ok {
			args.Query.Set("AddAccount.5", AddAccount5)
		} else {
			return nil, errors.New("AddAccount.5 must be string")
		}
	}
	if v, ok := optional["AddAccount.6"]; ok {
		if AddAccount6, ok := v.(string); ok {
			args.Query.Set("AddAccount.6", AddAccount6)
		} else {
			return nil, errors.New("AddAccount.6 must be string")
		}
	}
	if v, ok := optional["AddAccount.7"]; ok {
		if AddAccount7, ok := v.(string); ok {
			args.Query.Set("AddAccount.7", AddAccount7)
		} else {
			return nil, errors.New("AddAccount.7 must be string")
		}
	}
	if v, ok := optional["AddAccount.8"]; ok {
		if AddAccount8, ok := v.(string); ok {
			args.Query.Set("AddAccount.8", AddAccount8)
		} else {
			return nil, errors.New("AddAccount.8 must be string")
		}
	}
	if v, ok := optional["AddAccount.9"]; ok {
		if AddAccount9, ok := v.(string); ok {
			args.Query.Set("AddAccount.9", AddAccount9)
		} else {
			return nil, errors.New("AddAccount.9 must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["RemoveAccount.1"]; ok {
		if RemoveAccount1, ok := v.(string); ok {
			args.Query.Set("RemoveAccount.1", RemoveAccount1)
		} else {
			return nil, errors.New("RemoveAccount.1 must be string")
		}
	}
	if v, ok := optional["RemoveAccount.10"]; ok {
		if RemoveAccount10, ok := v.(string); ok {
			args.Query.Set("RemoveAccount.10", RemoveAccount10)
		} else {
			return nil, errors.New("RemoveAccount.10 must be string")
		}
	}
	if v, ok := optional["RemoveAccount.2"]; ok {
		if RemoveAccount2, ok := v.(string); ok {
			args.Query.Set("RemoveAccount.2", RemoveAccount2)
		} else {
			return nil, errors.New("RemoveAccount.2 must be string")
		}
	}
	if v, ok := optional["RemoveAccount.3"]; ok {
		if RemoveAccount3, ok := v.(string); ok {
			args.Query.Set("RemoveAccount.3", RemoveAccount3)
		} else {
			return nil, errors.New("RemoveAccount.3 must be string")
		}
	}
	if v, ok := optional["RemoveAccount.4"]; ok {
		if RemoveAccount4, ok := v.(string); ok {
			args.Query.Set("RemoveAccount.4", RemoveAccount4)
		} else {
			return nil, errors.New("RemoveAccount.4 must be string")
		}
	}
	if v, ok := optional["RemoveAccount.5"]; ok {
		if RemoveAccount5, ok := v.(string); ok {
			args.Query.Set("RemoveAccount.5", RemoveAccount5)
		} else {
			return nil, errors.New("RemoveAccount.5 must be string")
		}
	}
	if v, ok := optional["RemoveAccount.6"]; ok {
		if RemoveAccount6, ok := v.(string); ok {
			args.Query.Set("RemoveAccount.6", RemoveAccount6)
		} else {
			return nil, errors.New("RemoveAccount.6 must be string")
		}
	}
	if v, ok := optional["RemoveAccount.7"]; ok {
		if RemoveAccount7, ok := v.(string); ok {
			args.Query.Set("RemoveAccount.7", RemoveAccount7)
		} else {
			return nil, errors.New("RemoveAccount.7 must be string")
		}
	}
	if v, ok := optional["RemoveAccount.8"]; ok {
		if RemoveAccount8, ok := v.(string); ok {
			args.Query.Set("RemoveAccount.8", RemoveAccount8)
		} else {
			return nil, errors.New("RemoveAccount.8 must be string")
		}
	}
	if v, ok := optional["RemoveAccount.9"]; ok {
		if RemoveAccount9, ok := v.(string); ok {
			args.Query.Set("RemoveAccount.9", RemoveAccount9)
		} else {
			return nil, errors.New("RemoveAccount.9 must be string")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// ModifyInstanceAttribute version 2014-05-26
//
// required parameters:
//  name: InstanceId, type: string
//
// optional parameters:
//  name: Description, type: string
//  name: HostName, type: string
//  name: InstanceName, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: Password, type: string
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) ModifyInstanceAttribute(InstanceId string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "ModifyInstanceAttribute")
	args.Query.Set("InstanceId", InstanceId)
	if v, ok := optional["Description"]; ok {
		if Description, ok := v.(string); ok {
			args.Query.Set("Description", Description)
		} else {
			return nil, errors.New("Description must be string")
		}
	}
	if v, ok := optional["HostName"]; ok {
		if HostName, ok := v.(string); ok {
			args.Query.Set("HostName", HostName)
		} else {
			return nil, errors.New("HostName must be string")
		}
	}
	if v, ok := optional["InstanceName"]; ok {
		if InstanceName, ok := v.(string); ok {
			args.Query.Set("InstanceName", InstanceName)
		} else {
			return nil, errors.New("InstanceName must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["Password"]; ok {
		if Password, ok := v.(string); ok {
			args.Query.Set("Password", Password)
		} else {
			return nil, errors.New("Password must be string")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// ModifyInstanceNetworkSpec version 2014-05-26
//
// required parameters:
//  name: InstanceId, type: string
//
// optional parameters:
//  name: InternetMaxBandwidthIn, type: int
//  name: InternetMaxBandwidthOut, type: int
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) ModifyInstanceNetworkSpec(InstanceId string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "ModifyInstanceNetworkSpec")
	args.Query.Set("InstanceId", InstanceId)
	if v, ok := optional["InternetMaxBandwidthIn"]; ok {
		if InternetMaxBandwidthIn, ok := v.(int); ok {
			args.Query.Set("InternetMaxBandwidthIn", fmt.Sprint(InternetMaxBandwidthIn))
		} else {
			return nil, errors.New("InternetMaxBandwidthIn must be int")
		}
	}
	if v, ok := optional["InternetMaxBandwidthOut"]; ok {
		if InternetMaxBandwidthOut, ok := v.(int); ok {
			args.Query.Set("InternetMaxBandwidthOut", fmt.Sprint(InternetMaxBandwidthOut))
		} else {
			return nil, errors.New("InternetMaxBandwidthOut must be int")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// ModifyInstanceVncPasswd version 2014-05-26
//
// required parameters:
//  name: InstanceId, type: string
//  name: VncPassword, type: string
//
// optional parameters:
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) ModifyInstanceVncPasswd(InstanceId, VncPassword string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "ModifyInstanceVncPasswd")
	args.Query.Set("InstanceId", InstanceId)
	args.Query.Set("VncPassword", VncPassword)
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// ModifyInstanceVpcAttribute version 2014-05-26
//
// required parameters:
//  name: InstanceId, type: string
//  name: VSwitchId, type: string
//
// optional parameters:
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: PrivateIpAddress, type: string
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) ModifyInstanceVpcAttribute(InstanceId, VSwitchId string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "ModifyInstanceVpcAttribute")
	args.Query.Set("InstanceId", InstanceId)
	args.Query.Set("VSwitchId", VSwitchId)
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["PrivateIpAddress"]; ok {
		if PrivateIpAddress, ok := v.(string); ok {
			args.Query.Set("PrivateIpAddress", PrivateIpAddress)
		} else {
			return nil, errors.New("PrivateIpAddress must be string")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// ModifySecurityGroupAttribute version 2014-05-26
//
// required parameters:
//  name: SecurityGroupId, type: string
//
// optional parameters:
//  name: Description, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: SecurityGroupName, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) ModifySecurityGroupAttribute(SecurityGroupId string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "ModifySecurityGroupAttribute")
	args.Query.Set("SecurityGroupId", SecurityGroupId)
	if v, ok := optional["Description"]; ok {
		if Description, ok := v.(string); ok {
			args.Query.Set("Description", Description)
		} else {
			return nil, errors.New("Description must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["SecurityGroupName"]; ok {
		if SecurityGroupName, ok := v.(string); ok {
			args.Query.Set("SecurityGroupName", SecurityGroupName)
		} else {
			return nil, errors.New("SecurityGroupName must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// ModifySnapshotAttribute version 2014-05-26
//
// required parameters:
//  name: SnapshotId, type: string
//
// optional parameters:
//  name: Description, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: SnapshotName, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) ModifySnapshotAttribute(SnapshotId string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "ModifySnapshotAttribute")
	args.Query.Set("SnapshotId", SnapshotId)
	if v, ok := optional["Description"]; ok {
		if Description, ok := v.(string); ok {
			args.Query.Set("Description", Description)
		} else {
			return nil, errors.New("Description must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["SnapshotName"]; ok {
		if SnapshotName, ok := v.(string); ok {
			args.Query.Set("SnapshotName", SnapshotName)
		} else {
			return nil, errors.New("SnapshotName must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// ModifyVRouterAttribute version 2014-05-26
//
// required parameters:
//  name: VRouterId, type: string
//
// optional parameters:
//  name: Description, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: VRouterName, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) ModifyVRouterAttribute(VRouterId string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "ModifyVRouterAttribute")
	args.Query.Set("VRouterId", VRouterId)
	if v, ok := optional["Description"]; ok {
		if Description, ok := v.(string); ok {
			args.Query.Set("Description", Description)
		} else {
			return nil, errors.New("Description must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["VRouterName"]; ok {
		if VRouterName, ok := v.(string); ok {
			args.Query.Set("VRouterName", VRouterName)
		} else {
			return nil, errors.New("VRouterName must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// ModifyVSwitchAttribute version 2014-05-26
//
// required parameters:
//  name: VSwitchId, type: string
//
// optional parameters:
//  name: Description, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: VSwitchName, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) ModifyVSwitchAttribute(VSwitchId string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "ModifyVSwitchAttribute")
	args.Query.Set("VSwitchId", VSwitchId)
	if v, ok := optional["Description"]; ok {
		if Description, ok := v.(string); ok {
			args.Query.Set("Description", Description)
		} else {
			return nil, errors.New("Description must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["VSwitchName"]; ok {
		if VSwitchName, ok := v.(string); ok {
			args.Query.Set("VSwitchName", VSwitchName)
		} else {
			return nil, errors.New("VSwitchName must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// ModifyVpcAttribute version 2014-05-26
//
// required parameters:
//  name: VpcId, type: string
//
// optional parameters:
//  name: Description, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: UserCidr, type: string
//  name: VpcName, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) ModifyVpcAttribute(VpcId string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "ModifyVpcAttribute")
	args.Query.Set("VpcId", VpcId)
	if v, ok := optional["Description"]; ok {
		if Description, ok := v.(string); ok {
			args.Query.Set("Description", Description)
		} else {
			return nil, errors.New("Description must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["UserCidr"]; ok {
		if UserCidr, ok := v.(string); ok {
			args.Query.Set("UserCidr", UserCidr)
		} else {
			return nil, errors.New("UserCidr must be string")
		}
	}
	if v, ok := optional["VpcName"]; ok {
		if VpcName, ok := v.(string); ok {
			args.Query.Set("VpcName", VpcName)
		} else {
			return nil, errors.New("VpcName must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// ReInitDisk version 2014-05-26
//
// required parameters:
//  name: DiskId, type: string
//
// optional parameters:
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) ReInitDisk(DiskId string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "ReInitDisk")
	args.Query.Set("DiskId", DiskId)
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// RebootInstance version 2014-05-26
//
// required parameters:
//  name: InstanceId, type: string
//
// optional parameters:
//  name: ForceStop, type: bool
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) RebootInstance(InstanceId string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "RebootInstance")
	args.Query.Set("InstanceId", InstanceId)
	if v, ok := optional["ForceStop"]; ok {
		if ForceStop, ok := v.(bool); ok {
			args.Query.Set("ForceStop", fmt.Sprint(ForceStop))
		} else {
			return nil, errors.New("ForceStop must be bool")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// ReleaseEipAddress version 2014-05-26
//
// required parameters:
//  name: AllocationId, type: string
//
// optional parameters:
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) ReleaseEipAddress(AllocationId string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "ReleaseEipAddress")
	args.Query.Set("AllocationId", AllocationId)
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// RemoveTags version 2014-05-26
//
// optional parameters:
//  name: OwnerId, type: int64
//  name: ResourceId, type: string
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: ResourceType, type: string
//  name: Tag.1.Key, type: string
//  name: Tag.1.Value, type: string
//  name: Tag.2.Key, type: string
//  name: Tag.2.Value, type: string
//  name: Tag.3.Key, type: string
//  name: Tag.3.Value, type: string
//  name: Tag.4.Key, type: string
//  name: Tag.4.Value, type: string
//  name: Tag.5.Key, type: string
//  name: Tag.5.Value, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) RemoveTags(optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "RemoveTags")
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceId"]; ok {
		if ResourceId, ok := v.(string); ok {
			args.Query.Set("ResourceId", ResourceId)
		} else {
			return nil, errors.New("ResourceId must be string")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceType"]; ok {
		if ResourceType, ok := v.(string); ok {
			args.Query.Set("ResourceType", ResourceType)
		} else {
			return nil, errors.New("ResourceType must be string")
		}
	}
	if v, ok := optional["Tag.1.Key"]; ok {
		if Tag1Key, ok := v.(string); ok {
			args.Query.Set("Tag.1.Key", Tag1Key)
		} else {
			return nil, errors.New("Tag.1.Key must be string")
		}
	}
	if v, ok := optional["Tag.1.Value"]; ok {
		if Tag1Value, ok := v.(string); ok {
			args.Query.Set("Tag.1.Value", Tag1Value)
		} else {
			return nil, errors.New("Tag.1.Value must be string")
		}
	}
	if v, ok := optional["Tag.2.Key"]; ok {
		if Tag2Key, ok := v.(string); ok {
			args.Query.Set("Tag.2.Key", Tag2Key)
		} else {
			return nil, errors.New("Tag.2.Key must be string")
		}
	}
	if v, ok := optional["Tag.2.Value"]; ok {
		if Tag2Value, ok := v.(string); ok {
			args.Query.Set("Tag.2.Value", Tag2Value)
		} else {
			return nil, errors.New("Tag.2.Value must be string")
		}
	}
	if v, ok := optional["Tag.3.Key"]; ok {
		if Tag3Key, ok := v.(string); ok {
			args.Query.Set("Tag.3.Key", Tag3Key)
		} else {
			return nil, errors.New("Tag.3.Key must be string")
		}
	}
	if v, ok := optional["Tag.3.Value"]; ok {
		if Tag3Value, ok := v.(string); ok {
			args.Query.Set("Tag.3.Value", Tag3Value)
		} else {
			return nil, errors.New("Tag.3.Value must be string")
		}
	}
	if v, ok := optional["Tag.4.Key"]; ok {
		if Tag4Key, ok := v.(string); ok {
			args.Query.Set("Tag.4.Key", Tag4Key)
		} else {
			return nil, errors.New("Tag.4.Key must be string")
		}
	}
	if v, ok := optional["Tag.4.Value"]; ok {
		if Tag4Value, ok := v.(string); ok {
			args.Query.Set("Tag.4.Value", Tag4Value)
		} else {
			return nil, errors.New("Tag.4.Value must be string")
		}
	}
	if v, ok := optional["Tag.5.Key"]; ok {
		if Tag5Key, ok := v.(string); ok {
			args.Query.Set("Tag.5.Key", Tag5Key)
		} else {
			return nil, errors.New("Tag.5.Key must be string")
		}
	}
	if v, ok := optional["Tag.5.Value"]; ok {
		if Tag5Value, ok := v.(string); ok {
			args.Query.Set("Tag.5.Value", Tag5Value)
		} else {
			return nil, errors.New("Tag.5.Value must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// RenewInstance version 2014-05-26
//
// required parameters:
//  name: InstanceId, type: string
//  name: Period, type: int
//
// optional parameters:
//  name: CovertDiskPortable.1.DiskId, type: string
//  name: CovertDiskPortable.2.DiskId, type: string
//  name: CovertDiskPortable.3.DiskId, type: string
//  name: CovertDiskPortable.4.DiskId, type: string
//  name: InstanceType, type: string
//  name: InternetChargeType, type: string
//  name: InternetMaxBandwidthOut, type: int, min value: 0, max value: 200
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: RebootTime, type: string
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) RenewInstance(InstanceId string, Period int, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "RenewInstance")
	args.Query.Set("InstanceId", InstanceId)
	args.Query.Set("Period", fmt.Sprint(Period))
	if v, ok := optional["CovertDiskPortable.1.DiskId"]; ok {
		if CovertDiskPortable1DiskId, ok := v.(string); ok {
			args.Query.Set("CovertDiskPortable.1.DiskId", CovertDiskPortable1DiskId)
		} else {
			return nil, errors.New("CovertDiskPortable.1.DiskId must be string")
		}
	}
	if v, ok := optional["CovertDiskPortable.2.DiskId"]; ok {
		if CovertDiskPortable2DiskId, ok := v.(string); ok {
			args.Query.Set("CovertDiskPortable.2.DiskId", CovertDiskPortable2DiskId)
		} else {
			return nil, errors.New("CovertDiskPortable.2.DiskId must be string")
		}
	}
	if v, ok := optional["CovertDiskPortable.3.DiskId"]; ok {
		if CovertDiskPortable3DiskId, ok := v.(string); ok {
			args.Query.Set("CovertDiskPortable.3.DiskId", CovertDiskPortable3DiskId)
		} else {
			return nil, errors.New("CovertDiskPortable.3.DiskId must be string")
		}
	}
	if v, ok := optional["CovertDiskPortable.4.DiskId"]; ok {
		if CovertDiskPortable4DiskId, ok := v.(string); ok {
			args.Query.Set("CovertDiskPortable.4.DiskId", CovertDiskPortable4DiskId)
		} else {
			return nil, errors.New("CovertDiskPortable.4.DiskId must be string")
		}
	}
	if v, ok := optional["InstanceType"]; ok {
		if InstanceType, ok := v.(string); ok {
			args.Query.Set("InstanceType", InstanceType)
		} else {
			return nil, errors.New("InstanceType must be string")
		}
	}
	if v, ok := optional["InternetChargeType"]; ok {
		if InternetChargeType, ok := v.(string); ok {
			args.Query.Set("InternetChargeType", InternetChargeType)
		} else {
			return nil, errors.New("InternetChargeType must be string")
		}
	}
	if v, ok := optional["InternetMaxBandwidthOut"]; ok {
		if InternetMaxBandwidthOut, ok := v.(int); ok {
			if InternetMaxBandwidthOut < 0 {
				return nil, errors.New("InternetMaxBandwidthOut must be equal or greater than 0")
			}
			if InternetMaxBandwidthOut > 200 {
				return nil, errors.New("InternetMaxBandwidthOut must be equal or less than 200")
			}
			args.Query.Set("InternetMaxBandwidthOut", fmt.Sprint(InternetMaxBandwidthOut))
		} else {
			return nil, errors.New("InternetMaxBandwidthOut must be int")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["RebootTime"]; ok {
		if RebootTime, ok := v.(string); ok {
			args.Query.Set("RebootTime", RebootTime)
		} else {
			return nil, errors.New("RebootTime must be string")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// ReplaceSystemDisk version 2014-05-26
//
// required parameters:
//  name: ImageId, type: string
//  name: InstanceId, type: string
//
// optional parameters:
//  name: ClientToken, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: UseAdditionalService, type: bool
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) ReplaceSystemDisk(ImageId, InstanceId string, optional openapi.M) (*ReplaceSystemDiskResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "ReplaceSystemDisk")
	args.Query.Set("ImageId", ImageId)
	args.Query.Set("InstanceId", InstanceId)
	if v, ok := optional["ClientToken"]; ok {
		if ClientToken, ok := v.(string); ok {
			args.Query.Set("ClientToken", ClientToken)
		} else {
			return nil, errors.New("ClientToken must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["UseAdditionalService"]; ok {
		if UseAdditionalService, ok := v.(bool); ok {
			args.Query.Set("UseAdditionalService", fmt.Sprint(UseAdditionalService))
		} else {
			return nil, errors.New("UseAdditionalService must be bool")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(ReplaceSystemDiskResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// ReplaceSystemDiskResponse represents the response of the api ReplaceSystemDisk.
type ReplaceSystemDiskResponse struct {
	DiskId string
}

// ResetDisk version 2014-05-26
//
// required parameters:
//  name: DiskId, type: string
//  name: SnapshotId, type: string
//
// optional parameters:
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) ResetDisk(DiskId, SnapshotId string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "ResetDisk")
	args.Query.Set("DiskId", DiskId)
	args.Query.Set("SnapshotId", SnapshotId)
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// ResizeDisk version 2014-05-26
//
// required parameters:
//  name: DiskId, type: string
//  name: NewSize, type: int, min value: 5, max value: 2048
//
// optional parameters:
//  name: ClientToken, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) ResizeDisk(DiskId string, NewSize int, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "ResizeDisk")
	args.Query.Set("DiskId", DiskId)
	if NewSize < 5 {
		return nil, errors.New("NewSize must be equal or greater than 5")
	}
	if NewSize > 2048 {
		return nil, errors.New("NewSize must be equal or less than 2048")
	}
	args.Query.Set("NewSize", fmt.Sprint(NewSize))
	if v, ok := optional["ClientToken"]; ok {
		if ClientToken, ok := v.(string); ok {
			args.Query.Set("ClientToken", ClientToken)
		} else {
			return nil, errors.New("ClientToken must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// RevokeSecurityGroup version 2014-05-26
//
// required parameters:
//  name: IpProtocol, type: string
//  name: PortRange, type: string
//  name: SecurityGroupId, type: string
//
// optional parameters:
//  name: NicType, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: Policy, type: string
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: SourceCidrIp, type: string
//  name: SourceGroupId, type: string
//  name: SourceGroupOwnerAccount, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) RevokeSecurityGroup(IpProtocol, PortRange, SecurityGroupId string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "RevokeSecurityGroup")
	args.Query.Set("IpProtocol", IpProtocol)
	args.Query.Set("PortRange", PortRange)
	args.Query.Set("SecurityGroupId", SecurityGroupId)
	if v, ok := optional["NicType"]; ok {
		if NicType, ok := v.(string); ok {
			args.Query.Set("NicType", NicType)
		} else {
			return nil, errors.New("NicType must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["Policy"]; ok {
		if Policy, ok := v.(string); ok {
			args.Query.Set("Policy", Policy)
		} else {
			return nil, errors.New("Policy must be string")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["SourceCidrIp"]; ok {
		if SourceCidrIp, ok := v.(string); ok {
			args.Query.Set("SourceCidrIp", SourceCidrIp)
		} else {
			return nil, errors.New("SourceCidrIp must be string")
		}
	}
	if v, ok := optional["SourceGroupId"]; ok {
		if SourceGroupId, ok := v.(string); ok {
			args.Query.Set("SourceGroupId", SourceGroupId)
		} else {
			return nil, errors.New("SourceGroupId must be string")
		}
	}
	if v, ok := optional["SourceGroupOwnerAccount"]; ok {
		if SourceGroupOwnerAccount, ok := v.(string); ok {
			args.Query.Set("SourceGroupOwnerAccount", SourceGroupOwnerAccount)
		} else {
			return nil, errors.New("SourceGroupOwnerAccount must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// RevokeSecurityGroupEgress version 2014-05-26
//
// required parameters:
//  name: IpProtocol, type: string
//  name: PortRange, type: string
//  name: SecurityGroupId, type: string
//
// optional parameters:
//  name: DestCidrIp, type: string
//  name: DestGroupId, type: string
//  name: DestGroupOwnerAccount, type: string
//  name: NicType, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: Policy, type: string
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) RevokeSecurityGroupEgress(IpProtocol, PortRange, SecurityGroupId string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "RevokeSecurityGroupEgress")
	args.Query.Set("IpProtocol", IpProtocol)
	args.Query.Set("PortRange", PortRange)
	args.Query.Set("SecurityGroupId", SecurityGroupId)
	if v, ok := optional["DestCidrIp"]; ok {
		if DestCidrIp, ok := v.(string); ok {
			args.Query.Set("DestCidrIp", DestCidrIp)
		} else {
			return nil, errors.New("DestCidrIp must be string")
		}
	}
	if v, ok := optional["DestGroupId"]; ok {
		if DestGroupId, ok := v.(string); ok {
			args.Query.Set("DestGroupId", DestGroupId)
		} else {
			return nil, errors.New("DestGroupId must be string")
		}
	}
	if v, ok := optional["DestGroupOwnerAccount"]; ok {
		if DestGroupOwnerAccount, ok := v.(string); ok {
			args.Query.Set("DestGroupOwnerAccount", DestGroupOwnerAccount)
		} else {
			return nil, errors.New("DestGroupOwnerAccount must be string")
		}
	}
	if v, ok := optional["NicType"]; ok {
		if NicType, ok := v.(string); ok {
			args.Query.Set("NicType", NicType)
		} else {
			return nil, errors.New("NicType must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["Policy"]; ok {
		if Policy, ok := v.(string); ok {
			args.Query.Set("Policy", Policy)
		} else {
			return nil, errors.New("Policy must be string")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// StartInstance version 2014-05-26
//
// required parameters:
//  name: InstanceId, type: string
//
// optional parameters:
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) StartInstance(InstanceId string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "StartInstance")
	args.Query.Set("InstanceId", InstanceId)
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// StopInstance version 2014-05-26
//
// required parameters:
//  name: InstanceId, type: string
//
// optional parameters:
//  name: ForceStop, type: bool
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) StopInstance(InstanceId string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "StopInstance")
	args.Query.Set("InstanceId", InstanceId)
	if v, ok := optional["ForceStop"]; ok {
		if ForceStop, ok := v.(bool); ok {
			args.Query.Set("ForceStop", fmt.Sprint(ForceStop))
		} else {
			return nil, errors.New("ForceStop must be bool")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// UnassociateEipAddress version 2014-05-26
//
// required parameters:
//  name: AllocationId, type: string
//  name: InstanceId, type: string
//
// optional parameters:
//  name: InstanceType, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) UnassociateEipAddress(AllocationId, InstanceId string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "UnassociateEipAddress")
	args.Query.Set("AllocationId", AllocationId)
	args.Query.Set("InstanceId", InstanceId)
	if v, ok := optional["InstanceType"]; ok {
		if InstanceType, ok := v.(string); ok {
			args.Query.Set("InstanceType", InstanceType)
		} else {
			return nil, errors.New("InstanceType must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// UnassociateHaVip version 2014-05-26
//
// required parameters:
//  name: HaVipId, type: string
//  name: InstanceId, type: string
//
// optional parameters:
//  name: ClientToken, type: string
//  name: Force, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) UnassociateHaVip(HaVipId, InstanceId string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "UnassociateHaVip")
	args.Query.Set("HaVipId", HaVipId)
	args.Query.Set("InstanceId", InstanceId)
	if v, ok := optional["ClientToken"]; ok {
		if ClientToken, ok := v.(string); ok {
			args.Query.Set("ClientToken", ClientToken)
		} else {
			return nil, errors.New("ClientToken must be string")
		}
	}
	if v, ok := optional["Force"]; ok {
		if Force, ok := v.(string); ok {
			args.Query.Set("Force", Force)
		} else {
			return nil, errors.New("Force must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}
