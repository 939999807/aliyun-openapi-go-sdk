// Copyright 2015 Chen Xianren. All rights reserved.
// Code generated by openapi-meta; DO NOT EDIT

package ace // import "github.com/cxr29/aliyun-openapi-go-sdk/apis/ace/v20150713"

import (
	"errors"
	"fmt"

	"github.com/cxr29/aliyun-openapi-go-sdk"
)

var (
	_ = errors.New("")
	_ = fmt.Sprint("")
)

type API struct {
	openapi.Service
}

func New(accessKeyId, accessKeySecret string) API {
	return API{openapi.NewService(accessKeyId, accessKeySecret)}
}

func NewParams() openapi.Params {
	args := openapi.NewParams()
	args.Product = Product
	args.Style = Style
	args.Version = Version
	return args
}

const (
	Product = "Ace"
	Style   = "RPC"
	Version = "2015-07-13"
)

// DescribeAppLogs version 2015-07-13
//
// required parameters:
//  name: AppId, type: string
//  name: EndTime, type: string
//  name: StartTime, type: string
//
// optional parameters:
//  name: PageNumber, type: int, min value: 1, max value: 2147483647
//  name: PageSize, type: int, min value: 1, max value: 100
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) DescribeAppLogs(AppId, EndTime, StartTime string, optional openapi.M) (*DescribeAppLogsResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "DescribeAppLogs")
	args.Query.Set("AppId", AppId)
	args.Query.Set("EndTime", EndTime)
	args.Query.Set("StartTime", StartTime)
	if v, ok := optional["PageNumber"]; ok {
		if PageNumber, ok := v.(int); ok {
			if PageNumber < 1 {
				return nil, errors.New("PageNumber must be equal or greater than 1")
			}
			if PageNumber > 2147483647 {
				return nil, errors.New("PageNumber must be equal or less than 2147483647")
			}
			args.Query.Set("PageNumber", fmt.Sprint(PageNumber))
		} else {
			return nil, errors.New("PageNumber must be int")
		}
	}
	if v, ok := optional["PageSize"]; ok {
		if PageSize, ok := v.(int); ok {
			if PageSize < 1 {
				return nil, errors.New("PageSize must be equal or greater than 1")
			}
			if PageSize > 100 {
				return nil, errors.New("PageSize must be equal or less than 100")
			}
			args.Query.Set("PageSize", fmt.Sprint(PageSize))
		} else {
			return nil, errors.New("PageSize must be int")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(DescribeAppLogsResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DescribeAppLogsResponse represents the response of the api DescribeAppLogs.
type DescribeAppLogsResponse struct {
	Items struct {
		AppLog []struct {
			LogContent string
			LogTime    string
		}
	}
	PageRecordCount int
}

// GetMonitorData version 2015-07-13
//
// required parameters:
//  name: AppId, type: int64
//  name: EndTime, type: string
//  name: Item, type: string
//  name: StartTime, type: string
//
// optional parameters:
//  name: CurPage, type: int
//  name: PageSize, type: int
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) GetMonitorData(AppId int64, EndTime, Item, StartTime string, optional openapi.M) (*GetMonitorDataResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "GetMonitorData")
	args.Query.Set("AppId", fmt.Sprint(AppId))
	args.Query.Set("EndTime", EndTime)
	args.Query.Set("Item", Item)
	args.Query.Set("StartTime", StartTime)
	if v, ok := optional["CurPage"]; ok {
		if CurPage, ok := v.(int); ok {
			args.Query.Set("CurPage", fmt.Sprint(CurPage))
		} else {
			return nil, errors.New("CurPage must be int")
		}
	}
	if v, ok := optional["PageSize"]; ok {
		if PageSize, ok := v.(int); ok {
			args.Query.Set("PageSize", fmt.Sprint(PageSize))
		} else {
			return nil, errors.New("PageSize must be int")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(GetMonitorDataResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// GetMonitorDataResponse represents the response of the api GetMonitorData.
type GetMonitorDataResponse struct {
	Data struct {
		Item []struct {
			Timestamp int64
			Value     float32
		}
	}
	NextPageNum string
}
