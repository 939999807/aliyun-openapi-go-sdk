// Copyright 2015 Chen Xianren. All rights reserved.
// Code generated by openapi-meta; DO NOT EDIT

package bss

import (
	"errors"
	"fmt"

	"git.oschina.net/cxr29/aliyun-openapi-go-sdk"
)

var (
	_ = errors.New("")
	_ = fmt.Sprint("")
)

type API struct {
	openapi.Service
}

func New(accessKeyId, accessKeySecret string) API {
	return API{openapi.NewService(accessKeyId, accessKeySecret)}
}

func NewParams() openapi.Params {
	args := openapi.NewParams()
	args.Product = Product
	args.Style = Style
	args.Version = Version
	return args
}

const (
	Product = "Bss"
	Style   = "RPC"
	Version = "2014-07-14"
)

// DescribeCashDetail version 2014-07-14
//
// optional parameters:
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
func (api API) DescribeCashDetail(optional openapi.M) (*DescribeCashDetailResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "DescribeCashDetail")
	args.Scheme = "https"
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}

	result := new(DescribeCashDetailResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DescribeCashDetailResponse represents the response of the api DescribeCashDetail.
type DescribeCashDetailResponse struct {
	AmountOwed           string
	AvailableCredit      string
	BalanceAmount        string
	CreditCardAmount     string
	CreditLimit          string
	EnableThresholdAlert string
	FrozenAmount         string
	MiniAlertThreshold   int64
	RemmitanceAmount     string
}

// DescribeCouponDetail version 2014-07-14
//
// optional parameters:
//  name: CouponNumber, type: string
//  name: _method, type: string, optional values: GET|POSTS
//  name: _region, type: string
func (api API) DescribeCouponDetail(optional openapi.M) (*DescribeCouponDetailResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "DescribeCouponDetail")
	args.Scheme = "https"
	if v, ok := optional["CouponNumber"]; ok {
		if CouponNumber, ok := v.(string); ok {
			args.Query.Set("CouponNumber", CouponNumber)
		} else {
			return nil, errors.New("CouponNumber must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POSTS") {
				return nil, errors.New("_method must be GET|POSTS")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}

	result := new(DescribeCouponDetailResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DescribeCouponDetailResponse represents the response of the api DescribeCouponDetail.
type DescribeCouponDetailResponse struct {
	Application      string
	BalanceAmount    string
	CouponNumber     string
	CouponTemplateId int64
	CreationTime     string
	DeliveryTime     string
	Description      string
	ExpiredAmount    string
	ExpiredTime      string
	FrozenAmount     string
	ModificationTime string
	PriceLimit       string
	Status           string
	TotalAmount      string
}

// DescribeCouponList version 2014-07-14
//
// optional parameters:
//  name: EndDeliveryTime, type: string
//  name: PageNum, type: int
//  name: PageSize, type: int
//  name: StartDeliveryTime, type: string
//  name: Status, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
func (api API) DescribeCouponList(optional openapi.M) (*DescribeCouponListResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "DescribeCouponList")
	args.Scheme = "https"
	if v, ok := optional["EndDeliveryTime"]; ok {
		if EndDeliveryTime, ok := v.(string); ok {
			args.Query.Set("EndDeliveryTime", EndDeliveryTime)
		} else {
			return nil, errors.New("EndDeliveryTime must be string")
		}
	}
	if v, ok := optional["PageNum"]; ok {
		if PageNum, ok := v.(int); ok {
			args.Query.Set("PageNum", fmt.Sprint(PageNum))
		} else {
			return nil, errors.New("PageNum must be int")
		}
	}
	if v, ok := optional["PageSize"]; ok {
		if PageSize, ok := v.(int); ok {
			args.Query.Set("PageSize", fmt.Sprint(PageSize))
		} else {
			return nil, errors.New("PageSize must be int")
		}
	}
	if v, ok := optional["StartDeliveryTime"]; ok {
		if StartDeliveryTime, ok := v.(string); ok {
			args.Query.Set("StartDeliveryTime", StartDeliveryTime)
		} else {
			return nil, errors.New("StartDeliveryTime must be string")
		}
	}
	if v, ok := optional["Status"]; ok {
		if Status, ok := v.(string); ok {
			args.Query.Set("Status", Status)
		} else {
			return nil, errors.New("Status must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}

	result := new(DescribeCouponListResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DescribeCouponListResponse represents the response of the api DescribeCouponList.
type DescribeCouponListResponse struct {
	Coupons struct {
		Coupon []struct {
			Application      string
			BalanceAmount    string
			CouponNumber     string
			CouponTemplateId int64
			CreationTime     string
			DeliveryTime     string
			Description      string
			ExpiredAmount    string
			ExpiredTime      string
			FrozenAmount     string
			ModificationTime string
			PriceLimit       string
			Status           string
			TotalAmount      string
		}
	}
}

// SetResourceBusinessStatus version 2014-07-14
//
// required parameters:
//  name: BusinessStatus, type: string
//  name: ResourceId, type: string
//  name: ResourceType, type: string
//
// optional parameters:
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) SetResourceBusinessStatus(BusinessStatus, ResourceId, ResourceType string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "SetResourceBusinessStatus")
	args.Query.Set("BusinessStatus", BusinessStatus)
	args.Query.Set("ResourceId", ResourceId)
	args.Query.Set("ResourceType", ResourceType)
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}
