// Copyright 2015 Chen Xianren. All rights reserved.
// Code generated by openapi-meta; DO NOT EDIT

package cms

import (
	"errors"
	"fmt"

	"git.oschina.net/cxr29/aliyun-openapi-go-sdk"
)

var (
	_ = errors.New("")
	_ = fmt.Sprint("")
)

type API struct {
	openapi.Service
}

func New(accessKeyId, accessKeySecret string) API {
	return API{openapi.NewService(accessKeyId, accessKeySecret)}
}

func NewParams() openapi.Params {
	args := openapi.NewParams()
	args.Product = Product
	args.Style = Style
	args.Version = Version
	return args
}

const (
	Product = "Cms"
	Style   = "RPC"
	Version = "2015-08-01"
)

// BatchCreateMetrics version 2015-08-01
//
// optional parameters:
//  name: MetricStreamName, type: string
//  name: ProjectName, type: string
//  name: Sqls, type: string
//  name: _region, type: string
func (api API) BatchCreateMetrics(optional openapi.M) (*BatchCreateMetricsResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "BatchCreateMetrics")
	args.Method = "POST"
	args.Scheme = "http"
	if v, ok := optional["MetricStreamName"]; ok {
		if MetricStreamName, ok := v.(string); ok {
			args.Query.Set("MetricStreamName", MetricStreamName)
		} else {
			return nil, errors.New("MetricStreamName must be string")
		}
	}
	if v, ok := optional["ProjectName"]; ok {
		if ProjectName, ok := v.(string); ok {
			args.Query.Set("ProjectName", ProjectName)
		} else {
			return nil, errors.New("ProjectName must be string")
		}
	}
	if v, ok := optional["Sqls"]; ok {
		if Sqls, ok := v.(string); ok {
			args.Body.Set("Sqls", Sqls)
		} else {
			return nil, errors.New("Sqls must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}

	result := new(BatchCreateMetricsResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// BatchCreateMetricsResponse represents the response of the api BatchCreateMetrics.
type BatchCreateMetricsResponse struct {
	Code    string
	Message string
	Result  string
	Success string
	TraceId string
}

// BatchCreateSqlMetrics version 2015-08-01
//
// optional parameters:
//  name: IsPublic, type: int
//  name: ProjectName, type: string
//  name: Sqls, type: string
//  name: _region, type: string
func (api API) BatchCreateSqlMetrics(optional openapi.M) (*BatchCreateSqlMetricsResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "BatchCreateSqlMetrics")
	args.Method = "POST"
	args.Scheme = "http"
	if v, ok := optional["IsPublic"]; ok {
		if IsPublic, ok := v.(int); ok {
			args.Query.Set("IsPublic", fmt.Sprint(IsPublic))
		} else {
			return nil, errors.New("IsPublic must be int")
		}
	}
	if v, ok := optional["ProjectName"]; ok {
		if ProjectName, ok := v.(string); ok {
			args.Query.Set("ProjectName", ProjectName)
		} else {
			return nil, errors.New("ProjectName must be string")
		}
	}
	if v, ok := optional["Sqls"]; ok {
		if Sqls, ok := v.(string); ok {
			args.Body.Set("Sqls", Sqls)
		} else {
			return nil, errors.New("Sqls must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}

	result := new(BatchCreateSqlMetricsResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// BatchCreateSqlMetricsResponse represents the response of the api BatchCreateSqlMetrics.
type BatchCreateSqlMetricsResponse struct {
	Code    string
	Message string
	Result  string
	Success string
	TraceId string
}

// BatchPutDimTableData version 2015-08-01
//
// optional parameters:
//  name: Body, type: string
//  name: DimTableName, type: string
//  name: _region, type: string
func (api API) BatchPutDimTableData(optional openapi.M) (*BatchPutDimTableDataResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "BatchPutDimTableData")
	args.Method = "POST"
	args.Scheme = "http"
	if v, ok := optional["Body"]; ok {
		if Body, ok := v.(string); ok {
			args.Body.Set("Body", Body)
		} else {
			return nil, errors.New("Body must be string")
		}
	}
	if v, ok := optional["DimTableName"]; ok {
		if DimTableName, ok := v.(string); ok {
			args.Query.Set("DimTableName", DimTableName)
		} else {
			return nil, errors.New("DimTableName must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}

	result := new(BatchPutDimTableDataResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// BatchPutDimTableDataResponse represents the response of the api BatchPutDimTableData.
type BatchPutDimTableDataResponse struct {
	Code    string
	Message string
	Success string
	TraceId string
}

// BatchQueryMetric version 2015-08-01
//
// optional parameters:
//  name: Dimensions, type: string
//  name: EndTime, type: string
//  name: Extend, type: string
//  name: Filter, type: string
//  name: Metric, type: string
//  name: Period, type: string
//  name: Project, type: string
//  name: StartTime, type: string
//  name: _region, type: string
func (api API) BatchQueryMetric(optional openapi.M) (*BatchQueryMetricResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "BatchQueryMetric")
	args.Method = "GET"
	args.Scheme = "http"
	if v, ok := optional["Dimensions"]; ok {
		if Dimensions, ok := v.(string); ok {
			args.Query.Set("Dimensions", Dimensions)
		} else {
			return nil, errors.New("Dimensions must be string")
		}
	}
	if v, ok := optional["EndTime"]; ok {
		if EndTime, ok := v.(string); ok {
			args.Query.Set("EndTime", EndTime)
		} else {
			return nil, errors.New("EndTime must be string")
		}
	}
	if v, ok := optional["Extend"]; ok {
		if Extend, ok := v.(string); ok {
			args.Query.Set("Extend", Extend)
		} else {
			return nil, errors.New("Extend must be string")
		}
	}
	if v, ok := optional["Filter"]; ok {
		if Filter, ok := v.(string); ok {
			args.Query.Set("Filter", Filter)
		} else {
			return nil, errors.New("Filter must be string")
		}
	}
	if v, ok := optional["Metric"]; ok {
		if Metric, ok := v.(string); ok {
			args.Query.Set("Metric", Metric)
		} else {
			return nil, errors.New("Metric must be string")
		}
	}
	if v, ok := optional["Period"]; ok {
		if Period, ok := v.(string); ok {
			args.Query.Set("Period", Period)
		} else {
			return nil, errors.New("Period must be string")
		}
	}
	if v, ok := optional["Project"]; ok {
		if Project, ok := v.(string); ok {
			args.Query.Set("Project", Project)
		} else {
			return nil, errors.New("Project must be string")
		}
	}
	if v, ok := optional["StartTime"]; ok {
		if StartTime, ok := v.(string); ok {
			args.Query.Set("StartTime", StartTime)
		} else {
			return nil, errors.New("StartTime must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}

	result := new(BatchQueryMetricResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// BatchQueryMetricResponse represents the response of the api BatchQueryMetric.
type BatchQueryMetricResponse struct {
	Code    string
	Message string
	Success string
	TraceId string
}

// CreateDimTable version 2015-08-01
//
// optional parameters:
//  name: DimTable, type: string
//  name: _region, type: string
func (api API) CreateDimTable(optional openapi.M) (*CreateDimTableResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "CreateDimTable")
	args.Method = "POST"
	args.Scheme = "http"
	if v, ok := optional["DimTable"]; ok {
		if DimTable, ok := v.(string); ok {
			args.Body.Set("DimTable", DimTable)
		} else {
			return nil, errors.New("DimTable must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}

	result := new(CreateDimTableResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// CreateDimTableResponse represents the response of the api CreateDimTable.
type CreateDimTableResponse struct {
	Code    string
	Message string
	Result  int64
	Success string
	TraceId string
}

// CreateMetricStream version 2015-08-01
//
// optional parameters:
//  name: MetricStream, type: string
//  name: ProjectName, type: string
//  name: _region, type: string
func (api API) CreateMetricStream(optional openapi.M) (*CreateMetricStreamResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "CreateMetricStream")
	args.Method = "POST"
	args.Scheme = "http"
	if v, ok := optional["MetricStream"]; ok {
		if MetricStream, ok := v.(string); ok {
			args.Body.Set("MetricStream", MetricStream)
		} else {
			return nil, errors.New("MetricStream must be string")
		}
	}
	if v, ok := optional["ProjectName"]; ok {
		if ProjectName, ok := v.(string); ok {
			args.Query.Set("ProjectName", ProjectName)
		} else {
			return nil, errors.New("ProjectName must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}

	result := new(CreateMetricStreamResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// CreateMetricStreamResponse represents the response of the api CreateMetricStream.
type CreateMetricStreamResponse struct {
	Code    string
	Message string
	Result  string
	Success string
	TraceId string
}

// CreateMetrics version 2015-08-01
//
// optional parameters:
//  name: MetricStreamName, type: string
//  name: Metrics, type: string
//  name: ProjectName, type: string
//  name: _region, type: string
func (api API) CreateMetrics(optional openapi.M) (*CreateMetricsResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "CreateMetrics")
	args.Method = "POST"
	args.Scheme = "http"
	if v, ok := optional["MetricStreamName"]; ok {
		if MetricStreamName, ok := v.(string); ok {
			args.Query.Set("MetricStreamName", MetricStreamName)
		} else {
			return nil, errors.New("MetricStreamName must be string")
		}
	}
	if v, ok := optional["Metrics"]; ok {
		if Metrics, ok := v.(string); ok {
			args.Body.Set("Metrics", Metrics)
		} else {
			return nil, errors.New("Metrics must be string")
		}
	}
	if v, ok := optional["ProjectName"]; ok {
		if ProjectName, ok := v.(string); ok {
			args.Query.Set("ProjectName", ProjectName)
		} else {
			return nil, errors.New("ProjectName must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}

	result := new(CreateMetricsResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// CreateMetricsResponse represents the response of the api CreateMetrics.
type CreateMetricsResponse struct {
	Code    string
	Message string
	Result  string
	Success string
	TraceId string
}

// CreateProject version 2015-08-01
//
// optional parameters:
//  name: Project, type: string
//  name: _region, type: string
func (api API) CreateProject(optional openapi.M) (*CreateProjectResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "CreateProject")
	args.Method = "POST"
	args.Scheme = "http"
	if v, ok := optional["Project"]; ok {
		if Project, ok := v.(string); ok {
			args.Body.Set("Project", Project)
		} else {
			return nil, errors.New("Project must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}

	result := new(CreateProjectResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// CreateProjectResponse represents the response of the api CreateProject.
type CreateProjectResponse struct {
	Code    string
	Message string
	Result  string
	Success string
	TraceId string
}

// CreateSQLMetrics version 2015-08-01
//
// optional parameters:
//  name: IsPublic, type: int
//  name: ProjectName, type: string
//  name: Sql, type: string
//  name: _region, type: string
func (api API) CreateSQLMetrics(optional openapi.M) (*CreateSQLMetricsResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "CreateSQLMetrics")
	args.Method = "POST"
	args.Scheme = "http"
	if v, ok := optional["IsPublic"]; ok {
		if IsPublic, ok := v.(int); ok {
			args.Query.Set("IsPublic", fmt.Sprint(IsPublic))
		} else {
			return nil, errors.New("IsPublic must be int")
		}
	}
	if v, ok := optional["ProjectName"]; ok {
		if ProjectName, ok := v.(string); ok {
			args.Query.Set("ProjectName", ProjectName)
		} else {
			return nil, errors.New("ProjectName must be string")
		}
	}
	if v, ok := optional["Sql"]; ok {
		if Sql, ok := v.(string); ok {
			args.Body.Set("Sql", Sql)
		} else {
			return nil, errors.New("Sql must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}

	result := new(CreateSQLMetricsResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// CreateSQLMetricsResponse represents the response of the api CreateSQLMetrics.
type CreateSQLMetricsResponse struct {
	Code    string
	Message string
	Result  string
	Success string
	TraceId string
}

// DeleteDimTable version 2015-08-01
//
// optional parameters:
//  name: DimTableName, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
func (api API) DeleteDimTable(optional openapi.M) (*DeleteDimTableResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "DeleteDimTable")
	args.Scheme = "http"
	if v, ok := optional["DimTableName"]; ok {
		if DimTableName, ok := v.(string); ok {
			args.Query.Set("DimTableName", DimTableName)
		} else {
			return nil, errors.New("DimTableName must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}

	result := new(DeleteDimTableResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DeleteDimTableResponse represents the response of the api DeleteDimTable.
type DeleteDimTableResponse struct {
	Code    string
	Message string
	Success string
	TraceId string
}

// DeleteDimTableData version 2015-08-01
//
// optional parameters:
//  name: DimTableName, type: string
//  name: Key, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
func (api API) DeleteDimTableData(optional openapi.M) (*DeleteDimTableDataResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "DeleteDimTableData")
	args.Scheme = "http"
	if v, ok := optional["DimTableName"]; ok {
		if DimTableName, ok := v.(string); ok {
			args.Query.Set("DimTableName", DimTableName)
		} else {
			return nil, errors.New("DimTableName must be string")
		}
	}
	if v, ok := optional["Key"]; ok {
		if Key, ok := v.(string); ok {
			args.Query.Set("Key", Key)
		} else {
			return nil, errors.New("Key must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}

	result := new(DeleteDimTableDataResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DeleteDimTableDataResponse represents the response of the api DeleteDimTableData.
type DeleteDimTableDataResponse struct {
	Code    string
	Message string
	Success string
	TraceId string
}

// DeleteMetricStream version 2015-08-01
//
// optional parameters:
//  name: MetricStreamName, type: string
//  name: ProjectName, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
func (api API) DeleteMetricStream(optional openapi.M) (*DeleteMetricStreamResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "DeleteMetricStream")
	args.Scheme = "http"
	if v, ok := optional["MetricStreamName"]; ok {
		if MetricStreamName, ok := v.(string); ok {
			args.Query.Set("MetricStreamName", MetricStreamName)
		} else {
			return nil, errors.New("MetricStreamName must be string")
		}
	}
	if v, ok := optional["ProjectName"]; ok {
		if ProjectName, ok := v.(string); ok {
			args.Query.Set("ProjectName", ProjectName)
		} else {
			return nil, errors.New("ProjectName must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}

	result := new(DeleteMetricStreamResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DeleteMetricStreamResponse represents the response of the api DeleteMetricStream.
type DeleteMetricStreamResponse struct {
	Code    string
	Message string
	Success string
	TraceId string
}

// DeleteMetrics version 2015-08-01
//
// optional parameters:
//  name: MetricName, type: string
//  name: ProjectName, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
func (api API) DeleteMetrics(optional openapi.M) (*DeleteMetricsResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "DeleteMetrics")
	args.Scheme = "http"
	if v, ok := optional["MetricName"]; ok {
		if MetricName, ok := v.(string); ok {
			args.Query.Set("MetricName", MetricName)
		} else {
			return nil, errors.New("MetricName must be string")
		}
	}
	if v, ok := optional["ProjectName"]; ok {
		if ProjectName, ok := v.(string); ok {
			args.Query.Set("ProjectName", ProjectName)
		} else {
			return nil, errors.New("ProjectName must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}

	result := new(DeleteMetricsResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DeleteMetricsResponse represents the response of the api DeleteMetrics.
type DeleteMetricsResponse struct {
	Code    string
	Message string
	Success string
	TraceId string
}

// DeleteProject version 2015-08-01
//
// optional parameters:
//  name: ProjectName, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
func (api API) DeleteProject(optional openapi.M) (*DeleteProjectResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "DeleteProject")
	args.Scheme = "http"
	if v, ok := optional["ProjectName"]; ok {
		if ProjectName, ok := v.(string); ok {
			args.Query.Set("ProjectName", ProjectName)
		} else {
			return nil, errors.New("ProjectName must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}

	result := new(DeleteProjectResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DeleteProjectResponse represents the response of the api DeleteProject.
type DeleteProjectResponse struct {
	Code    string
	Message string
	Success string
	TraceId string
}

// DescribeMetric version 2015-08-01
//
// required parameters:
//  name: Metric, type: string
//  name: Period, type: string
//  name: Project, type: string
//  name: StartTime, type: string
//
// optional parameters:
//  name: Dimensions, type: string
//  name: EndTime, type: string
//  name: _region, type: string
func (api API) DescribeMetric(Metric, Period, Project, StartTime string, optional openapi.M) (*DescribeMetricResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "DescribeMetric")
	args.Method = "GET"
	args.Query.Set("Metric", Metric)
	args.Query.Set("Period", Period)
	args.Query.Set("Project", Project)
	args.Query.Set("StartTime", StartTime)
	args.Scheme = "http"
	if v, ok := optional["Dimensions"]; ok {
		if Dimensions, ok := v.(string); ok {
			args.Query.Set("Dimensions", Dimensions)
		} else {
			return nil, errors.New("Dimensions must be string")
		}
	}
	if v, ok := optional["EndTime"]; ok {
		if EndTime, ok := v.(string); ok {
			args.Query.Set("EndTime", EndTime)
		} else {
			return nil, errors.New("EndTime must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}

	result := new(DescribeMetricResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DescribeMetricResponse represents the response of the api DescribeMetric.
type DescribeMetricResponse struct {
	Code    string
	Message string
	Success string
	TraceId string
}

// DescribeMetricDatum version 2015-08-01
//
// optional parameters:
//  name: Dimensions, type: string
//  name: EndTime, type: string
//  name: Extend, type: string
//  name: Length, type: string
//  name: Metric, type: string
//  name: Page, type: string
//  name: Period, type: string
//  name: Project, type: string
//  name: StartTime, type: string
//  name: _region, type: string
func (api API) DescribeMetricDatum(optional openapi.M) (*DescribeMetricDatumResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "DescribeMetricDatum")
	args.Method = "GET"
	args.Scheme = "http"
	if v, ok := optional["Dimensions"]; ok {
		if Dimensions, ok := v.(string); ok {
			args.Query.Set("Dimensions", Dimensions)
		} else {
			return nil, errors.New("Dimensions must be string")
		}
	}
	if v, ok := optional["EndTime"]; ok {
		if EndTime, ok := v.(string); ok {
			args.Query.Set("EndTime", EndTime)
		} else {
			return nil, errors.New("EndTime must be string")
		}
	}
	if v, ok := optional["Extend"]; ok {
		if Extend, ok := v.(string); ok {
			args.Query.Set("Extend", Extend)
		} else {
			return nil, errors.New("Extend must be string")
		}
	}
	if v, ok := optional["Length"]; ok {
		if Length, ok := v.(string); ok {
			args.Query.Set("Length", Length)
		} else {
			return nil, errors.New("Length must be string")
		}
	}
	if v, ok := optional["Metric"]; ok {
		if Metric, ok := v.(string); ok {
			args.Query.Set("Metric", Metric)
		} else {
			return nil, errors.New("Metric must be string")
		}
	}
	if v, ok := optional["Page"]; ok {
		if Page, ok := v.(string); ok {
			args.Query.Set("Page", Page)
		} else {
			return nil, errors.New("Page must be string")
		}
	}
	if v, ok := optional["Period"]; ok {
		if Period, ok := v.(string); ok {
			args.Query.Set("Period", Period)
		} else {
			return nil, errors.New("Period must be string")
		}
	}
	if v, ok := optional["Project"]; ok {
		if Project, ok := v.(string); ok {
			args.Query.Set("Project", Project)
		} else {
			return nil, errors.New("Project must be string")
		}
	}
	if v, ok := optional["StartTime"]; ok {
		if StartTime, ok := v.(string); ok {
			args.Query.Set("StartTime", StartTime)
		} else {
			return nil, errors.New("StartTime must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}

	result := new(DescribeMetricDatumResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DescribeMetricDatumResponse represents the response of the api DescribeMetricDatum.
type DescribeMetricDatumResponse struct {
	Code    string
	Message string
	Success string
	TraceId string
}

// DescribeMetricList version 2015-08-01
//
// optional parameters:
//  name: Dimensions, type: string
//  name: EndTime, type: string
//  name: Length, type: string
//  name: Metric, type: string
//  name: Page, type: string
//  name: Period, type: string
//  name: Project, type: string
//  name: StartTime, type: string
//  name: _region, type: string
func (api API) DescribeMetricList(optional openapi.M) (*DescribeMetricListResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "DescribeMetricList")
	args.Method = "GET"
	args.Scheme = "http"
	if v, ok := optional["Dimensions"]; ok {
		if Dimensions, ok := v.(string); ok {
			args.Query.Set("Dimensions", Dimensions)
		} else {
			return nil, errors.New("Dimensions must be string")
		}
	}
	if v, ok := optional["EndTime"]; ok {
		if EndTime, ok := v.(string); ok {
			args.Query.Set("EndTime", EndTime)
		} else {
			return nil, errors.New("EndTime must be string")
		}
	}
	if v, ok := optional["Length"]; ok {
		if Length, ok := v.(string); ok {
			args.Query.Set("Length", Length)
		} else {
			return nil, errors.New("Length must be string")
		}
	}
	if v, ok := optional["Metric"]; ok {
		if Metric, ok := v.(string); ok {
			args.Query.Set("Metric", Metric)
		} else {
			return nil, errors.New("Metric must be string")
		}
	}
	if v, ok := optional["Page"]; ok {
		if Page, ok := v.(string); ok {
			args.Query.Set("Page", Page)
		} else {
			return nil, errors.New("Page must be string")
		}
	}
	if v, ok := optional["Period"]; ok {
		if Period, ok := v.(string); ok {
			args.Query.Set("Period", Period)
		} else {
			return nil, errors.New("Period must be string")
		}
	}
	if v, ok := optional["Project"]; ok {
		if Project, ok := v.(string); ok {
			args.Query.Set("Project", Project)
		} else {
			return nil, errors.New("Project must be string")
		}
	}
	if v, ok := optional["StartTime"]; ok {
		if StartTime, ok := v.(string); ok {
			args.Query.Set("StartTime", StartTime)
		} else {
			return nil, errors.New("StartTime must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}

	result := new(DescribeMetricListResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DescribeMetricListResponse represents the response of the api DescribeMetricList.
type DescribeMetricListResponse struct {
	Code    string
	Message string
	Success string
	TraceId string
}

// GetDimTable version 2015-08-01
//
// optional parameters:
//  name: DimTableName, type: string
//  name: _region, type: string
func (api API) GetDimTable(optional openapi.M) (*GetDimTableResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "GetDimTable")
	args.Method = "GET"
	args.Scheme = "http"
	if v, ok := optional["DimTableName"]; ok {
		if DimTableName, ok := v.(string); ok {
			args.Query.Set("DimTableName", DimTableName)
		} else {
			return nil, errors.New("DimTableName must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}

	result := new(GetDimTableResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// GetDimTableResponse represents the response of the api GetDimTable.
type GetDimTableResponse struct {
	Code    string
	Message string
	Result  string
	Success string
	TraceId string
}

// GetMetricStatistics version 2015-08-01
//
// optional parameters:
//  name: Dimensions, type: string
//  name: EndTime, type: string
//  name: Interval, type: string
//  name: Length, type: int
//  name: MetricName, type: string
//  name: Namespace, type: string
//  name: NextToken, type: int
//  name: StartTime, type: string
//  name: _region, type: string
func (api API) GetMetricStatistics(optional openapi.M) (*GetMetricStatisticsResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "GetMetricStatistics")
	args.Method = "GET"
	args.Scheme = "http"
	if v, ok := optional["Dimensions"]; ok {
		if Dimensions, ok := v.(string); ok {
			args.Query.Set("Dimensions", Dimensions)
		} else {
			return nil, errors.New("Dimensions must be string")
		}
	}
	if v, ok := optional["EndTime"]; ok {
		if EndTime, ok := v.(string); ok {
			args.Query.Set("EndTime", EndTime)
		} else {
			return nil, errors.New("EndTime must be string")
		}
	}
	if v, ok := optional["Interval"]; ok {
		if Interval, ok := v.(string); ok {
			args.Query.Set("Interval", Interval)
		} else {
			return nil, errors.New("Interval must be string")
		}
	}
	if v, ok := optional["Length"]; ok {
		if Length, ok := v.(int); ok {
			args.Query.Set("Length", fmt.Sprint(Length))
		} else {
			return nil, errors.New("Length must be int")
		}
	}
	if v, ok := optional["MetricName"]; ok {
		if MetricName, ok := v.(string); ok {
			args.Query.Set("MetricName", MetricName)
		} else {
			return nil, errors.New("MetricName must be string")
		}
	}
	if v, ok := optional["Namespace"]; ok {
		if Namespace, ok := v.(string); ok {
			args.Query.Set("Namespace", Namespace)
		} else {
			return nil, errors.New("Namespace must be string")
		}
	}
	if v, ok := optional["NextToken"]; ok {
		if NextToken, ok := v.(int); ok {
			args.Query.Set("NextToken", fmt.Sprint(NextToken))
		} else {
			return nil, errors.New("NextToken must be int")
		}
	}
	if v, ok := optional["StartTime"]; ok {
		if StartTime, ok := v.(string); ok {
			args.Query.Set("StartTime", StartTime)
		} else {
			return nil, errors.New("StartTime must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}

	result := new(GetMetricStatisticsResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// GetMetricStatisticsResponse represents the response of the api GetMetricStatistics.
type GetMetricStatisticsResponse struct {
	Code      string
	Message   string
	NextToken string
}

// GetMetricStream version 2015-08-01
//
// optional parameters:
//  name: MetricStreamName, type: string
//  name: ProjectName, type: string
//  name: _region, type: string
func (api API) GetMetricStream(optional openapi.M) (*GetMetricStreamResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "GetMetricStream")
	args.Method = "GET"
	args.Scheme = "http"
	if v, ok := optional["MetricStreamName"]; ok {
		if MetricStreamName, ok := v.(string); ok {
			args.Query.Set("MetricStreamName", MetricStreamName)
		} else {
			return nil, errors.New("MetricStreamName must be string")
		}
	}
	if v, ok := optional["ProjectName"]; ok {
		if ProjectName, ok := v.(string); ok {
			args.Query.Set("ProjectName", ProjectName)
		} else {
			return nil, errors.New("ProjectName must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}

	result := new(GetMetricStreamResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// GetMetricStreamResponse represents the response of the api GetMetricStream.
type GetMetricStreamResponse struct {
	Code    string
	Message string
	Result  string
	Success string
	TraceId string
}

// GetMetricStreamMeta version 2015-08-01
//
// optional parameters:
//  name: MetricStreamName, type: string
//  name: ProjectName, type: string
//  name: _region, type: string
func (api API) GetMetricStreamMeta(optional openapi.M) (*GetMetricStreamMetaResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "GetMetricStreamMeta")
	args.Method = "GET"
	args.Scheme = "http"
	if v, ok := optional["MetricStreamName"]; ok {
		if MetricStreamName, ok := v.(string); ok {
			args.Query.Set("MetricStreamName", MetricStreamName)
		} else {
			return nil, errors.New("MetricStreamName must be string")
		}
	}
	if v, ok := optional["ProjectName"]; ok {
		if ProjectName, ok := v.(string); ok {
			args.Query.Set("ProjectName", ProjectName)
		} else {
			return nil, errors.New("ProjectName must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}

	result := new(GetMetricStreamMetaResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// GetMetricStreamMetaResponse represents the response of the api GetMetricStreamMeta.
type GetMetricStreamMetaResponse struct {
	Code    string
	Message string
	Success string
	TraceId string
}

// GetMetricStreamStatus version 2015-08-01
//
// optional parameters:
//  name: MetricStreamName, type: string
//  name: ProjectName, type: string
//  name: _region, type: string
func (api API) GetMetricStreamStatus(optional openapi.M) (*GetMetricStreamStatusResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "GetMetricStreamStatus")
	args.Method = "GET"
	args.Scheme = "http"
	if v, ok := optional["MetricStreamName"]; ok {
		if MetricStreamName, ok := v.(string); ok {
			args.Query.Set("MetricStreamName", MetricStreamName)
		} else {
			return nil, errors.New("MetricStreamName must be string")
		}
	}
	if v, ok := optional["ProjectName"]; ok {
		if ProjectName, ok := v.(string); ok {
			args.Query.Set("ProjectName", ProjectName)
		} else {
			return nil, errors.New("ProjectName must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}

	result := new(GetMetricStreamStatusResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// GetMetricStreamStatusResponse represents the response of the api GetMetricStreamStatus.
type GetMetricStreamStatusResponse struct {
	Code    string
	Message string
	Success string
	TraceId string
}

// GetMetrics version 2015-08-01
//
// optional parameters:
//  name: MetricName, type: string
//  name: MetricStreamName, type: string
//  name: ProjectName, type: string
//  name: _region, type: string
func (api API) GetMetrics(optional openapi.M) (*GetMetricsResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "GetMetrics")
	args.Method = "GET"
	args.Scheme = "http"
	if v, ok := optional["MetricName"]; ok {
		if MetricName, ok := v.(string); ok {
			args.Query.Set("MetricName", MetricName)
		} else {
			return nil, errors.New("MetricName must be string")
		}
	}
	if v, ok := optional["MetricStreamName"]; ok {
		if MetricStreamName, ok := v.(string); ok {
			args.Query.Set("MetricStreamName", MetricStreamName)
		} else {
			return nil, errors.New("MetricStreamName must be string")
		}
	}
	if v, ok := optional["ProjectName"]; ok {
		if ProjectName, ok := v.(string); ok {
			args.Query.Set("ProjectName", ProjectName)
		} else {
			return nil, errors.New("ProjectName must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}

	result := new(GetMetricsResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// GetMetricsResponse represents the response of the api GetMetrics.
type GetMetricsResponse struct {
	Code    string
	Message string
	Result  string
	Success string
	TraceId string
}

// GetMetricsMeta version 2015-08-01
//
// optional parameters:
//  name: MetricName, type: string
//  name: ProjectName, type: string
//  name: _region, type: string
func (api API) GetMetricsMeta(optional openapi.M) (*GetMetricsMetaResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "GetMetricsMeta")
	args.Method = "GET"
	args.Scheme = "http"
	if v, ok := optional["MetricName"]; ok {
		if MetricName, ok := v.(string); ok {
			args.Query.Set("MetricName", MetricName)
		} else {
			return nil, errors.New("MetricName must be string")
		}
	}
	if v, ok := optional["ProjectName"]; ok {
		if ProjectName, ok := v.(string); ok {
			args.Query.Set("ProjectName", ProjectName)
		} else {
			return nil, errors.New("ProjectName must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}

	result := new(GetMetricsMetaResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// GetMetricsMetaResponse represents the response of the api GetMetricsMeta.
type GetMetricsMetaResponse struct {
	Code    string
	Message string
	Result  string
	Success string
	TraceId string
}

// GetProject version 2015-08-01
//
// optional parameters:
//  name: ProjectName, type: string
//  name: _region, type: string
func (api API) GetProject(optional openapi.M) (*GetProjectResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "GetProject")
	args.Method = "GET"
	args.Scheme = "http"
	if v, ok := optional["ProjectName"]; ok {
		if ProjectName, ok := v.(string); ok {
			args.Query.Set("ProjectName", ProjectName)
		} else {
			return nil, errors.New("ProjectName must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}

	result := new(GetProjectResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// GetProjectResponse represents the response of the api GetProject.
type GetProjectResponse struct {
	Code    string
	Message string
	Result  string
	Success string
	TraceId string
}

// GetSQLMetrics version 2015-08-01
//
// optional parameters:
//  name: MetricName, type: string
//  name: ProjectName, type: string
//  name: _region, type: string
func (api API) GetSQLMetrics(optional openapi.M) (*GetSQLMetricsResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "GetSQLMetrics")
	args.Method = "GET"
	args.Scheme = "http"
	if v, ok := optional["MetricName"]; ok {
		if MetricName, ok := v.(string); ok {
			args.Query.Set("MetricName", MetricName)
		} else {
			return nil, errors.New("MetricName must be string")
		}
	}
	if v, ok := optional["ProjectName"]; ok {
		if ProjectName, ok := v.(string); ok {
			args.Query.Set("ProjectName", ProjectName)
		} else {
			return nil, errors.New("ProjectName must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}

	result := new(GetSQLMetricsResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// GetSQLMetricsResponse represents the response of the api GetSQLMetrics.
type GetSQLMetricsResponse struct {
	Code    string
	Message string
	Result  string
	Success string
	TraceId string
}

// ListDimTable version 2015-08-01
//
// optional parameters:
//  name: DimTableName, type: string
//  name: Page, type: int64
//  name: PageSize, type: int64
//  name: _region, type: string
func (api API) ListDimTable(optional openapi.M) (*ListDimTableResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "ListDimTable")
	args.Method = "GET"
	args.Scheme = "http"
	if v, ok := optional["DimTableName"]; ok {
		if DimTableName, ok := v.(string); ok {
			args.Query.Set("DimTableName", DimTableName)
		} else {
			return nil, errors.New("DimTableName must be string")
		}
	}
	if v, ok := optional["Page"]; ok {
		if Page, ok := v.(int64); ok {
			args.Query.Set("Page", fmt.Sprint(Page))
		} else {
			return nil, errors.New("Page must be int64")
		}
	}
	if v, ok := optional["PageSize"]; ok {
		if PageSize, ok := v.(int64); ok {
			args.Query.Set("PageSize", fmt.Sprint(PageSize))
		} else {
			return nil, errors.New("PageSize must be int64")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}

	result := new(ListDimTableResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// ListDimTableResponse represents the response of the api ListDimTable.
type ListDimTableResponse struct {
	Code    string
	Message string
	Success string
	TraceId string
}

// ListDimTableData version 2015-08-01
//
// optional parameters:
//  name: DimTableName, type: string
//  name: Key, type: string
//  name: _region, type: string
func (api API) ListDimTableData(optional openapi.M) (*ListDimTableDataResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "ListDimTableData")
	args.Method = "GET"
	args.Scheme = "http"
	if v, ok := optional["DimTableName"]; ok {
		if DimTableName, ok := v.(string); ok {
			args.Query.Set("DimTableName", DimTableName)
		} else {
			return nil, errors.New("DimTableName must be string")
		}
	}
	if v, ok := optional["Key"]; ok {
		if Key, ok := v.(string); ok {
			args.Query.Set("Key", Key)
		} else {
			return nil, errors.New("Key must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}

	result := new(ListDimTableDataResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// ListDimTableDataResponse represents the response of the api ListDimTableData.
type ListDimTableDataResponse struct {
	Code    string
	Message string
	Result  string
	Success string
	TraceId string
}

// ListMetricStream version 2015-08-01
//
// optional parameters:
//  name: MetricStreamName, type: string
//  name: Page, type: int64
//  name: PageSize, type: int64
//  name: ProjectName, type: string
//  name: _region, type: string
func (api API) ListMetricStream(optional openapi.M) (*ListMetricStreamResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "ListMetricStream")
	args.Method = "GET"
	args.Scheme = "http"
	if v, ok := optional["MetricStreamName"]; ok {
		if MetricStreamName, ok := v.(string); ok {
			args.Query.Set("MetricStreamName", MetricStreamName)
		} else {
			return nil, errors.New("MetricStreamName must be string")
		}
	}
	if v, ok := optional["Page"]; ok {
		if Page, ok := v.(int64); ok {
			args.Query.Set("Page", fmt.Sprint(Page))
		} else {
			return nil, errors.New("Page must be int64")
		}
	}
	if v, ok := optional["PageSize"]; ok {
		if PageSize, ok := v.(int64); ok {
			args.Query.Set("PageSize", fmt.Sprint(PageSize))
		} else {
			return nil, errors.New("PageSize must be int64")
		}
	}
	if v, ok := optional["ProjectName"]; ok {
		if ProjectName, ok := v.(string); ok {
			args.Query.Set("ProjectName", ProjectName)
		} else {
			return nil, errors.New("ProjectName must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}

	result := new(ListMetricStreamResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// ListMetricStreamResponse represents the response of the api ListMetricStream.
type ListMetricStreamResponse struct {
	Code    string
	Message string
	Success string
	TraceId string
}

// ListMetrics version 2015-08-01
//
// optional parameters:
//  name: MetricName, type: string
//  name: MetricStreamName, type: string
//  name: Page, type: int64
//  name: PageSize, type: int64
//  name: ProjectName, type: string
//  name: _region, type: string
func (api API) ListMetrics(optional openapi.M) (*ListMetricsResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "ListMetrics")
	args.Method = "GET"
	args.Scheme = "http"
	if v, ok := optional["MetricName"]; ok {
		if MetricName, ok := v.(string); ok {
			args.Query.Set("MetricName", MetricName)
		} else {
			return nil, errors.New("MetricName must be string")
		}
	}
	if v, ok := optional["MetricStreamName"]; ok {
		if MetricStreamName, ok := v.(string); ok {
			args.Query.Set("MetricStreamName", MetricStreamName)
		} else {
			return nil, errors.New("MetricStreamName must be string")
		}
	}
	if v, ok := optional["Page"]; ok {
		if Page, ok := v.(int64); ok {
			args.Query.Set("Page", fmt.Sprint(Page))
		} else {
			return nil, errors.New("Page must be int64")
		}
	}
	if v, ok := optional["PageSize"]; ok {
		if PageSize, ok := v.(int64); ok {
			args.Query.Set("PageSize", fmt.Sprint(PageSize))
		} else {
			return nil, errors.New("PageSize must be int64")
		}
	}
	if v, ok := optional["ProjectName"]; ok {
		if ProjectName, ok := v.(string); ok {
			args.Query.Set("ProjectName", ProjectName)
		} else {
			return nil, errors.New("ProjectName must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}

	result := new(ListMetricsResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// ListMetricsResponse represents the response of the api ListMetrics.
type ListMetricsResponse struct {
	Code    string
	Message string
	Success string
	TraceId string
}

// ListMetricsPlan version 2015-08-01
//
// optional parameters:
//  name: MetricName, type: string
//  name: MetricStreamName, type: string
//  name: Page, type: int64
//  name: PageSize, type: int64
//  name: ProjectName, type: string
//  name: _region, type: string
func (api API) ListMetricsPlan(optional openapi.M) (*ListMetricsPlanResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "ListMetricsPlan")
	args.Method = "GET"
	args.Scheme = "http"
	if v, ok := optional["MetricName"]; ok {
		if MetricName, ok := v.(string); ok {
			args.Query.Set("MetricName", MetricName)
		} else {
			return nil, errors.New("MetricName must be string")
		}
	}
	if v, ok := optional["MetricStreamName"]; ok {
		if MetricStreamName, ok := v.(string); ok {
			args.Query.Set("MetricStreamName", MetricStreamName)
		} else {
			return nil, errors.New("MetricStreamName must be string")
		}
	}
	if v, ok := optional["Page"]; ok {
		if Page, ok := v.(int64); ok {
			args.Query.Set("Page", fmt.Sprint(Page))
		} else {
			return nil, errors.New("Page must be int64")
		}
	}
	if v, ok := optional["PageSize"]; ok {
		if PageSize, ok := v.(int64); ok {
			args.Query.Set("PageSize", fmt.Sprint(PageSize))
		} else {
			return nil, errors.New("PageSize must be int64")
		}
	}
	if v, ok := optional["ProjectName"]; ok {
		if ProjectName, ok := v.(string); ok {
			args.Query.Set("ProjectName", ProjectName)
		} else {
			return nil, errors.New("ProjectName must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}

	result := new(ListMetricsPlanResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// ListMetricsPlanResponse represents the response of the api ListMetricsPlan.
type ListMetricsPlanResponse struct {
	Code    string
	Message string
	Success string
	TraceId string
}

// ListProject version 2015-08-01
//
// optional parameters:
//  name: Page, type: int64
//  name: PageSize, type: int64
//  name: ProjectOwner, type: string
//  name: _region, type: string
func (api API) ListProject(optional openapi.M) (*ListProjectResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "ListProject")
	args.Method = "GET"
	args.Scheme = "http"
	if v, ok := optional["Page"]; ok {
		if Page, ok := v.(int64); ok {
			args.Query.Set("Page", fmt.Sprint(Page))
		} else {
			return nil, errors.New("Page must be int64")
		}
	}
	if v, ok := optional["PageSize"]; ok {
		if PageSize, ok := v.(int64); ok {
			args.Query.Set("PageSize", fmt.Sprint(PageSize))
		} else {
			return nil, errors.New("PageSize must be int64")
		}
	}
	if v, ok := optional["ProjectOwner"]; ok {
		if ProjectOwner, ok := v.(string); ok {
			args.Query.Set("ProjectOwner", ProjectOwner)
		} else {
			return nil, errors.New("ProjectOwner must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}

	result := new(ListProjectResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// ListProjectResponse represents the response of the api ListProject.
type ListProjectResponse struct {
	Code    string
	Message string
	Success string
	TraceId string
}

// ListSQLMetrics version 2015-08-01
//
// optional parameters:
//  name: MetricName, type: string
//  name: Page, type: int64
//  name: PageSize, type: int64
//  name: ProjectName, type: string
//  name: _region, type: string
func (api API) ListSQLMetrics(optional openapi.M) (*ListSQLMetricsResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "ListSQLMetrics")
	args.Method = "GET"
	args.Scheme = "http"
	if v, ok := optional["MetricName"]; ok {
		if MetricName, ok := v.(string); ok {
			args.Query.Set("MetricName", MetricName)
		} else {
			return nil, errors.New("MetricName must be string")
		}
	}
	if v, ok := optional["Page"]; ok {
		if Page, ok := v.(int64); ok {
			args.Query.Set("Page", fmt.Sprint(Page))
		} else {
			return nil, errors.New("Page must be int64")
		}
	}
	if v, ok := optional["PageSize"]; ok {
		if PageSize, ok := v.(int64); ok {
			args.Query.Set("PageSize", fmt.Sprint(PageSize))
		} else {
			return nil, errors.New("PageSize must be int64")
		}
	}
	if v, ok := optional["ProjectName"]; ok {
		if ProjectName, ok := v.(string); ok {
			args.Query.Set("ProjectName", ProjectName)
		} else {
			return nil, errors.New("ProjectName must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}

	result := new(ListSQLMetricsResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// ListSQLMetricsResponse represents the response of the api ListSQLMetrics.
type ListSQLMetricsResponse struct {
	Code    string
	Message string
	Success string
	TraceId string
}

// PutDimTableData version 2015-08-01
//
// optional parameters:
//  name: Body, type: string
//  name: DimTableName, type: string
//  name: _region, type: string
func (api API) PutDimTableData(optional openapi.M) (*PutDimTableDataResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "PutDimTableData")
	args.Method = "POST"
	args.Scheme = "http"
	if v, ok := optional["Body"]; ok {
		if Body, ok := v.(string); ok {
			args.Body.Set("Body", Body)
		} else {
			return nil, errors.New("Body must be string")
		}
	}
	if v, ok := optional["DimTableName"]; ok {
		if DimTableName, ok := v.(string); ok {
			args.Query.Set("DimTableName", DimTableName)
		} else {
			return nil, errors.New("DimTableName must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}

	result := new(PutDimTableDataResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// PutDimTableDataResponse represents the response of the api PutDimTableData.
type PutDimTableDataResponse struct {
	Code    string
	Message string
	Success string
	TraceId string
}

// QueryIncremental version 2015-08-01
//
// optional parameters:
//  name: Columns, type: string
//  name: Dimensions, type: string
//  name: EndTime, type: string
//  name: Extend, type: string
//  name: Metric, type: string
//  name: Period, type: string
//  name: Project, type: string
//  name: StartTime, type: string
//  name: TargetPeriod, type: string
//  name: _region, type: string
func (api API) QueryIncremental(optional openapi.M) (*QueryIncrementalResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "QueryIncremental")
	args.Method = "GET"
	args.Scheme = "http"
	if v, ok := optional["Columns"]; ok {
		if Columns, ok := v.(string); ok {
			args.Query.Set("Columns", Columns)
		} else {
			return nil, errors.New("Columns must be string")
		}
	}
	if v, ok := optional["Dimensions"]; ok {
		if Dimensions, ok := v.(string); ok {
			args.Query.Set("Dimensions", Dimensions)
		} else {
			return nil, errors.New("Dimensions must be string")
		}
	}
	if v, ok := optional["EndTime"]; ok {
		if EndTime, ok := v.(string); ok {
			args.Query.Set("EndTime", EndTime)
		} else {
			return nil, errors.New("EndTime must be string")
		}
	}
	if v, ok := optional["Extend"]; ok {
		if Extend, ok := v.(string); ok {
			args.Query.Set("Extend", Extend)
		} else {
			return nil, errors.New("Extend must be string")
		}
	}
	if v, ok := optional["Metric"]; ok {
		if Metric, ok := v.(string); ok {
			args.Query.Set("Metric", Metric)
		} else {
			return nil, errors.New("Metric must be string")
		}
	}
	if v, ok := optional["Period"]; ok {
		if Period, ok := v.(string); ok {
			args.Query.Set("Period", Period)
		} else {
			return nil, errors.New("Period must be string")
		}
	}
	if v, ok := optional["Project"]; ok {
		if Project, ok := v.(string); ok {
			args.Query.Set("Project", Project)
		} else {
			return nil, errors.New("Project must be string")
		}
	}
	if v, ok := optional["StartTime"]; ok {
		if StartTime, ok := v.(string); ok {
			args.Query.Set("StartTime", StartTime)
		} else {
			return nil, errors.New("StartTime must be string")
		}
	}
	if v, ok := optional["TargetPeriod"]; ok {
		if TargetPeriod, ok := v.(string); ok {
			args.Query.Set("TargetPeriod", TargetPeriod)
		} else {
			return nil, errors.New("TargetPeriod must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}

	result := new(QueryIncrementalResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// QueryIncrementalResponse represents the response of the api QueryIncremental.
type QueryIncrementalResponse struct {
	Code    string
	Message string
	Success string
	TraceId string
}

// QueryListMetric version 2015-08-01
//
// optional parameters:
//  name: Dimensions, type: string
//  name: EndTime, type: string
//  name: Extend, type: string
//  name: Filter, type: string
//  name: Length, type: string
//  name: Metric, type: string
//  name: Page, type: string
//  name: Period, type: string
//  name: Project, type: string
//  name: StartTime, type: string
//  name: _region, type: string
func (api API) QueryListMetric(optional openapi.M) (*QueryListMetricResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "QueryListMetric")
	args.Method = "GET"
	args.Scheme = "http"
	if v, ok := optional["Dimensions"]; ok {
		if Dimensions, ok := v.(string); ok {
			args.Query.Set("Dimensions", Dimensions)
		} else {
			return nil, errors.New("Dimensions must be string")
		}
	}
	if v, ok := optional["EndTime"]; ok {
		if EndTime, ok := v.(string); ok {
			args.Query.Set("EndTime", EndTime)
		} else {
			return nil, errors.New("EndTime must be string")
		}
	}
	if v, ok := optional["Extend"]; ok {
		if Extend, ok := v.(string); ok {
			args.Query.Set("Extend", Extend)
		} else {
			return nil, errors.New("Extend must be string")
		}
	}
	if v, ok := optional["Filter"]; ok {
		if Filter, ok := v.(string); ok {
			args.Query.Set("Filter", Filter)
		} else {
			return nil, errors.New("Filter must be string")
		}
	}
	if v, ok := optional["Length"]; ok {
		if Length, ok := v.(string); ok {
			args.Query.Set("Length", Length)
		} else {
			return nil, errors.New("Length must be string")
		}
	}
	if v, ok := optional["Metric"]; ok {
		if Metric, ok := v.(string); ok {
			args.Query.Set("Metric", Metric)
		} else {
			return nil, errors.New("Metric must be string")
		}
	}
	if v, ok := optional["Page"]; ok {
		if Page, ok := v.(string); ok {
			args.Query.Set("Page", Page)
		} else {
			return nil, errors.New("Page must be string")
		}
	}
	if v, ok := optional["Period"]; ok {
		if Period, ok := v.(string); ok {
			args.Query.Set("Period", Period)
		} else {
			return nil, errors.New("Period must be string")
		}
	}
	if v, ok := optional["Project"]; ok {
		if Project, ok := v.(string); ok {
			args.Query.Set("Project", Project)
		} else {
			return nil, errors.New("Project must be string")
		}
	}
	if v, ok := optional["StartTime"]; ok {
		if StartTime, ok := v.(string); ok {
			args.Query.Set("StartTime", StartTime)
		} else {
			return nil, errors.New("StartTime must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}

	result := new(QueryListMetricResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// QueryListMetricResponse represents the response of the api QueryListMetric.
type QueryListMetricResponse struct {
	Code    string
	Message string
	Success string
	TraceId string
}

// QueryMetric version 2015-08-01
//
// optional parameters:
//  name: Dimensions, type: string
//  name: EndTime, type: string
//  name: Extend, type: string
//  name: Length, type: string
//  name: Metric, type: string
//  name: Page, type: string
//  name: Period, type: string
//  name: Project, type: string
//  name: StartTime, type: string
//  name: _region, type: string
func (api API) QueryMetric(optional openapi.M) (*QueryMetricResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "QueryMetric")
	args.Method = "GET"
	args.Scheme = "http"
	if v, ok := optional["Dimensions"]; ok {
		if Dimensions, ok := v.(string); ok {
			args.Query.Set("Dimensions", Dimensions)
		} else {
			return nil, errors.New("Dimensions must be string")
		}
	}
	if v, ok := optional["EndTime"]; ok {
		if EndTime, ok := v.(string); ok {
			args.Query.Set("EndTime", EndTime)
		} else {
			return nil, errors.New("EndTime must be string")
		}
	}
	if v, ok := optional["Extend"]; ok {
		if Extend, ok := v.(string); ok {
			args.Query.Set("Extend", Extend)
		} else {
			return nil, errors.New("Extend must be string")
		}
	}
	if v, ok := optional["Length"]; ok {
		if Length, ok := v.(string); ok {
			args.Query.Set("Length", Length)
		} else {
			return nil, errors.New("Length must be string")
		}
	}
	if v, ok := optional["Metric"]; ok {
		if Metric, ok := v.(string); ok {
			args.Query.Set("Metric", Metric)
		} else {
			return nil, errors.New("Metric must be string")
		}
	}
	if v, ok := optional["Page"]; ok {
		if Page, ok := v.(string); ok {
			args.Query.Set("Page", Page)
		} else {
			return nil, errors.New("Page must be string")
		}
	}
	if v, ok := optional["Period"]; ok {
		if Period, ok := v.(string); ok {
			args.Query.Set("Period", Period)
		} else {
			return nil, errors.New("Period must be string")
		}
	}
	if v, ok := optional["Project"]; ok {
		if Project, ok := v.(string); ok {
			args.Query.Set("Project", Project)
		} else {
			return nil, errors.New("Project must be string")
		}
	}
	if v, ok := optional["StartTime"]; ok {
		if StartTime, ok := v.(string); ok {
			args.Query.Set("StartTime", StartTime)
		} else {
			return nil, errors.New("StartTime must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}

	result := new(QueryMetricResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// QueryMetricResponse represents the response of the api QueryMetric.
type QueryMetricResponse struct {
	Code    string
	Message string
	Success string
	TraceId string
}

// QueryMetricTopN version 2015-08-01
//
// required parameters:
//  name: Metric, type: string
//  name: Period, type: string
//  name: Project, type: string
//  name: StartTime, type: string
//
// optional parameters:
//  name: Dimensions, type: string
//  name: EndTime, type: string
//  name: Extend, type: string
//  name: Top, type: string
//  name: ValueKey, type: string
//  name: _region, type: string
func (api API) QueryMetricTopN(Metric, Period, Project, StartTime string, optional openapi.M) (*QueryMetricTopNResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "QueryMetricTopN")
	args.Method = "GET"
	args.Query.Set("Metric", Metric)
	args.Query.Set("Period", Period)
	args.Query.Set("Project", Project)
	args.Query.Set("StartTime", StartTime)
	args.Scheme = "http"
	if v, ok := optional["Dimensions"]; ok {
		if Dimensions, ok := v.(string); ok {
			args.Query.Set("Dimensions", Dimensions)
		} else {
			return nil, errors.New("Dimensions must be string")
		}
	}
	if v, ok := optional["EndTime"]; ok {
		if EndTime, ok := v.(string); ok {
			args.Query.Set("EndTime", EndTime)
		} else {
			return nil, errors.New("EndTime must be string")
		}
	}
	if v, ok := optional["Extend"]; ok {
		if Extend, ok := v.(string); ok {
			args.Query.Set("Extend", Extend)
		} else {
			return nil, errors.New("Extend must be string")
		}
	}
	if v, ok := optional["Top"]; ok {
		if Top, ok := v.(string); ok {
			args.Query.Set("Top", Top)
		} else {
			return nil, errors.New("Top must be string")
		}
	}
	if v, ok := optional["ValueKey"]; ok {
		if ValueKey, ok := v.(string); ok {
			args.Query.Set("ValueKey", ValueKey)
		} else {
			return nil, errors.New("ValueKey must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}

	result := new(QueryMetricTopNResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// QueryMetricTopNResponse represents the response of the api QueryMetricTopN.
type QueryMetricTopNResponse struct {
	Code    string
	Message string
	Success string
	TraceId string
}

// QueryStatistics version 2015-08-01
//
// optional parameters:
//  name: Dimensions, type: string
//  name: EndTime, type: string
//  name: Extend, type: string
//  name: Function, type: string
//  name: Metric, type: string
//  name: Period, type: string
//  name: Project, type: string
//  name: StartTime, type: string
//  name: TargetPeriod, type: string
//  name: _region, type: string
func (api API) QueryStatistics(optional openapi.M) (*QueryStatisticsResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "QueryStatistics")
	args.Method = "GET"
	args.Scheme = "http"
	if v, ok := optional["Dimensions"]; ok {
		if Dimensions, ok := v.(string); ok {
			args.Query.Set("Dimensions", Dimensions)
		} else {
			return nil, errors.New("Dimensions must be string")
		}
	}
	if v, ok := optional["EndTime"]; ok {
		if EndTime, ok := v.(string); ok {
			args.Query.Set("EndTime", EndTime)
		} else {
			return nil, errors.New("EndTime must be string")
		}
	}
	if v, ok := optional["Extend"]; ok {
		if Extend, ok := v.(string); ok {
			args.Query.Set("Extend", Extend)
		} else {
			return nil, errors.New("Extend must be string")
		}
	}
	if v, ok := optional["Function"]; ok {
		if Function, ok := v.(string); ok {
			args.Query.Set("Function", Function)
		} else {
			return nil, errors.New("Function must be string")
		}
	}
	if v, ok := optional["Metric"]; ok {
		if Metric, ok := v.(string); ok {
			args.Query.Set("Metric", Metric)
		} else {
			return nil, errors.New("Metric must be string")
		}
	}
	if v, ok := optional["Period"]; ok {
		if Period, ok := v.(string); ok {
			args.Query.Set("Period", Period)
		} else {
			return nil, errors.New("Period must be string")
		}
	}
	if v, ok := optional["Project"]; ok {
		if Project, ok := v.(string); ok {
			args.Query.Set("Project", Project)
		} else {
			return nil, errors.New("Project must be string")
		}
	}
	if v, ok := optional["StartTime"]; ok {
		if StartTime, ok := v.(string); ok {
			args.Query.Set("StartTime", StartTime)
		} else {
			return nil, errors.New("StartTime must be string")
		}
	}
	if v, ok := optional["TargetPeriod"]; ok {
		if TargetPeriod, ok := v.(string); ok {
			args.Query.Set("TargetPeriod", TargetPeriod)
		} else {
			return nil, errors.New("TargetPeriod must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}

	result := new(QueryStatisticsResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// QueryStatisticsResponse represents the response of the api QueryStatistics.
type QueryStatisticsResponse struct {
	Code    string
	Message string
	Success string
	TraceId string
}

// StartMetricStream version 2015-08-01
//
// optional parameters:
//  name: MetricStreamName, type: string
//  name: ProjectName, type: string
//  name: _region, type: string
func (api API) StartMetricStream(optional openapi.M) (*StartMetricStreamResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "StartMetricStream")
	args.Method = "GET"
	args.Scheme = "http"
	if v, ok := optional["MetricStreamName"]; ok {
		if MetricStreamName, ok := v.(string); ok {
			args.Query.Set("MetricStreamName", MetricStreamName)
		} else {
			return nil, errors.New("MetricStreamName must be string")
		}
	}
	if v, ok := optional["ProjectName"]; ok {
		if ProjectName, ok := v.(string); ok {
			args.Query.Set("ProjectName", ProjectName)
		} else {
			return nil, errors.New("ProjectName must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}

	result := new(StartMetricStreamResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// StartMetricStreamResponse represents the response of the api StartMetricStream.
type StartMetricStreamResponse struct {
	Code    string
	Message string
	Success string
	TraceId string
}

// StartProject version 2015-08-01
//
// optional parameters:
//  name: ProjectName, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
func (api API) StartProject(optional openapi.M) (*StartProjectResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "StartProject")
	args.Scheme = "http"
	if v, ok := optional["ProjectName"]; ok {
		if ProjectName, ok := v.(string); ok {
			args.Query.Set("ProjectName", ProjectName)
		} else {
			return nil, errors.New("ProjectName must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}

	result := new(StartProjectResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// StartProjectResponse represents the response of the api StartProject.
type StartProjectResponse struct {
	Code    string
	Message string
	Success string
	TraceId string
}

// StatusProject version 2015-08-01
//
// optional parameters:
//  name: ProjectName, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
func (api API) StatusProject(optional openapi.M) (*StatusProjectResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "StatusProject")
	args.Scheme = "http"
	if v, ok := optional["ProjectName"]; ok {
		if ProjectName, ok := v.(string); ok {
			args.Query.Set("ProjectName", ProjectName)
		} else {
			return nil, errors.New("ProjectName must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}

	result := new(StatusProjectResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// StatusProjectResponse represents the response of the api StatusProject.
type StatusProjectResponse struct {
	Code    string
	Message string
	Result  string
	Success string
	TraceId string
}

// StopMetricStream version 2015-08-01
//
// optional parameters:
//  name: MetricStreamName, type: string
//  name: ProjectName, type: string
//  name: _region, type: string
func (api API) StopMetricStream(optional openapi.M) (*StopMetricStreamResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "StopMetricStream")
	args.Method = "GET"
	args.Scheme = "http"
	if v, ok := optional["MetricStreamName"]; ok {
		if MetricStreamName, ok := v.(string); ok {
			args.Query.Set("MetricStreamName", MetricStreamName)
		} else {
			return nil, errors.New("MetricStreamName must be string")
		}
	}
	if v, ok := optional["ProjectName"]; ok {
		if ProjectName, ok := v.(string); ok {
			args.Query.Set("ProjectName", ProjectName)
		} else {
			return nil, errors.New("ProjectName must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}

	result := new(StopMetricStreamResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// StopMetricStreamResponse represents the response of the api StopMetricStream.
type StopMetricStreamResponse struct {
	Code    string
	Message string
	Success string
	TraceId string
}

// StopProject version 2015-08-01
//
// optional parameters:
//  name: ProjectName, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
func (api API) StopProject(optional openapi.M) (*StopProjectResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "StopProject")
	args.Scheme = "http"
	if v, ok := optional["ProjectName"]; ok {
		if ProjectName, ok := v.(string); ok {
			args.Query.Set("ProjectName", ProjectName)
		} else {
			return nil, errors.New("ProjectName must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}

	result := new(StopProjectResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// StopProjectResponse represents the response of the api StopProject.
type StopProjectResponse struct {
	Code    string
	Message string
	Success string
	TraceId string
}

// UpdateDimTable version 2015-08-01
//
// optional parameters:
//  name: DimTable, type: string
//  name: DimTableName, type: string
//  name: _region, type: string
func (api API) UpdateDimTable(optional openapi.M) (*UpdateDimTableResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "UpdateDimTable")
	args.Method = "POST"
	args.Scheme = "http"
	if v, ok := optional["DimTable"]; ok {
		if DimTable, ok := v.(string); ok {
			args.Body.Set("DimTable", DimTable)
		} else {
			return nil, errors.New("DimTable must be string")
		}
	}
	if v, ok := optional["DimTableName"]; ok {
		if DimTableName, ok := v.(string); ok {
			args.Query.Set("DimTableName", DimTableName)
		} else {
			return nil, errors.New("DimTableName must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}

	result := new(UpdateDimTableResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// UpdateDimTableResponse represents the response of the api UpdateDimTable.
type UpdateDimTableResponse struct {
	Code    string
	Message string
	Success string
	TraceId string
}

// UpdateMetricStream version 2015-08-01
//
// optional parameters:
//  name: MetricStream, type: string
//  name: MetricStreamName, type: string
//  name: ProjectName, type: string
//  name: _region, type: string
func (api API) UpdateMetricStream(optional openapi.M) (*UpdateMetricStreamResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "UpdateMetricStream")
	args.Method = "POST"
	args.Scheme = "http"
	if v, ok := optional["MetricStream"]; ok {
		if MetricStream, ok := v.(string); ok {
			args.Body.Set("MetricStream", MetricStream)
		} else {
			return nil, errors.New("MetricStream must be string")
		}
	}
	if v, ok := optional["MetricStreamName"]; ok {
		if MetricStreamName, ok := v.(string); ok {
			args.Query.Set("MetricStreamName", MetricStreamName)
		} else {
			return nil, errors.New("MetricStreamName must be string")
		}
	}
	if v, ok := optional["ProjectName"]; ok {
		if ProjectName, ok := v.(string); ok {
			args.Query.Set("ProjectName", ProjectName)
		} else {
			return nil, errors.New("ProjectName must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}

	result := new(UpdateMetricStreamResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// UpdateMetricStreamResponse represents the response of the api UpdateMetricStream.
type UpdateMetricStreamResponse struct {
	Code    string
	Message string
	Success string
	TraceId string
}

// UpdateMetrics version 2015-08-01
//
// optional parameters:
//  name: MetricName, type: string
//  name: MetricStreamName, type: string
//  name: Metrics, type: string
//  name: ProjectName, type: string
//  name: _region, type: string
func (api API) UpdateMetrics(optional openapi.M) (*UpdateMetricsResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "UpdateMetrics")
	args.Method = "POST"
	args.Scheme = "http"
	if v, ok := optional["MetricName"]; ok {
		if MetricName, ok := v.(string); ok {
			args.Query.Set("MetricName", MetricName)
		} else {
			return nil, errors.New("MetricName must be string")
		}
	}
	if v, ok := optional["MetricStreamName"]; ok {
		if MetricStreamName, ok := v.(string); ok {
			args.Query.Set("MetricStreamName", MetricStreamName)
		} else {
			return nil, errors.New("MetricStreamName must be string")
		}
	}
	if v, ok := optional["Metrics"]; ok {
		if Metrics, ok := v.(string); ok {
			args.Body.Set("Metrics", Metrics)
		} else {
			return nil, errors.New("Metrics must be string")
		}
	}
	if v, ok := optional["ProjectName"]; ok {
		if ProjectName, ok := v.(string); ok {
			args.Query.Set("ProjectName", ProjectName)
		} else {
			return nil, errors.New("ProjectName must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}

	result := new(UpdateMetricsResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// UpdateMetricsResponse represents the response of the api UpdateMetrics.
type UpdateMetricsResponse struct {
	Code    string
	Message string
	Success string
	TraceId string
}

// UpdateProject version 2015-08-01
//
// optional parameters:
//  name: Project, type: string
//  name: ProjectName, type: string
//  name: _region, type: string
func (api API) UpdateProject(optional openapi.M) (*UpdateProjectResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "UpdateProject")
	args.Method = "POST"
	args.Scheme = "http"
	if v, ok := optional["Project"]; ok {
		if Project, ok := v.(string); ok {
			args.Body.Set("Project", Project)
		} else {
			return nil, errors.New("Project must be string")
		}
	}
	if v, ok := optional["ProjectName"]; ok {
		if ProjectName, ok := v.(string); ok {
			args.Query.Set("ProjectName", ProjectName)
		} else {
			return nil, errors.New("ProjectName must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}

	result := new(UpdateProjectResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// UpdateProjectResponse represents the response of the api UpdateProject.
type UpdateProjectResponse struct {
	Code    string
	Message string
	Success string
	TraceId string
}

// UpdateSQLMetrics version 2015-08-01
//
// optional parameters:
//  name: IsPublic, type: int
//  name: MetricName, type: string
//  name: ProjectName, type: string
//  name: Sql, type: string
//  name: _region, type: string
func (api API) UpdateSQLMetrics(optional openapi.M) (*UpdateSQLMetricsResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "UpdateSQLMetrics")
	args.Method = "POST"
	args.Scheme = "http"
	if v, ok := optional["IsPublic"]; ok {
		if IsPublic, ok := v.(int); ok {
			args.Query.Set("IsPublic", fmt.Sprint(IsPublic))
		} else {
			return nil, errors.New("IsPublic must be int")
		}
	}
	if v, ok := optional["MetricName"]; ok {
		if MetricName, ok := v.(string); ok {
			args.Query.Set("MetricName", MetricName)
		} else {
			return nil, errors.New("MetricName must be string")
		}
	}
	if v, ok := optional["ProjectName"]; ok {
		if ProjectName, ok := v.(string); ok {
			args.Query.Set("ProjectName", ProjectName)
		} else {
			return nil, errors.New("ProjectName must be string")
		}
	}
	if v, ok := optional["Sql"]; ok {
		if Sql, ok := v.(string); ok {
			args.Body.Set("Sql", Sql)
		} else {
			return nil, errors.New("Sql must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}

	result := new(UpdateSQLMetricsResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// UpdateSQLMetricsResponse represents the response of the api UpdateSQLMetrics.
type UpdateSQLMetricsResponse struct {
	Code    string
	Message string
	Success string
	TraceId string
}
