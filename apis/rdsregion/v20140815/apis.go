// Copyright 2015 Chen Xianren. All rights reserved.
// Code generated by openapi-meta; DO NOT EDIT

package rdsregion

import (
	"errors"
	"fmt"

	"git.oschina.net/cxr29/aliyun-openapi-go-sdk"
)

var (
	_ = errors.New("")
	_ = fmt.Sprint("")
	_ = make(openapi.M)
)

type API struct {
	openapi.Service
}

func New(accessKeyId, accessKeySecret string) API {
	return API{openapi.NewService(accessKeyId, accessKeySecret)}
}

func NewParams() openapi.Params {
	args := openapi.NewParams()
	args.Product = Product
	args.Style = Style
	args.Version = Version
	return args
}

const (
	Product = "Rds_Region"
	Style   = "RPC"
	Version = "2014-08-15"
)

// AddTagsToResource version 2014-08-15
//
// required parameters:
//  name: DBInstanceId, type: string
//
// optional parameters:
//  name: ClientToken, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: Tag.1.key, type: string
//  name: Tag.1.value, type: string
//  name: Tag.2.key, type: string
//  name: Tag.2.value, type: string
//  name: Tag.3.key, type: string
//  name: Tag.3.value, type: string
//  name: Tag.4.key, type: string
//  name: Tag.4.value, type: string
//  name: Tag.5.key, type: string
//  name: Tag.5.value, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
//  name: proxyId, type: string
func (api API) AddTagsToResource(DBInstanceId string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "AddTagsToResource")
	args.Query.Set("DBInstanceId", DBInstanceId)
	if v, ok := optional["ClientToken"]; ok {
		if ClientToken, ok := v.(string); ok {
			args.Query.Set("ClientToken", ClientToken)
		} else {
			return nil, errors.New("ClientToken must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["Tag.1.key"]; ok {
		if Tag1key, ok := v.(string); ok {
			args.Query.Set("Tag.1.key", Tag1key)
		} else {
			return nil, errors.New("Tag.1.key must be string")
		}
	}
	if v, ok := optional["Tag.1.value"]; ok {
		if Tag1value, ok := v.(string); ok {
			args.Query.Set("Tag.1.value", Tag1value)
		} else {
			return nil, errors.New("Tag.1.value must be string")
		}
	}
	if v, ok := optional["Tag.2.key"]; ok {
		if Tag2key, ok := v.(string); ok {
			args.Query.Set("Tag.2.key", Tag2key)
		} else {
			return nil, errors.New("Tag.2.key must be string")
		}
	}
	if v, ok := optional["Tag.2.value"]; ok {
		if Tag2value, ok := v.(string); ok {
			args.Query.Set("Tag.2.value", Tag2value)
		} else {
			return nil, errors.New("Tag.2.value must be string")
		}
	}
	if v, ok := optional["Tag.3.key"]; ok {
		if Tag3key, ok := v.(string); ok {
			args.Query.Set("Tag.3.key", Tag3key)
		} else {
			return nil, errors.New("Tag.3.key must be string")
		}
	}
	if v, ok := optional["Tag.3.value"]; ok {
		if Tag3value, ok := v.(string); ok {
			args.Query.Set("Tag.3.value", Tag3value)
		} else {
			return nil, errors.New("Tag.3.value must be string")
		}
	}
	if v, ok := optional["Tag.4.key"]; ok {
		if Tag4key, ok := v.(string); ok {
			args.Query.Set("Tag.4.key", Tag4key)
		} else {
			return nil, errors.New("Tag.4.key must be string")
		}
	}
	if v, ok := optional["Tag.4.value"]; ok {
		if Tag4value, ok := v.(string); ok {
			args.Query.Set("Tag.4.value", Tag4value)
		} else {
			return nil, errors.New("Tag.4.value must be string")
		}
	}
	if v, ok := optional["Tag.5.key"]; ok {
		if Tag5key, ok := v.(string); ok {
			args.Query.Set("Tag.5.key", Tag5key)
		} else {
			return nil, errors.New("Tag.5.key must be string")
		}
	}
	if v, ok := optional["Tag.5.value"]; ok {
		if Tag5value, ok := v.(string); ok {
			args.Query.Set("Tag.5.value", Tag5value)
		} else {
			return nil, errors.New("Tag.5.value must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}
	if v, ok := optional["proxyId"]; ok {
		if proxyId, ok := v.(string); ok {
			args.Query.Set("proxyId", proxyId)
		} else {
			return nil, errors.New("proxyId must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// AllocateInstancePrivateConnection version 2014-08-15
//
// required parameters:
//  name: ConnectionStringPrefix, type: string
//  name: DBInstanceId, type: string
//  name: Port, type: string
//
// optional parameters:
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) AllocateInstancePrivateConnection(ConnectionStringPrefix, DBInstanceId, Port string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "AllocateInstancePrivateConnection")
	args.Query.Set("ConnectionStringPrefix", ConnectionStringPrefix)
	args.Query.Set("DBInstanceId", DBInstanceId)
	args.Query.Set("Port", Port)
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// AllocateInstancePublicConnection version 2014-08-15
//
// required parameters:
//  name: ConnectionStringPrefix, type: string
//  name: DBInstanceId, type: string
//  name: Port, type: string
//
// optional parameters:
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) AllocateInstancePublicConnection(ConnectionStringPrefix, DBInstanceId, Port string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "AllocateInstancePublicConnection")
	args.Query.Set("ConnectionStringPrefix", ConnectionStringPrefix)
	args.Query.Set("DBInstanceId", DBInstanceId)
	args.Query.Set("Port", Port)
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// BatchGrantAccountPrivilege version 2014-08-15
//
// required parameters:
//  name: AccountName, type: string
//  name: AccountPrivilege, type: string
//  name: DBInstanceId, type: string
//  name: DBName, type: string
//
// optional parameters:
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) BatchGrantAccountPrivilege(AccountName, AccountPrivilege, DBInstanceId, DBName string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "BatchGrantAccountPrivilege")
	args.Query.Set("AccountName", AccountName)
	args.Query.Set("AccountPrivilege", AccountPrivilege)
	args.Query.Set("DBInstanceId", DBInstanceId)
	args.Query.Set("DBName", DBName)
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// BatchRevokeAccountPrivilege version 2014-08-15
//
// required parameters:
//  name: AccountName, type: string
//  name: DBInstanceId, type: string
//  name: DBName, type: string
//
// optional parameters:
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) BatchRevokeAccountPrivilege(AccountName, DBInstanceId, DBName string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "BatchRevokeAccountPrivilege")
	args.Query.Set("AccountName", AccountName)
	args.Query.Set("DBInstanceId", DBInstanceId)
	args.Query.Set("DBName", DBName)
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// CancelImport version 2014-08-15
//
// required parameters:
//  name: DBInstanceId, type: string
//  name: ImportId, type: int
//
// optional parameters:
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) CancelImport(DBInstanceId string, ImportId int, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "CancelImport")
	args.Query.Set("DBInstanceId", DBInstanceId)
	args.Query.Set("ImportId", fmt.Sprint(ImportId))
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// CheckAccountNameAvailable version 2014-08-15
//
// required parameters:
//  name: AccountName, type: string
//  name: DBInstanceId, type: string
//
// optional parameters:
//  name: ClientToken, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) CheckAccountNameAvailable(AccountName, DBInstanceId string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "CheckAccountNameAvailable")
	args.Query.Set("AccountName", AccountName)
	args.Query.Set("DBInstanceId", DBInstanceId)
	if v, ok := optional["ClientToken"]; ok {
		if ClientToken, ok := v.(string); ok {
			args.Query.Set("ClientToken", ClientToken)
		} else {
			return nil, errors.New("ClientToken must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// CheckDBNameAvailable version 2014-08-15
//
// required parameters:
//  name: DBInstanceId, type: string
//  name: DBName, type: string
//
// optional parameters:
//  name: ClientToken, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) CheckDBNameAvailable(DBInstanceId, DBName string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "CheckDBNameAvailable")
	args.Query.Set("DBInstanceId", DBInstanceId)
	args.Query.Set("DBName", DBName)
	if v, ok := optional["ClientToken"]; ok {
		if ClientToken, ok := v.(string); ok {
			args.Query.Set("ClientToken", ClientToken)
		} else {
			return nil, errors.New("ClientToken must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// CreateAccount version 2014-08-15
//
// required parameters:
//  name: AccountName, type: string
//  name: AccountPassword, type: string
//  name: DBInstanceId, type: string
//
// optional parameters:
//  name: AccountDescription, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) CreateAccount(AccountName, AccountPassword, DBInstanceId string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "CreateAccount")
	args.Query.Set("AccountName", AccountName)
	args.Query.Set("AccountPassword", AccountPassword)
	args.Query.Set("DBInstanceId", DBInstanceId)
	if v, ok := optional["AccountDescription"]; ok {
		if AccountDescription, ok := v.(string); ok {
			args.Query.Set("AccountDescription", AccountDescription)
		} else {
			return nil, errors.New("AccountDescription must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// CreateAccountForInner version 2014-08-15
//
// required parameters:
//  name: AccountName, type: string
//  name: AccountPassword, type: string
//  name: DBInstanceId, type: string
//
// optional parameters:
//  name: AccountDescription, type: string
//  name: AccountPrivilege, type: string
//  name: DBName, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) CreateAccountForInner(AccountName, AccountPassword, DBInstanceId string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "CreateAccountForInner")
	args.Query.Set("AccountName", AccountName)
	args.Query.Set("AccountPassword", AccountPassword)
	args.Query.Set("DBInstanceId", DBInstanceId)
	if v, ok := optional["AccountDescription"]; ok {
		if AccountDescription, ok := v.(string); ok {
			args.Query.Set("AccountDescription", AccountDescription)
		} else {
			return nil, errors.New("AccountDescription must be string")
		}
	}
	if v, ok := optional["AccountPrivilege"]; ok {
		if AccountPrivilege, ok := v.(string); ok {
			args.Query.Set("AccountPrivilege", AccountPrivilege)
		} else {
			return nil, errors.New("AccountPrivilege must be string")
		}
	}
	if v, ok := optional["DBName"]; ok {
		if DBName, ok := v.(string); ok {
			args.Query.Set("DBName", DBName)
		} else {
			return nil, errors.New("DBName must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// CreateBackup version 2014-08-15
//
// required parameters:
//  name: DBInstanceId, type: string
//
// optional parameters:
//  name: BackupMethod, type: string
//  name: BackupType, type: string
//  name: DBName, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) CreateBackup(DBInstanceId string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "CreateBackup")
	args.Query.Set("DBInstanceId", DBInstanceId)
	if v, ok := optional["BackupMethod"]; ok {
		if BackupMethod, ok := v.(string); ok {
			args.Query.Set("BackupMethod", BackupMethod)
		} else {
			return nil, errors.New("BackupMethod must be string")
		}
	}
	if v, ok := optional["BackupType"]; ok {
		if BackupType, ok := v.(string); ok {
			args.Query.Set("BackupType", BackupType)
		} else {
			return nil, errors.New("BackupType must be string")
		}
	}
	if v, ok := optional["DBName"]; ok {
		if DBName, ok := v.(string); ok {
			args.Query.Set("DBName", DBName)
		} else {
			return nil, errors.New("DBName must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// CreateDBInstance version 2014-08-15
//
// required parameters:
//  name: ClientToken, type: string
//  name: DBInstanceClass, type: string
//  name: DBInstanceNetType, type: string
//  name: DBInstanceStorage, type: int
//  name: Engine, type: string
//  name: EngineVersion, type: string
//  name: PayType, type: string
//  name: SecurityIPList, type: string
//
// optional parameters:
//  name: ConnectionMode, type: string
//  name: DBInstanceDescription, type: string
//  name: InstanceNetworkType, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: PrivateIpAddress, type: string
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: SystemDBCharset, type: string
//  name: VPCId, type: string
//  name: VSwitchId, type: string
//  name: ZoneId, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) CreateDBInstance(ClientToken, DBInstanceClass, DBInstanceNetType string, DBInstanceStorage int, Engine, EngineVersion, PayType, SecurityIPList string, optional openapi.M) (*CreateDBInstanceResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "CreateDBInstance")
	args.Query.Set("ClientToken", ClientToken)
	args.Query.Set("DBInstanceClass", DBInstanceClass)
	args.Query.Set("DBInstanceNetType", DBInstanceNetType)
	args.Query.Set("DBInstanceStorage", fmt.Sprint(DBInstanceStorage))
	args.Query.Set("Engine", Engine)
	args.Query.Set("EngineVersion", EngineVersion)
	args.Query.Set("PayType", PayType)
	args.Query.Set("SecurityIPList", SecurityIPList)
	if v, ok := optional["ConnectionMode"]; ok {
		if ConnectionMode, ok := v.(string); ok {
			args.Query.Set("ConnectionMode", ConnectionMode)
		} else {
			return nil, errors.New("ConnectionMode must be string")
		}
	}
	if v, ok := optional["DBInstanceDescription"]; ok {
		if DBInstanceDescription, ok := v.(string); ok {
			args.Query.Set("DBInstanceDescription", DBInstanceDescription)
		} else {
			return nil, errors.New("DBInstanceDescription must be string")
		}
	}
	if v, ok := optional["InstanceNetworkType"]; ok {
		if InstanceNetworkType, ok := v.(string); ok {
			args.Query.Set("InstanceNetworkType", InstanceNetworkType)
		} else {
			return nil, errors.New("InstanceNetworkType must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["PrivateIpAddress"]; ok {
		if PrivateIpAddress, ok := v.(string); ok {
			args.Query.Set("PrivateIpAddress", PrivateIpAddress)
		} else {
			return nil, errors.New("PrivateIpAddress must be string")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["SystemDBCharset"]; ok {
		if SystemDBCharset, ok := v.(string); ok {
			args.Query.Set("SystemDBCharset", SystemDBCharset)
		} else {
			return nil, errors.New("SystemDBCharset must be string")
		}
	}
	if v, ok := optional["VPCId"]; ok {
		if VPCId, ok := v.(string); ok {
			args.Query.Set("VPCId", VPCId)
		} else {
			return nil, errors.New("VPCId must be string")
		}
	}
	if v, ok := optional["VSwitchId"]; ok {
		if VSwitchId, ok := v.(string); ok {
			args.Query.Set("VSwitchId", VSwitchId)
		} else {
			return nil, errors.New("VSwitchId must be string")
		}
	}
	if v, ok := optional["ZoneId"]; ok {
		if ZoneId, ok := v.(string); ok {
			args.Query.Set("ZoneId", ZoneId)
		} else {
			return nil, errors.New("ZoneId must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(CreateDBInstanceResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// CreateDBInstanceResponse represents the response of the api CreateDBInstance.
type CreateDBInstanceResponse struct {
	ConnectionString string
	DBInstanceId     string
	OrderId          string
	Port             string
}

// CreateDBInstanceForChannel version 2014-08-15
//
// required parameters:
//  name: AccountName, type: string
//  name: AccountPassword, type: string
//  name: ClientToken, type: string
//  name: DBInstanceClass, type: string
//  name: DBInstanceNetType, type: string
//  name: DBInstanceStorage, type: int
//  name: Engine, type: string
//  name: EngineVersion, type: string
//  name: PayType, type: string
//  name: SecurityIPList, type: string
//
// optional parameters:
//  name: DBInstanceDescription, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: SystemDBCharset, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) CreateDBInstanceForChannel(AccountName, AccountPassword, ClientToken, DBInstanceClass, DBInstanceNetType string, DBInstanceStorage int, Engine, EngineVersion, PayType, SecurityIPList string, optional openapi.M) (*CreateDBInstanceForChannelResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "CreateDBInstanceForChannel")
	args.Query.Set("AccountName", AccountName)
	args.Query.Set("AccountPassword", AccountPassword)
	args.Query.Set("ClientToken", ClientToken)
	args.Query.Set("DBInstanceClass", DBInstanceClass)
	args.Query.Set("DBInstanceNetType", DBInstanceNetType)
	args.Query.Set("DBInstanceStorage", fmt.Sprint(DBInstanceStorage))
	args.Query.Set("Engine", Engine)
	args.Query.Set("EngineVersion", EngineVersion)
	args.Query.Set("PayType", PayType)
	args.Query.Set("SecurityIPList", SecurityIPList)
	if v, ok := optional["DBInstanceDescription"]; ok {
		if DBInstanceDescription, ok := v.(string); ok {
			args.Query.Set("DBInstanceDescription", DBInstanceDescription)
		} else {
			return nil, errors.New("DBInstanceDescription must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["SystemDBCharset"]; ok {
		if SystemDBCharset, ok := v.(string); ok {
			args.Query.Set("SystemDBCharset", SystemDBCharset)
		} else {
			return nil, errors.New("SystemDBCharset must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(CreateDBInstanceForChannelResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// CreateDBInstanceForChannelResponse represents the response of the api CreateDBInstanceForChannel.
type CreateDBInstanceForChannelResponse struct {
	ConnectionString string
	DBInstanceId     string
	OrderId          string
	Port             string
}

// CreateDBInstanceforFirstPay version 2014-08-15
//
// required parameters:
//  name: ClientToken, type: string
//  name: DBInstanceClass, type: string
//  name: DBInstanceNetType, type: string
//  name: DBInstanceStorage, type: int
//  name: Engine, type: string
//
// optional parameters:
//  name: CharacterSetName, type: string
//  name: DBInstanceRemarks, type: string
//  name: EngineVersion, type: string
//  name: OwnerAccount, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
//  name: bid, type: string
//  name: bidLoginEmail, type: string
//  name: uid, type: int64
//  name: uidLoginEmail, type: string
func (api API) CreateDBInstanceforFirstPay(ClientToken, DBInstanceClass, DBInstanceNetType string, DBInstanceStorage int, Engine string, optional openapi.M) (*CreateDBInstanceforFirstPayResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "CreateDBInstanceforFirstPay")
	args.Query.Set("ClientToken", ClientToken)
	args.Query.Set("DBInstanceClass", DBInstanceClass)
	args.Query.Set("DBInstanceNetType", DBInstanceNetType)
	args.Query.Set("DBInstanceStorage", fmt.Sprint(DBInstanceStorage))
	args.Query.Set("Engine", Engine)
	if v, ok := optional["CharacterSetName"]; ok {
		if CharacterSetName, ok := v.(string); ok {
			args.Query.Set("CharacterSetName", CharacterSetName)
		} else {
			return nil, errors.New("CharacterSetName must be string")
		}
	}
	if v, ok := optional["DBInstanceRemarks"]; ok {
		if DBInstanceRemarks, ok := v.(string); ok {
			args.Query.Set("DBInstanceRemarks", DBInstanceRemarks)
		} else {
			return nil, errors.New("DBInstanceRemarks must be string")
		}
	}
	if v, ok := optional["EngineVersion"]; ok {
		if EngineVersion, ok := v.(string); ok {
			args.Query.Set("EngineVersion", EngineVersion)
		} else {
			return nil, errors.New("EngineVersion must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}
	if v, ok := optional["bid"]; ok {
		if bid, ok := v.(string); ok {
			args.Query.Set("bid", bid)
		} else {
			return nil, errors.New("bid must be string")
		}
	}
	if v, ok := optional["bidLoginEmail"]; ok {
		if bidLoginEmail, ok := v.(string); ok {
			args.Query.Set("bidLoginEmail", bidLoginEmail)
		} else {
			return nil, errors.New("bidLoginEmail must be string")
		}
	}
	if v, ok := optional["uid"]; ok {
		if uid, ok := v.(int64); ok {
			args.Query.Set("uid", fmt.Sprint(uid))
		} else {
			return nil, errors.New("uid must be int64")
		}
	}
	if v, ok := optional["uidLoginEmail"]; ok {
		if uidLoginEmail, ok := v.(string); ok {
			args.Query.Set("uidLoginEmail", uidLoginEmail)
		} else {
			return nil, errors.New("uidLoginEmail must be string")
		}
	}

	result := new(CreateDBInstanceforFirstPayResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// CreateDBInstanceforFirstPayResponse represents the response of the api CreateDBInstanceforFirstPay.
type CreateDBInstanceforFirstPayResponse struct {
	ConnectionString string
	DBInstanceId     string
	Port             string
}

// CreateDatabase version 2014-08-15
//
// required parameters:
//  name: CharacterSetName, type: string
//  name: DBInstanceId, type: string
//  name: DBName, type: string
//
// optional parameters:
//  name: DBDescription, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) CreateDatabase(CharacterSetName, DBInstanceId, DBName string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "CreateDatabase")
	args.Query.Set("CharacterSetName", CharacterSetName)
	args.Query.Set("DBInstanceId", DBInstanceId)
	args.Query.Set("DBName", DBName)
	if v, ok := optional["DBDescription"]; ok {
		if DBDescription, ok := v.(string); ok {
			args.Query.Set("DBDescription", DBDescription)
		} else {
			return nil, errors.New("DBDescription must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// CreateDatabaseForInner version 2014-08-15
//
// required parameters:
//  name: CharacterSetName, type: string
//  name: DBInstanceId, type: string
//  name: DBName, type: string
//
// optional parameters:
//  name: AccountName, type: string
//  name: AccountPassword, type: string
//  name: AccountPrivilege, type: string
//  name: DBDescription, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) CreateDatabaseForInner(CharacterSetName, DBInstanceId, DBName string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "CreateDatabaseForInner")
	args.Query.Set("CharacterSetName", CharacterSetName)
	args.Query.Set("DBInstanceId", DBInstanceId)
	args.Query.Set("DBName", DBName)
	if v, ok := optional["AccountName"]; ok {
		if AccountName, ok := v.(string); ok {
			args.Query.Set("AccountName", AccountName)
		} else {
			return nil, errors.New("AccountName must be string")
		}
	}
	if v, ok := optional["AccountPassword"]; ok {
		if AccountPassword, ok := v.(string); ok {
			args.Query.Set("AccountPassword", AccountPassword)
		} else {
			return nil, errors.New("AccountPassword must be string")
		}
	}
	if v, ok := optional["AccountPrivilege"]; ok {
		if AccountPrivilege, ok := v.(string); ok {
			args.Query.Set("AccountPrivilege", AccountPrivilege)
		} else {
			return nil, errors.New("AccountPrivilege must be string")
		}
	}
	if v, ok := optional["DBDescription"]; ok {
		if DBDescription, ok := v.(string); ok {
			args.Query.Set("DBDescription", DBDescription)
		} else {
			return nil, errors.New("DBDescription must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// CreatePostpaidDBInstance version 2014-08-15
//
// required parameters:
//  name: ClientToken, type: string
//  name: DBInstanceClass, type: string
//  name: DBInstanceNetType, type: string
//  name: DBInstanceStorage, type: int
//  name: Engine, type: string
//  name: EngineVersion, type: string
//  name: SecurityIPList, type: string
//
// optional parameters:
//  name: DBInstanceDescription, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) CreatePostpaidDBInstance(ClientToken, DBInstanceClass, DBInstanceNetType string, DBInstanceStorage int, Engine, EngineVersion, SecurityIPList string, optional openapi.M) (*CreatePostpaidDBInstanceResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "CreatePostpaidDBInstance")
	args.Query.Set("ClientToken", ClientToken)
	args.Query.Set("DBInstanceClass", DBInstanceClass)
	args.Query.Set("DBInstanceNetType", DBInstanceNetType)
	args.Query.Set("DBInstanceStorage", fmt.Sprint(DBInstanceStorage))
	args.Query.Set("Engine", Engine)
	args.Query.Set("EngineVersion", EngineVersion)
	args.Query.Set("SecurityIPList", SecurityIPList)
	if v, ok := optional["DBInstanceDescription"]; ok {
		if DBInstanceDescription, ok := v.(string); ok {
			args.Query.Set("DBInstanceDescription", DBInstanceDescription)
		} else {
			return nil, errors.New("DBInstanceDescription must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(CreatePostpaidDBInstanceResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// CreatePostpaidDBInstanceResponse represents the response of the api CreatePostpaidDBInstance.
type CreatePostpaidDBInstanceResponse struct {
	ConnectionString string
	DBInstanceId     string
	OrderId          string
	Port             string
}

// CreatePostpaidDBInstanceForChannel version 2014-08-15
//
// required parameters:
//  name: ClientToken, type: string
//  name: DBInstanceClass, type: string
//  name: DBInstanceNetType, type: string
//  name: DBInstanceStorage, type: int
//  name: Engine, type: string
//  name: EngineVersion, type: string
//  name: SecurityIPList, type: string
//
// optional parameters:
//  name: DBInstanceDescription, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) CreatePostpaidDBInstanceForChannel(ClientToken, DBInstanceClass, DBInstanceNetType string, DBInstanceStorage int, Engine, EngineVersion, SecurityIPList string, optional openapi.M) (*CreatePostpaidDBInstanceForChannelResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "CreatePostpaidDBInstanceForChannel")
	args.Query.Set("ClientToken", ClientToken)
	args.Query.Set("DBInstanceClass", DBInstanceClass)
	args.Query.Set("DBInstanceNetType", DBInstanceNetType)
	args.Query.Set("DBInstanceStorage", fmt.Sprint(DBInstanceStorage))
	args.Query.Set("Engine", Engine)
	args.Query.Set("EngineVersion", EngineVersion)
	args.Query.Set("SecurityIPList", SecurityIPList)
	if v, ok := optional["DBInstanceDescription"]; ok {
		if DBInstanceDescription, ok := v.(string); ok {
			args.Query.Set("DBInstanceDescription", DBInstanceDescription)
		} else {
			return nil, errors.New("DBInstanceDescription must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(CreatePostpaidDBInstanceForChannelResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// CreatePostpaidDBInstanceForChannelResponse represents the response of the api CreatePostpaidDBInstanceForChannel.
type CreatePostpaidDBInstanceForChannelResponse struct {
	ConnectionString string
	DBInstanceId     string
	OrderId          string
	Port             string
}

// CreateReadOnlyDBInstance version 2014-08-15
//
// required parameters:
//  name: ClientToken, type: string
//  name: DBInstanceClass, type: string
//  name: DBInstanceId, type: string
//  name: DBInstanceStorage, type: int
//  name: EngineVersion, type: string
//  name: PayType, type: string
//  name: ZoneId, type: string
//
// optional parameters:
//  name: DBInstanceDescription, type: string
//  name: InstanceNetworkType, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: PrivateIpAddress, type: string
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: VPCId, type: string
//  name: VSwitchId, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) CreateReadOnlyDBInstance(ClientToken, DBInstanceClass, DBInstanceId string, DBInstanceStorage int, EngineVersion, PayType, ZoneId string, optional openapi.M) (*CreateReadOnlyDBInstanceResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "CreateReadOnlyDBInstance")
	args.Query.Set("ClientToken", ClientToken)
	args.Query.Set("DBInstanceClass", DBInstanceClass)
	args.Query.Set("DBInstanceId", DBInstanceId)
	args.Query.Set("DBInstanceStorage", fmt.Sprint(DBInstanceStorage))
	args.Query.Set("EngineVersion", EngineVersion)
	args.Query.Set("PayType", PayType)
	args.Query.Set("ZoneId", ZoneId)
	if v, ok := optional["DBInstanceDescription"]; ok {
		if DBInstanceDescription, ok := v.(string); ok {
			args.Query.Set("DBInstanceDescription", DBInstanceDescription)
		} else {
			return nil, errors.New("DBInstanceDescription must be string")
		}
	}
	if v, ok := optional["InstanceNetworkType"]; ok {
		if InstanceNetworkType, ok := v.(string); ok {
			args.Query.Set("InstanceNetworkType", InstanceNetworkType)
		} else {
			return nil, errors.New("InstanceNetworkType must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["PrivateIpAddress"]; ok {
		if PrivateIpAddress, ok := v.(string); ok {
			args.Query.Set("PrivateIpAddress", PrivateIpAddress)
		} else {
			return nil, errors.New("PrivateIpAddress must be string")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["VPCId"]; ok {
		if VPCId, ok := v.(string); ok {
			args.Query.Set("VPCId", VPCId)
		} else {
			return nil, errors.New("VPCId must be string")
		}
	}
	if v, ok := optional["VSwitchId"]; ok {
		if VSwitchId, ok := v.(string); ok {
			args.Query.Set("VSwitchId", VSwitchId)
		} else {
			return nil, errors.New("VSwitchId must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(CreateReadOnlyDBInstanceResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// CreateReadOnlyDBInstanceResponse represents the response of the api CreateReadOnlyDBInstance.
type CreateReadOnlyDBInstanceResponse struct {
	ConnectionString string
	DBInstanceId     string
	OrderId          string
	Port             string
}

// CreateTempDBInstance version 2014-08-15
//
// required parameters:
//  name: DBInstanceId, type: string
//
// optional parameters:
//  name: BackupId, type: int
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: RestoreTime, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) CreateTempDBInstance(DBInstanceId string, optional openapi.M) (*CreateTempDBInstanceResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "CreateTempDBInstance")
	args.Query.Set("DBInstanceId", DBInstanceId)
	if v, ok := optional["BackupId"]; ok {
		if BackupId, ok := v.(int); ok {
			args.Query.Set("BackupId", fmt.Sprint(BackupId))
		} else {
			return nil, errors.New("BackupId must be int")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["RestoreTime"]; ok {
		if RestoreTime, ok := v.(string); ok {
			args.Query.Set("RestoreTime", RestoreTime)
		} else {
			return nil, errors.New("RestoreTime must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(CreateTempDBInstanceResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// CreateTempDBInstanceResponse represents the response of the api CreateTempDBInstance.
type CreateTempDBInstanceResponse struct {
	TempDBInstanceId string
}

// CreateUploadPathForSQLServer version 2014-08-15
//
// required parameters:
//  name: DBInstanceId, type: string
//  name: DBName, type: string
//
// optional parameters:
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) CreateUploadPathForSQLServer(DBInstanceId, DBName string, optional openapi.M) (*CreateUploadPathForSQLServerResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "CreateUploadPathForSQLServer")
	args.Query.Set("DBInstanceId", DBInstanceId)
	args.Query.Set("DBName", DBName)
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(CreateUploadPathForSQLServerResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// CreateUploadPathForSQLServerResponse represents the response of the api CreateUploadPathForSQLServer.
type CreateUploadPathForSQLServerResponse struct {
	FileName          string
	InternetFtpServer string
	InternetPort      int
	IntranetFtpserver string
	Intranetport      int
	Password          string
	UserName          string
}

// DeleteAccount version 2014-08-15
//
// required parameters:
//  name: AccountName, type: string
//  name: DBInstanceId, type: string
//
// optional parameters:
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) DeleteAccount(AccountName, DBInstanceId string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "DeleteAccount")
	args.Query.Set("AccountName", AccountName)
	args.Query.Set("DBInstanceId", DBInstanceId)
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DeleteDBInstance version 2014-08-15
//
// required parameters:
//  name: DBInstanceId, type: string
//
// optional parameters:
//  name: ClientToken, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) DeleteDBInstance(DBInstanceId string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "DeleteDBInstance")
	args.Query.Set("DBInstanceId", DBInstanceId)
	if v, ok := optional["ClientToken"]; ok {
		if ClientToken, ok := v.(string); ok {
			args.Query.Set("ClientToken", ClientToken)
		} else {
			return nil, errors.New("ClientToken must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DeleteDatabase version 2014-08-15
//
// required parameters:
//  name: DBInstanceId, type: string
//  name: DBName, type: string
//
// optional parameters:
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) DeleteDatabase(DBInstanceId, DBName string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "DeleteDatabase")
	args.Query.Set("DBInstanceId", DBInstanceId)
	args.Query.Set("DBName", DBName)
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DescibeImportsFromDatabase version 2014-08-15
//
// required parameters:
//  name: DBInstanceId, type: string
//  name: EndTime, type: string
//  name: Engine, type: string
//  name: StartTime, type: string
//
// optional parameters:
//  name: ClientToken, type: string
//  name: ImportId, type: int
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: PageNumber, type: int, min value: 1
//  name: PageSize, type: int
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) DescibeImportsFromDatabase(DBInstanceId, EndTime, Engine, StartTime string, optional openapi.M) (*DescibeImportsFromDatabaseResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "DescibeImportsFromDatabase")
	args.Query.Set("DBInstanceId", DBInstanceId)
	args.Query.Set("EndTime", EndTime)
	args.Query.Set("Engine", Engine)
	args.Query.Set("StartTime", StartTime)
	if v, ok := optional["ClientToken"]; ok {
		if ClientToken, ok := v.(string); ok {
			args.Query.Set("ClientToken", ClientToken)
		} else {
			return nil, errors.New("ClientToken must be string")
		}
	}
	if v, ok := optional["ImportId"]; ok {
		if ImportId, ok := v.(int); ok {
			args.Query.Set("ImportId", fmt.Sprint(ImportId))
		} else {
			return nil, errors.New("ImportId must be int")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["PageNumber"]; ok {
		if PageNumber, ok := v.(int); ok {
			if PageNumber < 1 {
				return nil, errors.New("PageNumber must be equal or greater than 1")
			}
			args.Query.Set("PageNumber", fmt.Sprint(PageNumber))
		} else {
			return nil, errors.New("PageNumber must be int")
		}
	}
	if v, ok := optional["PageSize"]; ok {
		if PageSize, ok := v.(int); ok {
			args.Query.Set("PageSize", fmt.Sprint(PageSize))
		} else {
			return nil, errors.New("PageSize must be int")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(DescibeImportsFromDatabaseResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DescibeImportsFromDatabaseResponse represents the response of the api DescibeImportsFromDatabase.
type DescibeImportsFromDatabaseResponse struct {
	Items struct {
		ImportResultFromDB []struct {
			ImportDataStatus            string // optional values: Canceled|Canceling|Failed|FullExporting|FullImporting|IncrementalImporting|IncrementalWaiting|NotStart|StopSyncing|Success
			ImportDataStatusDescription string
			ImportDataType              string // optional values: Full|Incremental
			ImportId                    int
			IncrementalImportingTime    string
		}
	}
	PageNumber       int
	PageRecordCount  int
	TotalRecordCount int
}

// DescribeAbnormalDBInstances version 2014-08-15
//
// optional parameters:
//  name: ClientToken, type: string
//  name: DBInstanceId, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: PageNumber, type: int, min value: 1
//  name: PageSize, type: int, min value: 1, max value: 1000
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: Tag.1.key, type: string
//  name: Tag.1.value, type: string
//  name: Tag.2.key, type: string
//  name: Tag.2.value, type: string
//  name: Tag.3.key, type: string
//  name: Tag.3.value, type: string
//  name: Tag.4.key, type: string
//  name: Tag.4.value, type: string
//  name: Tag.5.key, type: string
//  name: Tag.5.value, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
//  name: proxyId, type: string
func (api API) DescribeAbnormalDBInstances(optional openapi.M) (*DescribeAbnormalDBInstancesResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "DescribeAbnormalDBInstances")
	if v, ok := optional["ClientToken"]; ok {
		if ClientToken, ok := v.(string); ok {
			args.Query.Set("ClientToken", ClientToken)
		} else {
			return nil, errors.New("ClientToken must be string")
		}
	}
	if v, ok := optional["DBInstanceId"]; ok {
		if DBInstanceId, ok := v.(string); ok {
			args.Query.Set("DBInstanceId", DBInstanceId)
		} else {
			return nil, errors.New("DBInstanceId must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["PageNumber"]; ok {
		if PageNumber, ok := v.(int); ok {
			if PageNumber < 1 {
				return nil, errors.New("PageNumber must be equal or greater than 1")
			}
			args.Query.Set("PageNumber", fmt.Sprint(PageNumber))
		} else {
			return nil, errors.New("PageNumber must be int")
		}
	}
	if v, ok := optional["PageSize"]; ok {
		if PageSize, ok := v.(int); ok {
			if PageSize < 1 {
				return nil, errors.New("PageSize must be equal or greater than 1")
			}
			if PageSize > 1000 {
				return nil, errors.New("PageSize must be equal or less than 1000")
			}
			args.Query.Set("PageSize", fmt.Sprint(PageSize))
		} else {
			return nil, errors.New("PageSize must be int")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["Tag.1.key"]; ok {
		if Tag1key, ok := v.(string); ok {
			args.Query.Set("Tag.1.key", Tag1key)
		} else {
			return nil, errors.New("Tag.1.key must be string")
		}
	}
	if v, ok := optional["Tag.1.value"]; ok {
		if Tag1value, ok := v.(string); ok {
			args.Query.Set("Tag.1.value", Tag1value)
		} else {
			return nil, errors.New("Tag.1.value must be string")
		}
	}
	if v, ok := optional["Tag.2.key"]; ok {
		if Tag2key, ok := v.(string); ok {
			args.Query.Set("Tag.2.key", Tag2key)
		} else {
			return nil, errors.New("Tag.2.key must be string")
		}
	}
	if v, ok := optional["Tag.2.value"]; ok {
		if Tag2value, ok := v.(string); ok {
			args.Query.Set("Tag.2.value", Tag2value)
		} else {
			return nil, errors.New("Tag.2.value must be string")
		}
	}
	if v, ok := optional["Tag.3.key"]; ok {
		if Tag3key, ok := v.(string); ok {
			args.Query.Set("Tag.3.key", Tag3key)
		} else {
			return nil, errors.New("Tag.3.key must be string")
		}
	}
	if v, ok := optional["Tag.3.value"]; ok {
		if Tag3value, ok := v.(string); ok {
			args.Query.Set("Tag.3.value", Tag3value)
		} else {
			return nil, errors.New("Tag.3.value must be string")
		}
	}
	if v, ok := optional["Tag.4.key"]; ok {
		if Tag4key, ok := v.(string); ok {
			args.Query.Set("Tag.4.key", Tag4key)
		} else {
			return nil, errors.New("Tag.4.key must be string")
		}
	}
	if v, ok := optional["Tag.4.value"]; ok {
		if Tag4value, ok := v.(string); ok {
			args.Query.Set("Tag.4.value", Tag4value)
		} else {
			return nil, errors.New("Tag.4.value must be string")
		}
	}
	if v, ok := optional["Tag.5.key"]; ok {
		if Tag5key, ok := v.(string); ok {
			args.Query.Set("Tag.5.key", Tag5key)
		} else {
			return nil, errors.New("Tag.5.key must be string")
		}
	}
	if v, ok := optional["Tag.5.value"]; ok {
		if Tag5value, ok := v.(string); ok {
			args.Query.Set("Tag.5.value", Tag5value)
		} else {
			return nil, errors.New("Tag.5.value must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}
	if v, ok := optional["proxyId"]; ok {
		if proxyId, ok := v.(string); ok {
			args.Query.Set("proxyId", proxyId)
		} else {
			return nil, errors.New("proxyId must be string")
		}
	}

	result := new(DescribeAbnormalDBInstancesResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DescribeAbnormalDBInstancesResponse represents the response of the api DescribeAbnormalDBInstances.
type DescribeAbnormalDBInstancesResponse struct {
	Items struct {
		InstanceResult []struct {
			AbnormalItems struct {
				AbnormalItem []struct {
					AbnormalDetail string
					AbnormalReason string
					AbnormalValue  string
					AdviceKey      string
					CheckItem      string
					CheckTime      string
				}
			}
			DBInstanceDescription string
			DBInstanceId          string
		}
	}
	PageNumber       int
	PageRecordCount  int
	TotalRecordCount int
}

// DescribeAccounts version 2014-08-15
//
// required parameters:
//  name: DBInstanceId, type: string
//
// optional parameters:
//  name: AccountName, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) DescribeAccounts(DBInstanceId string, optional openapi.M) (*DescribeAccountsResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "DescribeAccounts")
	args.Query.Set("DBInstanceId", DBInstanceId)
	if v, ok := optional["AccountName"]; ok {
		if AccountName, ok := v.(string); ok {
			args.Query.Set("AccountName", AccountName)
		} else {
			return nil, errors.New("AccountName must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(DescribeAccountsResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DescribeAccountsResponse represents the response of the api DescribeAccounts.
type DescribeAccountsResponse struct {
	Accounts struct {
		DBInstanceAccount []struct {
			AccountDescription string
			AccountName        string
			AccountStatus      string // optional values: Available|Unavailable
			DBInstanceId       string
			DatabasePrivileges struct {
				DatabasePrivilege []struct {
					AccountPrivilege string
					DBName           string
				}
			}
		}
	}
}

// DescribeBackupPolicy version 2014-08-15
//
// required parameters:
//  name: DBInstanceId, type: string
//
// optional parameters:
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) DescribeBackupPolicy(DBInstanceId string, optional openapi.M) (*DescribeBackupPolicyResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "DescribeBackupPolicy")
	args.Query.Set("DBInstanceId", DBInstanceId)
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(DescribeBackupPolicyResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DescribeBackupPolicyResponse represents the response of the api DescribeBackupPolicy.
type DescribeBackupPolicyResponse struct {
	BackupRetentionPeriod   int
	PreferredBackupPeriod   string
	PreferredBackupTime     string
	PreferredNextBackupTime string
}

// DescribeBackupTasks version 2014-08-15
//
// required parameters:
//  name: DBInstanceId, type: string
//
// optional parameters:
//  name: BackupJobId, type: string
//  name: BackupJobStatus, type: string
//  name: BackupMode, type: string
//  name: ClientToken, type: string
//  name: Flag, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) DescribeBackupTasks(DBInstanceId string, optional openapi.M) (*DescribeBackupTasksResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "DescribeBackupTasks")
	args.Query.Set("DBInstanceId", DBInstanceId)
	if v, ok := optional["BackupJobId"]; ok {
		if BackupJobId, ok := v.(string); ok {
			args.Query.Set("BackupJobId", BackupJobId)
		} else {
			return nil, errors.New("BackupJobId must be string")
		}
	}
	if v, ok := optional["BackupJobStatus"]; ok {
		if BackupJobStatus, ok := v.(string); ok {
			args.Query.Set("BackupJobStatus", BackupJobStatus)
		} else {
			return nil, errors.New("BackupJobStatus must be string")
		}
	}
	if v, ok := optional["BackupMode"]; ok {
		if BackupMode, ok := v.(string); ok {
			args.Query.Set("BackupMode", BackupMode)
		} else {
			return nil, errors.New("BackupMode must be string")
		}
	}
	if v, ok := optional["ClientToken"]; ok {
		if ClientToken, ok := v.(string); ok {
			args.Query.Set("ClientToken", ClientToken)
		} else {
			return nil, errors.New("ClientToken must be string")
		}
	}
	if v, ok := optional["Flag"]; ok {
		if Flag, ok := v.(string); ok {
			args.Query.Set("Flag", Flag)
		} else {
			return nil, errors.New("Flag must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(DescribeBackupTasksResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DescribeBackupTasksResponse represents the response of the api DescribeBackupTasks.
type DescribeBackupTasksResponse struct {
	Items struct {
		BackupJob []struct {
			BackupProgressStatus string
			BackupjobId          string
			JobMode              string // optional values: Automated|Manual
			Process              string
			TaskAction           string
		}
	}
}

// DescribeBackups version 2014-08-15
//
// required parameters:
//  name: DBInstanceId, type: string
//  name: EndTime, type: string
//  name: StartTime, type: string
//
// optional parameters:
//  name: BackupId, type: string
//  name: BackupLocation, type: string
//  name: BackupMode, type: string
//  name: BackupStatus, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: PageNumber, type: int, min value: 1, max value: 2147483647
//  name: PageSize, type: int, min value: 30, max value: 100
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) DescribeBackups(DBInstanceId, EndTime, StartTime string, optional openapi.M) (*DescribeBackupsResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "DescribeBackups")
	args.Query.Set("DBInstanceId", DBInstanceId)
	args.Query.Set("EndTime", EndTime)
	args.Query.Set("StartTime", StartTime)
	if v, ok := optional["BackupId"]; ok {
		if BackupId, ok := v.(string); ok {
			args.Query.Set("BackupId", BackupId)
		} else {
			return nil, errors.New("BackupId must be string")
		}
	}
	if v, ok := optional["BackupLocation"]; ok {
		if BackupLocation, ok := v.(string); ok {
			args.Query.Set("BackupLocation", BackupLocation)
		} else {
			return nil, errors.New("BackupLocation must be string")
		}
	}
	if v, ok := optional["BackupMode"]; ok {
		if BackupMode, ok := v.(string); ok {
			args.Query.Set("BackupMode", BackupMode)
		} else {
			return nil, errors.New("BackupMode must be string")
		}
	}
	if v, ok := optional["BackupStatus"]; ok {
		if BackupStatus, ok := v.(string); ok {
			args.Query.Set("BackupStatus", BackupStatus)
		} else {
			return nil, errors.New("BackupStatus must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["PageNumber"]; ok {
		if PageNumber, ok := v.(int); ok {
			if PageNumber < 1 {
				return nil, errors.New("PageNumber must be equal or greater than 1")
			}
			if PageNumber > 2147483647 {
				return nil, errors.New("PageNumber must be equal or less than 2147483647")
			}
			args.Query.Set("PageNumber", fmt.Sprint(PageNumber))
		} else {
			return nil, errors.New("PageNumber must be int")
		}
	}
	if v, ok := optional["PageSize"]; ok {
		if PageSize, ok := v.(int); ok {
			if PageSize < 30 {
				return nil, errors.New("PageSize must be equal or greater than 30")
			}
			if PageSize > 100 {
				return nil, errors.New("PageSize must be equal or less than 100")
			}
			args.Query.Set("PageSize", fmt.Sprint(PageSize))
		} else {
			return nil, errors.New("PageSize must be int")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(DescribeBackupsResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DescribeBackupsResponse represents the response of the api DescribeBackups.
type DescribeBackupsResponse struct {
	Items struct {
		Backup []struct {
			BackupDBNames          string
			BackupDownloadURL      string
			BackupEndTime          string
			BackupExtractionStatus string // optional values: Extracing|Failed|Nostart|Success
			BackupId               string
			BackupLocation         string
			BackupMethod           string // optional values: Logical|Physical
			BackupMode             string // optional values: Automated|Manual
			BackupScale            string // optional values: DBInstance|Database
			BackupSize             int64
			BackupStartTime        string
			BackupStatus           string // optional values: Failed|Success
			BackupType             string // optional values: FullBackup|IncrementalBackup
			DBInstanceId           string
		}
	}
	PageNumber       string
	PageRecordCount  string
	TotalRecordCount string
}

// DescribeBinlogFiles version 2014-08-15
//
// required parameters:
//  name: DBInstanceId, type: string
//  name: EndTime, type: string
//  name: StartTime, type: string
//
// optional parameters:
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: PageNumber, type: int, min value: 1, max value: 2147483647
//  name: PageSize, type: int, min value: 30, max value: 1000
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) DescribeBinlogFiles(DBInstanceId, EndTime, StartTime string, optional openapi.M) (*DescribeBinlogFilesResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "DescribeBinlogFiles")
	args.Query.Set("DBInstanceId", DBInstanceId)
	args.Query.Set("EndTime", EndTime)
	args.Query.Set("StartTime", StartTime)
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["PageNumber"]; ok {
		if PageNumber, ok := v.(int); ok {
			if PageNumber < 1 {
				return nil, errors.New("PageNumber must be equal or greater than 1")
			}
			if PageNumber > 2147483647 {
				return nil, errors.New("PageNumber must be equal or less than 2147483647")
			}
			args.Query.Set("PageNumber", fmt.Sprint(PageNumber))
		} else {
			return nil, errors.New("PageNumber must be int")
		}
	}
	if v, ok := optional["PageSize"]; ok {
		if PageSize, ok := v.(int); ok {
			if PageSize < 30 {
				return nil, errors.New("PageSize must be equal or greater than 30")
			}
			if PageSize > 1000 {
				return nil, errors.New("PageSize must be equal or less than 1000")
			}
			args.Query.Set("PageSize", fmt.Sprint(PageSize))
		} else {
			return nil, errors.New("PageSize must be int")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(DescribeBinlogFilesResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DescribeBinlogFilesResponse represents the response of the api DescribeBinlogFiles.
type DescribeBinlogFilesResponse struct {
	Items struct {
		BinLogFile []struct {
			DownloadLink    string
			FileSize        int64
			LinkExpiredTime string
			LogBeginTime    string
			LogEndTime      string
		}
	}
	PageNumber       int
	PageRecordCount  int
	TotalRecordCount int
}

// DescribeDBInstanceAttribute version 2014-08-15
//
// required parameters:
//  name: DBInstanceId, type: string
//
// optional parameters:
//  name: ClientToken, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) DescribeDBInstanceAttribute(DBInstanceId string, optional openapi.M) (*DescribeDBInstanceAttributeResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "DescribeDBInstanceAttribute")
	args.Query.Set("DBInstanceId", DBInstanceId)
	if v, ok := optional["ClientToken"]; ok {
		if ClientToken, ok := v.(string); ok {
			args.Query.Set("ClientToken", ClientToken)
		} else {
			return nil, errors.New("ClientToken must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(DescribeDBInstanceAttributeResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DescribeDBInstanceAttributeResponse represents the response of the api DescribeDBInstanceAttribute.
type DescribeDBInstanceAttributeResponse struct {
	Items struct {
		DBInstanceAttribute []struct {
			AccountMaxQuantity          int
			AvailabilityValue           string
			ConnectionMode              string // optional values: Safe|Standard
			ConnectionString            string
			CreationTime                string
			DBInstanceClass             string
			DBInstanceClassType         string
			DBInstanceDescription       string
			DBInstanceId                string
			DBInstanceMemory            int64
			DBInstanceNetType           string // optional values: Internet|Intranet
			DBInstanceStatus            string // optional values: Creating|DBInstanceClassChanging|DBInstanceNetTypeChanging|Deleting|EngineVersionUpgrading|GuardDBInstanceCreating|GuardSwitching|Importing|ImportingFromOthers|LingSwitching|Rebooting|Restoring|Running|TempDBInstanceCreating|Transing|TransingToOthers
			DBInstanceStorage           int
			DBInstanceType              string // optional values: Guard|Primary|Readonly|Temp
			DBMaxQuantity               int
			Engine                      string
			EngineVersion               string
			ExpireTime                  string
			GuardDBInstanceId           string
			IncrementSourceDBInstanceId string
			InsId                       int
			InstanceNetworkType         string
			LockMode                    string // optional values: LockByDiskQuota|LockByExpiration|LockByRestoration|LockReadInstanceByDiskQuota|ManualLock|Unlock
			LockReason                  string
			MaintainTime                string
			MasterInstanceId            string
			MaxConnections              int
			MaxIOPS                     int
			PayType                     string
			Port                        string
			ReadDelayTime               string
			ReadOnlyDBInstanceIds       struct {
				ReadOnlyDBInstanceId []struct {
					DBInstanceId string
				}
			}
			RegionId         string
			SecurityIPList   string
			TempDBInstanceId string
			VpcId            string
			ZoneId           string
		}
	}
}

// DescribeDBInstanceIPArrayList version 2014-08-15
//
// required parameters:
//  name: DBInstanceId, type: string
//
// optional parameters:
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) DescribeDBInstanceIPArrayList(DBInstanceId string, optional openapi.M) (*DescribeDBInstanceIPArrayListResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "DescribeDBInstanceIPArrayList")
	args.Query.Set("DBInstanceId", DBInstanceId)
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(DescribeDBInstanceIPArrayListResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DescribeDBInstanceIPArrayListResponse represents the response of the api DescribeDBInstanceIPArrayList.
type DescribeDBInstanceIPArrayListResponse struct {
	Items struct {
		DBInstanceIPArray []struct {
			DBInstanceIPArrayAttribute string
			DBInstanceIPArrayName      string
			SecurityIPList             string
		}
	}
}

// DescribeDBInstanceNetInfo version 2014-08-15
//
// required parameters:
//  name: DBInstanceId, type: string
//
// optional parameters:
//  name: ClientToken, type: string
//  name: Flag, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) DescribeDBInstanceNetInfo(DBInstanceId string, optional openapi.M) (*DescribeDBInstanceNetInfoResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "DescribeDBInstanceNetInfo")
	args.Query.Set("DBInstanceId", DBInstanceId)
	if v, ok := optional["ClientToken"]; ok {
		if ClientToken, ok := v.(string); ok {
			args.Query.Set("ClientToken", ClientToken)
		} else {
			return nil, errors.New("ClientToken must be string")
		}
	}
	if v, ok := optional["Flag"]; ok {
		if Flag, ok := v.(string); ok {
			args.Query.Set("Flag", Flag)
		} else {
			return nil, errors.New("Flag must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(DescribeDBInstanceNetInfoResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DescribeDBInstanceNetInfoResponse represents the response of the api DescribeDBInstanceNetInfo.
type DescribeDBInstanceNetInfoResponse struct {
	DBInstanceNetInfos struct {
		DBInstanceNetInfo []struct {
			ConnectionString string
			IPAddress        string
			IPType           string
			Port             string
			SecurityIPGroups struct {
				SecurityIPGroups []struct {
					SecurityIPGroupName string
					SecurityIPs         string
				} `json:"securityIPGroups" xml:"securityIPGroups"`
			}
			VPCId     string
			VSwitchId string
		}
	}
	InstanceNetworkType string
}

// DescribeDBInstanceNetInfoForChannel version 2014-08-15
//
// required parameters:
//  name: DBInstanceId, type: string
//
// optional parameters:
//  name: ClientToken, type: string
//  name: Flag, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) DescribeDBInstanceNetInfoForChannel(DBInstanceId string, optional openapi.M) (*DescribeDBInstanceNetInfoForChannelResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "DescribeDBInstanceNetInfoForChannel")
	args.Query.Set("DBInstanceId", DBInstanceId)
	if v, ok := optional["ClientToken"]; ok {
		if ClientToken, ok := v.(string); ok {
			args.Query.Set("ClientToken", ClientToken)
		} else {
			return nil, errors.New("ClientToken must be string")
		}
	}
	if v, ok := optional["Flag"]; ok {
		if Flag, ok := v.(string); ok {
			args.Query.Set("Flag", Flag)
		} else {
			return nil, errors.New("Flag must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(DescribeDBInstanceNetInfoForChannelResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DescribeDBInstanceNetInfoForChannelResponse represents the response of the api DescribeDBInstanceNetInfoForChannel.
type DescribeDBInstanceNetInfoForChannelResponse struct {
	DBInstanceNetInfos struct {
		DBInstanceNetInfo []struct {
			ConnectionString string
			IPAddress        string
			IPType           string
			Port             string
			SecurityIPGroups struct {
				SecurityIPGroups []struct {
					SecurityIPGroupName string
					SecurityIPs         string
				} `json:"securityIPGroups" xml:"securityIPGroups"`
			}
			VPCId     string
			VSwitchId string
		}
	}
	InstanceNetworkType string
}

// DescribeDBInstancePerformance version 2014-08-15
//
// required parameters:
//  name: DBInstanceId, type: string
//  name: EndTime, type: string
//  name: Key, type: string
//  name: StartTime, type: string
//
// optional parameters:
//  name: ClientToken, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) DescribeDBInstancePerformance(DBInstanceId, EndTime, Key, StartTime string, optional openapi.M) (*DescribeDBInstancePerformanceResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "DescribeDBInstancePerformance")
	args.Query.Set("DBInstanceId", DBInstanceId)
	args.Query.Set("EndTime", EndTime)
	args.Query.Set("Key", Key)
	args.Query.Set("StartTime", StartTime)
	if v, ok := optional["ClientToken"]; ok {
		if ClientToken, ok := v.(string); ok {
			args.Query.Set("ClientToken", ClientToken)
		} else {
			return nil, errors.New("ClientToken must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(DescribeDBInstancePerformanceResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DescribeDBInstancePerformanceResponse represents the response of the api DescribeDBInstancePerformance.
type DescribeDBInstancePerformanceResponse struct {
	DBInstanceId    string
	EndTime         string
	Engine          string
	PerformanceKeys struct {
		PerformanceKey []struct {
			Key         string
			Unit        string
			ValueFormat string
			Values      struct {
				PerformanceValue []struct {
					Date  string
					Value string
				}
			}
		}
	}
	StartTime string
}

// DescribeDBInstances version 2014-08-15
//
// optional parameters:
//  name: ClientToken, type: string
//  name: ConnectionMode, type: string
//  name: DBInstanceId, type: string
//  name: DBInstanceStatus, type: string
//  name: DBInstanceType, type: string
//  name: Engine, type: string
//  name: InstanceNetworkType, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: PageNumber, type: int, min value: 0, max value: 2147483647
//  name: PageSize, type: int, min value: 1, max value: 100
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: SearchKey, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
//  name: proxyId, type: string
func (api API) DescribeDBInstances(optional openapi.M) (*DescribeDBInstancesResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "DescribeDBInstances")
	if v, ok := optional["ClientToken"]; ok {
		if ClientToken, ok := v.(string); ok {
			args.Query.Set("ClientToken", ClientToken)
		} else {
			return nil, errors.New("ClientToken must be string")
		}
	}
	if v, ok := optional["ConnectionMode"]; ok {
		if ConnectionMode, ok := v.(string); ok {
			args.Query.Set("ConnectionMode", ConnectionMode)
		} else {
			return nil, errors.New("ConnectionMode must be string")
		}
	}
	if v, ok := optional["DBInstanceId"]; ok {
		if DBInstanceId, ok := v.(string); ok {
			args.Query.Set("DBInstanceId", DBInstanceId)
		} else {
			return nil, errors.New("DBInstanceId must be string")
		}
	}
	if v, ok := optional["DBInstanceStatus"]; ok {
		if DBInstanceStatus, ok := v.(string); ok {
			args.Query.Set("DBInstanceStatus", DBInstanceStatus)
		} else {
			return nil, errors.New("DBInstanceStatus must be string")
		}
	}
	if v, ok := optional["DBInstanceType"]; ok {
		if DBInstanceType, ok := v.(string); ok {
			args.Query.Set("DBInstanceType", DBInstanceType)
		} else {
			return nil, errors.New("DBInstanceType must be string")
		}
	}
	if v, ok := optional["Engine"]; ok {
		if Engine, ok := v.(string); ok {
			args.Query.Set("Engine", Engine)
		} else {
			return nil, errors.New("Engine must be string")
		}
	}
	if v, ok := optional["InstanceNetworkType"]; ok {
		if InstanceNetworkType, ok := v.(string); ok {
			args.Query.Set("InstanceNetworkType", InstanceNetworkType)
		} else {
			return nil, errors.New("InstanceNetworkType must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["PageNumber"]; ok {
		if PageNumber, ok := v.(int); ok {
			if PageNumber < 0 {
				return nil, errors.New("PageNumber must be equal or greater than 0")
			}
			if PageNumber > 2147483647 {
				return nil, errors.New("PageNumber must be equal or less than 2147483647")
			}
			args.Query.Set("PageNumber", fmt.Sprint(PageNumber))
		} else {
			return nil, errors.New("PageNumber must be int")
		}
	}
	if v, ok := optional["PageSize"]; ok {
		if PageSize, ok := v.(int); ok {
			if PageSize < 1 {
				return nil, errors.New("PageSize must be equal or greater than 1")
			}
			if PageSize > 100 {
				return nil, errors.New("PageSize must be equal or less than 100")
			}
			args.Query.Set("PageSize", fmt.Sprint(PageSize))
		} else {
			return nil, errors.New("PageSize must be int")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["SearchKey"]; ok {
		if SearchKey, ok := v.(string); ok {
			args.Query.Set("SearchKey", SearchKey)
		} else {
			return nil, errors.New("SearchKey must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}
	if v, ok := optional["proxyId"]; ok {
		if proxyId, ok := v.(string); ok {
			args.Query.Set("proxyId", proxyId)
		} else {
			return nil, errors.New("proxyId must be string")
		}
	}

	result := new(DescribeDBInstancesResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DescribeDBInstancesResponse represents the response of the api DescribeDBInstances.
type DescribeDBInstancesResponse struct {
	Items struct {
		DBInstance []struct {
			ConnectionMode        string // optional values: Safe|Standard
			CreateTime            string
			DBInstanceDescription string
			DBInstanceId          string
			DBInstanceNetType     string // optional values: Internet|Intranet
			DBInstanceStatus      string // optional values: Creating|DBInstanceClassChanging|DBInstanceNetTypeChanging|Deleting|EngineVersionUpgrading|GuardSwitching|Importing|ImportingFromOthers|LingSwitching|Rebooting|Restoring|Running|TempDBInstanceCreating|Transing|TransingToOthers
			DBInstanceType        string // optional values: Guard|Primary|Readonly|Shared|Temp
			Engine                string
			EngineVersion         string
			ExpireTime            string
			GuardDBInstanceId     string
			InsId                 int
			InstanceNetworkType   string
			LockMode              string // optional values: LockByDiskQuota|LockByExpiration|LockByRestoration|LockReadInstanceByDiskQuota|ManualLock|Unlock
			LockReason            string
			MasterInstanceId      string
			MutriORsignle         bool
			PayType               string
			ReadOnlyDBInstanceIds struct {
				ReadOnlyDBInstanceId []struct {
					DBInstanceId string
				}
			}
			RegionId         string
			TempDBInstanceId string
			VpcId            string
			ZoneId           string
		}
	}
	PageNumber       int
	PageRecordCount  int
	TotalRecordCount int
}

// DescribeDBInstancesByExpireTime version 2014-08-15
//
// required parameters:
//  name: ExpirePeriod, type: int, min value: 1, max value: 180
//
// optional parameters:
//  name: ClientToken, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: PageNumber, type: int, min value: 1
//  name: PageSize, type: int, max value: 100
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
//  name: proxyId, type: string
func (api API) DescribeDBInstancesByExpireTime(ExpirePeriod int, optional openapi.M) (*DescribeDBInstancesByExpireTimeResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "DescribeDBInstancesByExpireTime")
	if ExpirePeriod < 1 {
		return nil, errors.New("ExpirePeriod must be equal or greater than 1")
	}
	if ExpirePeriod > 180 {
		return nil, errors.New("ExpirePeriod must be equal or less than 180")
	}
	args.Query.Set("ExpirePeriod", fmt.Sprint(ExpirePeriod))
	if v, ok := optional["ClientToken"]; ok {
		if ClientToken, ok := v.(string); ok {
			args.Query.Set("ClientToken", ClientToken)
		} else {
			return nil, errors.New("ClientToken must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["PageNumber"]; ok {
		if PageNumber, ok := v.(int); ok {
			if PageNumber < 1 {
				return nil, errors.New("PageNumber must be equal or greater than 1")
			}
			args.Query.Set("PageNumber", fmt.Sprint(PageNumber))
		} else {
			return nil, errors.New("PageNumber must be int")
		}
	}
	if v, ok := optional["PageSize"]; ok {
		if PageSize, ok := v.(int); ok {
			if PageSize > 100 {
				return nil, errors.New("PageSize must be equal or less than 100")
			}
			args.Query.Set("PageSize", fmt.Sprint(PageSize))
		} else {
			return nil, errors.New("PageSize must be int")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}
	if v, ok := optional["proxyId"]; ok {
		if proxyId, ok := v.(string); ok {
			args.Query.Set("proxyId", proxyId)
		} else {
			return nil, errors.New("proxyId must be string")
		}
	}

	result := new(DescribeDBInstancesByExpireTimeResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DescribeDBInstancesByExpireTimeResponse represents the response of the api DescribeDBInstancesByExpireTime.
type DescribeDBInstancesByExpireTimeResponse struct {
	Items struct {
		DBInstanceExpireTime []struct {
			DBInstanceDescription string
			DBInstanceId          string
			ExpireTime            string
		}
	}
	PageNumber       int
	PageRecordCount  int
	TotalRecordCount int
}

// DescribeDBInstancesByPerformance version 2014-08-15
//
// optional parameters:
//  name: ClientToken, type: string
//  name: DBInstanceId, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: PageNumber, type: int, min value: 0, max value: 2147483647
//  name: PageSize, type: int, min value: 1, max value: 100
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: SortKey, type: string
//  name: SortMethod, type: string
//  name: Tag.1.key, type: string
//  name: Tag.1.value, type: string
//  name: Tag.2.key, type: string
//  name: Tag.2.value, type: string
//  name: Tag.3.key, type: string
//  name: Tag.3.value, type: string
//  name: Tag.4.key, type: string
//  name: Tag.4.value, type: string
//  name: Tag.5.key, type: string
//  name: Tag.5.value, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
//  name: proxyId, type: string
func (api API) DescribeDBInstancesByPerformance(optional openapi.M) (*DescribeDBInstancesByPerformanceResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "DescribeDBInstancesByPerformance")
	if v, ok := optional["ClientToken"]; ok {
		if ClientToken, ok := v.(string); ok {
			args.Query.Set("ClientToken", ClientToken)
		} else {
			return nil, errors.New("ClientToken must be string")
		}
	}
	if v, ok := optional["DBInstanceId"]; ok {
		if DBInstanceId, ok := v.(string); ok {
			args.Query.Set("DBInstanceId", DBInstanceId)
		} else {
			return nil, errors.New("DBInstanceId must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["PageNumber"]; ok {
		if PageNumber, ok := v.(int); ok {
			if PageNumber < 0 {
				return nil, errors.New("PageNumber must be equal or greater than 0")
			}
			if PageNumber > 2147483647 {
				return nil, errors.New("PageNumber must be equal or less than 2147483647")
			}
			args.Query.Set("PageNumber", fmt.Sprint(PageNumber))
		} else {
			return nil, errors.New("PageNumber must be int")
		}
	}
	if v, ok := optional["PageSize"]; ok {
		if PageSize, ok := v.(int); ok {
			if PageSize < 1 {
				return nil, errors.New("PageSize must be equal or greater than 1")
			}
			if PageSize > 100 {
				return nil, errors.New("PageSize must be equal or less than 100")
			}
			args.Query.Set("PageSize", fmt.Sprint(PageSize))
		} else {
			return nil, errors.New("PageSize must be int")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["SortKey"]; ok {
		if SortKey, ok := v.(string); ok {
			args.Query.Set("SortKey", SortKey)
		} else {
			return nil, errors.New("SortKey must be string")
		}
	}
	if v, ok := optional["SortMethod"]; ok {
		if SortMethod, ok := v.(string); ok {
			args.Query.Set("SortMethod", SortMethod)
		} else {
			return nil, errors.New("SortMethod must be string")
		}
	}
	if v, ok := optional["Tag.1.key"]; ok {
		if Tag1key, ok := v.(string); ok {
			args.Query.Set("Tag.1.key", Tag1key)
		} else {
			return nil, errors.New("Tag.1.key must be string")
		}
	}
	if v, ok := optional["Tag.1.value"]; ok {
		if Tag1value, ok := v.(string); ok {
			args.Query.Set("Tag.1.value", Tag1value)
		} else {
			return nil, errors.New("Tag.1.value must be string")
		}
	}
	if v, ok := optional["Tag.2.key"]; ok {
		if Tag2key, ok := v.(string); ok {
			args.Query.Set("Tag.2.key", Tag2key)
		} else {
			return nil, errors.New("Tag.2.key must be string")
		}
	}
	if v, ok := optional["Tag.2.value"]; ok {
		if Tag2value, ok := v.(string); ok {
			args.Query.Set("Tag.2.value", Tag2value)
		} else {
			return nil, errors.New("Tag.2.value must be string")
		}
	}
	if v, ok := optional["Tag.3.key"]; ok {
		if Tag3key, ok := v.(string); ok {
			args.Query.Set("Tag.3.key", Tag3key)
		} else {
			return nil, errors.New("Tag.3.key must be string")
		}
	}
	if v, ok := optional["Tag.3.value"]; ok {
		if Tag3value, ok := v.(string); ok {
			args.Query.Set("Tag.3.value", Tag3value)
		} else {
			return nil, errors.New("Tag.3.value must be string")
		}
	}
	if v, ok := optional["Tag.4.key"]; ok {
		if Tag4key, ok := v.(string); ok {
			args.Query.Set("Tag.4.key", Tag4key)
		} else {
			return nil, errors.New("Tag.4.key must be string")
		}
	}
	if v, ok := optional["Tag.4.value"]; ok {
		if Tag4value, ok := v.(string); ok {
			args.Query.Set("Tag.4.value", Tag4value)
		} else {
			return nil, errors.New("Tag.4.value must be string")
		}
	}
	if v, ok := optional["Tag.5.key"]; ok {
		if Tag5key, ok := v.(string); ok {
			args.Query.Set("Tag.5.key", Tag5key)
		} else {
			return nil, errors.New("Tag.5.key must be string")
		}
	}
	if v, ok := optional["Tag.5.value"]; ok {
		if Tag5value, ok := v.(string); ok {
			args.Query.Set("Tag.5.value", Tag5value)
		} else {
			return nil, errors.New("Tag.5.value must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}
	if v, ok := optional["proxyId"]; ok {
		if proxyId, ok := v.(string); ok {
			args.Query.Set("proxyId", proxyId)
		} else {
			return nil, errors.New("proxyId must be string")
		}
	}

	result := new(DescribeDBInstancesByPerformanceResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DescribeDBInstancesByPerformanceResponse represents the response of the api DescribeDBInstancesByPerformance.
type DescribeDBInstancesByPerformanceResponse struct {
	Items struct {
		DBInstancePerformance []struct {
			CPUUsage              string
			DBInstanceDescription string
			DBInstanceId          string
			DiskUsage             string
			IOPSUsage             string
			SessionUsage          string
		}
	}
	PageNumber       int
	PageRecordCount  int
	TotalRecordCount int
}

// DescribeDatabases version 2014-08-15
//
// required parameters:
//  name: DBInstanceId, type: string
//
// optional parameters:
//  name: DBName, type: string
//  name: DBStatus, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) DescribeDatabases(DBInstanceId string, optional openapi.M) (*DescribeDatabasesResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "DescribeDatabases")
	args.Query.Set("DBInstanceId", DBInstanceId)
	if v, ok := optional["DBName"]; ok {
		if DBName, ok := v.(string); ok {
			args.Query.Set("DBName", DBName)
		} else {
			return nil, errors.New("DBName must be string")
		}
	}
	if v, ok := optional["DBStatus"]; ok {
		if DBStatus, ok := v.(string); ok {
			args.Query.Set("DBStatus", DBStatus)
		} else {
			return nil, errors.New("DBStatus must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(DescribeDatabasesResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DescribeDatabasesResponse represents the response of the api DescribeDatabases.
type DescribeDatabasesResponse struct {
	Databases struct {
		Database []struct {
			Accounts struct {
				AccountPrivilegeInfo []struct {
					Account          string
					AccountPrivilege string
				}
			}
			CharacterSetName string
			DBDescription    string
			DBInstanceId     string
			DBName           string
			DBStatus         string // optional values: Creating|Deleting|Running
			Engine           string
		}
	}
}

// DescribeErrorLogs version 2014-08-15
//
// required parameters:
//  name: DBInstanceId, type: string
//  name: EndTime, type: string
//  name: StartTime, type: string
//
// optional parameters:
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: PageNumber, type: int, min value: 1, max value: 2147483647
//  name: PageSize, type: int, min value: 30, max value: 100
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) DescribeErrorLogs(DBInstanceId, EndTime, StartTime string, optional openapi.M) (*DescribeErrorLogsResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "DescribeErrorLogs")
	args.Query.Set("DBInstanceId", DBInstanceId)
	args.Query.Set("EndTime", EndTime)
	args.Query.Set("StartTime", StartTime)
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["PageNumber"]; ok {
		if PageNumber, ok := v.(int); ok {
			if PageNumber < 1 {
				return nil, errors.New("PageNumber must be equal or greater than 1")
			}
			if PageNumber > 2147483647 {
				return nil, errors.New("PageNumber must be equal or less than 2147483647")
			}
			args.Query.Set("PageNumber", fmt.Sprint(PageNumber))
		} else {
			return nil, errors.New("PageNumber must be int")
		}
	}
	if v, ok := optional["PageSize"]; ok {
		if PageSize, ok := v.(int); ok {
			if PageSize < 30 {
				return nil, errors.New("PageSize must be equal or greater than 30")
			}
			if PageSize > 100 {
				return nil, errors.New("PageSize must be equal or less than 100")
			}
			args.Query.Set("PageSize", fmt.Sprint(PageSize))
		} else {
			return nil, errors.New("PageSize must be int")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(DescribeErrorLogsResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DescribeErrorLogsResponse represents the response of the api DescribeErrorLogs.
type DescribeErrorLogsResponse struct {
	Items struct {
		ErrorLog []struct {
			CreateTime string
			ErrorInfo  string
		}
	}
	PageNumber       int
	PageRecordCount  int
	TotalRecordCount int
}

// DescribeFilesForSQLServer version 2014-08-15
//
// required parameters:
//  name: DBInstanceId, type: string
//  name: EndTime, type: string
//  name: StartTime, type: string
//
// optional parameters:
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: PageNumber, type: int, min value: 1, max value: 2147483647
//  name: PageSize, type: int, min value: 1, max value: 100
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) DescribeFilesForSQLServer(DBInstanceId, EndTime, StartTime string, optional openapi.M) (*DescribeFilesForSQLServerResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "DescribeFilesForSQLServer")
	args.Query.Set("DBInstanceId", DBInstanceId)
	args.Query.Set("EndTime", EndTime)
	args.Query.Set("StartTime", StartTime)
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["PageNumber"]; ok {
		if PageNumber, ok := v.(int); ok {
			if PageNumber < 1 {
				return nil, errors.New("PageNumber must be equal or greater than 1")
			}
			if PageNumber > 2147483647 {
				return nil, errors.New("PageNumber must be equal or less than 2147483647")
			}
			args.Query.Set("PageNumber", fmt.Sprint(PageNumber))
		} else {
			return nil, errors.New("PageNumber must be int")
		}
	}
	if v, ok := optional["PageSize"]; ok {
		if PageSize, ok := v.(int); ok {
			if PageSize < 1 {
				return nil, errors.New("PageSize must be equal or greater than 1")
			}
			if PageSize > 100 {
				return nil, errors.New("PageSize must be equal or less than 100")
			}
			args.Query.Set("PageSize", fmt.Sprint(PageSize))
		} else {
			return nil, errors.New("PageSize must be int")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(DescribeFilesForSQLServerResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DescribeFilesForSQLServerResponse represents the response of the api DescribeFilesForSQLServer.
type DescribeFilesForSQLServerResponse struct {
	DBInstanceId string
	Items        struct {
		SQLServerUploadFile []struct {
			CreationTime      string
			DBName            string
			Description       string
			FileName          string
			FileSize          int64
			FileStatus        string // optional values: Available|Unavailable
			InternetFtpServer string
			InternetPort      int
			IntranetFtpserver string
			Intranetport      int
			Password          string
			UserName          string
		}
	}
	PageNumber       int
	PageRecordCount  int
	TotalRecordCount int
}

// DescribeImportsForSQLServer version 2014-08-15
//
// required parameters:
//  name: DBInstanceId, type: string
//  name: EndTime, type: string
//  name: StartTime, type: string
//
// optional parameters:
//  name: ImportId, type: int
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: PageNumber, type: int, min value: 1, max value: 2147483647
//  name: PageSize, type: int, min value: 30, max value: 100
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) DescribeImportsForSQLServer(DBInstanceId, EndTime, StartTime string, optional openapi.M) (*DescribeImportsForSQLServerResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "DescribeImportsForSQLServer")
	args.Query.Set("DBInstanceId", DBInstanceId)
	args.Query.Set("EndTime", EndTime)
	args.Query.Set("StartTime", StartTime)
	if v, ok := optional["ImportId"]; ok {
		if ImportId, ok := v.(int); ok {
			args.Query.Set("ImportId", fmt.Sprint(ImportId))
		} else {
			return nil, errors.New("ImportId must be int")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["PageNumber"]; ok {
		if PageNumber, ok := v.(int); ok {
			if PageNumber < 1 {
				return nil, errors.New("PageNumber must be equal or greater than 1")
			}
			if PageNumber > 2147483647 {
				return nil, errors.New("PageNumber must be equal or less than 2147483647")
			}
			args.Query.Set("PageNumber", fmt.Sprint(PageNumber))
		} else {
			return nil, errors.New("PageNumber must be int")
		}
	}
	if v, ok := optional["PageSize"]; ok {
		if PageSize, ok := v.(int); ok {
			if PageSize < 30 {
				return nil, errors.New("PageSize must be equal or greater than 30")
			}
			if PageSize > 100 {
				return nil, errors.New("PageSize must be equal or less than 100")
			}
			args.Query.Set("PageSize", fmt.Sprint(PageSize))
		} else {
			return nil, errors.New("PageSize must be int")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(DescribeImportsForSQLServerResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DescribeImportsForSQLServerResponse represents the response of the api DescribeImportsForSQLServer.
type DescribeImportsForSQLServerResponse struct {
	Items struct {
		SQLServerImport []struct {
			DBName       string
			FileName     string
			ImportId     int
			ImportStatus string // optional values: Cancelled|Cancelling|Failed|Importing|Pending|Success
			StartTime    string
		}
	}
	PageNumber        int
	SQLItemsCounts    int
	TotalRecordCounts int
}

// DescribeModifyParameterLog version 2014-08-15
//
// required parameters:
//  name: DBInstanceId, type: string
//  name: EndTime, type: string
//  name: StartTime, type: string
//
// optional parameters:
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: PageNumber, type: int, min value: 1, max value: 2147483647
//  name: PageSize, type: int, min value: 30, max value: 100
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) DescribeModifyParameterLog(DBInstanceId, EndTime, StartTime string, optional openapi.M) (*DescribeModifyParameterLogResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "DescribeModifyParameterLog")
	args.Query.Set("DBInstanceId", DBInstanceId)
	args.Query.Set("EndTime", EndTime)
	args.Query.Set("StartTime", StartTime)
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["PageNumber"]; ok {
		if PageNumber, ok := v.(int); ok {
			if PageNumber < 1 {
				return nil, errors.New("PageNumber must be equal or greater than 1")
			}
			if PageNumber > 2147483647 {
				return nil, errors.New("PageNumber must be equal or less than 2147483647")
			}
			args.Query.Set("PageNumber", fmt.Sprint(PageNumber))
		} else {
			return nil, errors.New("PageNumber must be int")
		}
	}
	if v, ok := optional["PageSize"]; ok {
		if PageSize, ok := v.(int); ok {
			if PageSize < 30 {
				return nil, errors.New("PageSize must be equal or greater than 30")
			}
			if PageSize > 100 {
				return nil, errors.New("PageSize must be equal or less than 100")
			}
			args.Query.Set("PageSize", fmt.Sprint(PageSize))
		} else {
			return nil, errors.New("PageSize must be int")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(DescribeModifyParameterLogResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DescribeModifyParameterLogResponse represents the response of the api DescribeModifyParameterLog.
type DescribeModifyParameterLogResponse struct {
	DBInstanceId  string
	Engine        string
	EngineVersion string
	Items         struct {
		ParameterChangeLog []struct {
			ModifyTime        string
			NewParameterValue string
			OldParameterValue string
			ParameterName     string
			Status            string // optional values: Applied|Syncing
		}
	}
	PageNumber       int
	PageRecordCount  int
	TotalRecordCount int
}

// DescribeOperationLogs version 2014-08-15
//
// required parameters:
//  name: EndTime, type: string
//  name: StartTime, type: string
//
// optional parameters:
//  name: DBInstanceId, type: string
//  name: DBInstanceUseType, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: PageNumber, type: int, min value: 1, max value: 2147483647
//  name: PageSize, type: int, min value: 30, max value: 100
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: SearchKey, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) DescribeOperationLogs(EndTime, StartTime string, optional openapi.M) (*DescribeOperationLogsResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "DescribeOperationLogs")
	args.Query.Set("EndTime", EndTime)
	args.Query.Set("StartTime", StartTime)
	if v, ok := optional["DBInstanceId"]; ok {
		if DBInstanceId, ok := v.(string); ok {
			args.Query.Set("DBInstanceId", DBInstanceId)
		} else {
			return nil, errors.New("DBInstanceId must be string")
		}
	}
	if v, ok := optional["DBInstanceUseType"]; ok {
		if DBInstanceUseType, ok := v.(string); ok {
			args.Query.Set("DBInstanceUseType", DBInstanceUseType)
		} else {
			return nil, errors.New("DBInstanceUseType must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["PageNumber"]; ok {
		if PageNumber, ok := v.(int); ok {
			if PageNumber < 1 {
				return nil, errors.New("PageNumber must be equal or greater than 1")
			}
			if PageNumber > 2147483647 {
				return nil, errors.New("PageNumber must be equal or less than 2147483647")
			}
			args.Query.Set("PageNumber", fmt.Sprint(PageNumber))
		} else {
			return nil, errors.New("PageNumber must be int")
		}
	}
	if v, ok := optional["PageSize"]; ok {
		if PageSize, ok := v.(int); ok {
			if PageSize < 30 {
				return nil, errors.New("PageSize must be equal or greater than 30")
			}
			if PageSize > 100 {
				return nil, errors.New("PageSize must be equal or less than 100")
			}
			args.Query.Set("PageSize", fmt.Sprint(PageSize))
		} else {
			return nil, errors.New("PageSize must be int")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["SearchKey"]; ok {
		if SearchKey, ok := v.(string); ok {
			args.Query.Set("SearchKey", SearchKey)
		} else {
			return nil, errors.New("SearchKey must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(DescribeOperationLogsResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DescribeOperationLogsResponse represents the response of the api DescribeOperationLogs.
type DescribeOperationLogsResponse struct {
	Engine string
	Items  struct {
		Operationlog []struct {
			DBInstanceDescription string
			DBInstanceId          string
			ExecutionTime         string `json:"executionTime" xml:"executionTime"`
			OperationItem         string
			OperationSource       string
		}
	}
	PageNumber       int
	PageRecordCount  int
	TotalRecordCount int
}

// DescribeOptimizeAdviceByDBA version 2014-08-15
//
// required parameters:
//  name: DBInstanceId, type: string
//
// optional parameters:
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: PageNumber, type: int, min value: 1, max value: 2147483647
//  name: PageSize, type: int, min value: 30, max value: 100
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) DescribeOptimizeAdviceByDBA(DBInstanceId string, optional openapi.M) (*DescribeOptimizeAdviceByDBAResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "DescribeOptimizeAdviceByDBA")
	args.Query.Set("DBInstanceId", DBInstanceId)
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["PageNumber"]; ok {
		if PageNumber, ok := v.(int); ok {
			if PageNumber < 1 {
				return nil, errors.New("PageNumber must be equal or greater than 1")
			}
			if PageNumber > 2147483647 {
				return nil, errors.New("PageNumber must be equal or less than 2147483647")
			}
			args.Query.Set("PageNumber", fmt.Sprint(PageNumber))
		} else {
			return nil, errors.New("PageNumber must be int")
		}
	}
	if v, ok := optional["PageSize"]; ok {
		if PageSize, ok := v.(int); ok {
			if PageSize < 30 {
				return nil, errors.New("PageSize must be equal or greater than 30")
			}
			if PageSize > 100 {
				return nil, errors.New("PageSize must be equal or less than 100")
			}
			args.Query.Set("PageSize", fmt.Sprint(PageSize))
		} else {
			return nil, errors.New("PageSize must be int")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(DescribeOptimizeAdviceByDBAResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DescribeOptimizeAdviceByDBAResponse represents the response of the api DescribeOptimizeAdviceByDBA.
type DescribeOptimizeAdviceByDBAResponse struct {
	Items struct {
		AdviceByDBA []struct {
			OptimizationText string
		}
	}
	PageNumber        int
	PageRecordCount   int
	TotalRecordsCount int
}

// DescribeOptimizeAdviceOnBigTable version 2014-08-15
//
// required parameters:
//  name: DBInstanceId, type: string
//
// optional parameters:
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: PageNumber, type: int, min value: 1, max value: 2147483647
//  name: PageSize, type: int, min value: 30, max value: 100
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) DescribeOptimizeAdviceOnBigTable(DBInstanceId string, optional openapi.M) (*DescribeOptimizeAdviceOnBigTableResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "DescribeOptimizeAdviceOnBigTable")
	args.Query.Set("DBInstanceId", DBInstanceId)
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["PageNumber"]; ok {
		if PageNumber, ok := v.(int); ok {
			if PageNumber < 1 {
				return nil, errors.New("PageNumber must be equal or greater than 1")
			}
			if PageNumber > 2147483647 {
				return nil, errors.New("PageNumber must be equal or less than 2147483647")
			}
			args.Query.Set("PageNumber", fmt.Sprint(PageNumber))
		} else {
			return nil, errors.New("PageNumber must be int")
		}
	}
	if v, ok := optional["PageSize"]; ok {
		if PageSize, ok := v.(int); ok {
			if PageSize < 30 {
				return nil, errors.New("PageSize must be equal or greater than 30")
			}
			if PageSize > 100 {
				return nil, errors.New("PageSize must be equal or less than 100")
			}
			args.Query.Set("PageSize", fmt.Sprint(PageSize))
		} else {
			return nil, errors.New("PageSize must be int")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(DescribeOptimizeAdviceOnBigTableResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DescribeOptimizeAdviceOnBigTableResponse represents the response of the api DescribeOptimizeAdviceOnBigTable.
type DescribeOptimizeAdviceOnBigTableResponse struct {
	Items struct {
		AdviceOnBigTable []struct {
			DBName    string
			DataSize  int64
			IndexSize int64
			TableName string
			TableSize int64
		}
	}
	PageNumber        int
	PageRecordCount   int
	TotalRecordsCount int
}

// DescribeOptimizeAdviceOnExcessIndex version 2014-08-15
//
// required parameters:
//  name: DBInstanceId, type: string
//
// optional parameters:
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: PageNumber, type: int, min value: 1, max value: 2147483647
//  name: PageSize, type: int, min value: 30, max value: 100
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) DescribeOptimizeAdviceOnExcessIndex(DBInstanceId string, optional openapi.M) (*DescribeOptimizeAdviceOnExcessIndexResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "DescribeOptimizeAdviceOnExcessIndex")
	args.Query.Set("DBInstanceId", DBInstanceId)
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["PageNumber"]; ok {
		if PageNumber, ok := v.(int); ok {
			if PageNumber < 1 {
				return nil, errors.New("PageNumber must be equal or greater than 1")
			}
			if PageNumber > 2147483647 {
				return nil, errors.New("PageNumber must be equal or less than 2147483647")
			}
			args.Query.Set("PageNumber", fmt.Sprint(PageNumber))
		} else {
			return nil, errors.New("PageNumber must be int")
		}
	}
	if v, ok := optional["PageSize"]; ok {
		if PageSize, ok := v.(int); ok {
			if PageSize < 30 {
				return nil, errors.New("PageSize must be equal or greater than 30")
			}
			if PageSize > 100 {
				return nil, errors.New("PageSize must be equal or less than 100")
			}
			args.Query.Set("PageSize", fmt.Sprint(PageSize))
		} else {
			return nil, errors.New("PageSize must be int")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(DescribeOptimizeAdviceOnExcessIndexResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DescribeOptimizeAdviceOnExcessIndexResponse represents the response of the api DescribeOptimizeAdviceOnExcessIndex.
type DescribeOptimizeAdviceOnExcessIndexResponse struct {
	Items struct {
		AdviceOnExcessIndex []struct {
			DBName     string
			IndexCount int64
			TableName  string
		}
	}
	PageNumber        int
	PageRecordCount   int
	TotalRecordsCount int
}

// DescribeOptimizeAdviceOnMissIndex version 2014-08-15
//
// required parameters:
//  name: DBInstanceId, type: string
//
// optional parameters:
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: PageNumber, type: int, min value: 1, max value: 2147483647
//  name: PageSize, type: int, min value: 30, max value: 100
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) DescribeOptimizeAdviceOnMissIndex(DBInstanceId string, optional openapi.M) (*DescribeOptimizeAdviceOnMissIndexResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "DescribeOptimizeAdviceOnMissIndex")
	args.Query.Set("DBInstanceId", DBInstanceId)
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["PageNumber"]; ok {
		if PageNumber, ok := v.(int); ok {
			if PageNumber < 1 {
				return nil, errors.New("PageNumber must be equal or greater than 1")
			}
			if PageNumber > 2147483647 {
				return nil, errors.New("PageNumber must be equal or less than 2147483647")
			}
			args.Query.Set("PageNumber", fmt.Sprint(PageNumber))
		} else {
			return nil, errors.New("PageNumber must be int")
		}
	}
	if v, ok := optional["PageSize"]; ok {
		if PageSize, ok := v.(int); ok {
			if PageSize < 30 {
				return nil, errors.New("PageSize must be equal or greater than 30")
			}
			if PageSize > 100 {
				return nil, errors.New("PageSize must be equal or less than 100")
			}
			args.Query.Set("PageSize", fmt.Sprint(PageSize))
		} else {
			return nil, errors.New("PageSize must be int")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(DescribeOptimizeAdviceOnMissIndexResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DescribeOptimizeAdviceOnMissIndexResponse represents the response of the api DescribeOptimizeAdviceOnMissIndex.
type DescribeOptimizeAdviceOnMissIndexResponse struct {
	DBInstanceId string
	Items        struct {
		AdviceOnMissIndex []struct {
			DBName      string
			QueryColumn string
			SQLText     string
			TableName   string
		}
	}
	PageNumber        int
	PageRecordCount   int
	TotalRecordsCount int
}

// DescribeOptimizeAdviceOnMissPK version 2014-08-15
//
// required parameters:
//  name: DBInstanceId, type: string
//
// optional parameters:
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: PageNumber, type: int, min value: 1, max value: 2147483647
//  name: PageSize, type: int, min value: 30, max value: 100
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) DescribeOptimizeAdviceOnMissPK(DBInstanceId string, optional openapi.M) (*DescribeOptimizeAdviceOnMissPKResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "DescribeOptimizeAdviceOnMissPK")
	args.Query.Set("DBInstanceId", DBInstanceId)
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["PageNumber"]; ok {
		if PageNumber, ok := v.(int); ok {
			if PageNumber < 1 {
				return nil, errors.New("PageNumber must be equal or greater than 1")
			}
			if PageNumber > 2147483647 {
				return nil, errors.New("PageNumber must be equal or less than 2147483647")
			}
			args.Query.Set("PageNumber", fmt.Sprint(PageNumber))
		} else {
			return nil, errors.New("PageNumber must be int")
		}
	}
	if v, ok := optional["PageSize"]; ok {
		if PageSize, ok := v.(int); ok {
			if PageSize < 30 {
				return nil, errors.New("PageSize must be equal or greater than 30")
			}
			if PageSize > 100 {
				return nil, errors.New("PageSize must be equal or less than 100")
			}
			args.Query.Set("PageSize", fmt.Sprint(PageSize))
		} else {
			return nil, errors.New("PageSize must be int")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(DescribeOptimizeAdviceOnMissPKResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DescribeOptimizeAdviceOnMissPKResponse represents the response of the api DescribeOptimizeAdviceOnMissPK.
type DescribeOptimizeAdviceOnMissPKResponse struct {
	Items struct {
		AdviceOnMissPK []struct {
			DBName    string
			TableName string
		}
	}
	PageNumber        int
	PageRecordCount   int
	TotalRecordsCount int
}

// DescribeOptimizeAdviceOnStorage version 2014-08-15
//
// required parameters:
//  name: DBInstanceId, type: string
//
// optional parameters:
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: PageNumber, type: int, min value: 1, max value: 2147483647
//  name: PageSize, type: int, min value: 30, max value: 100
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) DescribeOptimizeAdviceOnStorage(DBInstanceId string, optional openapi.M) (*DescribeOptimizeAdviceOnStorageResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "DescribeOptimizeAdviceOnStorage")
	args.Query.Set("DBInstanceId", DBInstanceId)
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["PageNumber"]; ok {
		if PageNumber, ok := v.(int); ok {
			if PageNumber < 1 {
				return nil, errors.New("PageNumber must be equal or greater than 1")
			}
			if PageNumber > 2147483647 {
				return nil, errors.New("PageNumber must be equal or less than 2147483647")
			}
			args.Query.Set("PageNumber", fmt.Sprint(PageNumber))
		} else {
			return nil, errors.New("PageNumber must be int")
		}
	}
	if v, ok := optional["PageSize"]; ok {
		if PageSize, ok := v.(int); ok {
			if PageSize < 30 {
				return nil, errors.New("PageSize must be equal or greater than 30")
			}
			if PageSize > 100 {
				return nil, errors.New("PageSize must be equal or less than 100")
			}
			args.Query.Set("PageSize", fmt.Sprint(PageSize))
		} else {
			return nil, errors.New("PageSize must be int")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(DescribeOptimizeAdviceOnStorageResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DescribeOptimizeAdviceOnStorageResponse represents the response of the api DescribeOptimizeAdviceOnStorage.
type DescribeOptimizeAdviceOnStorageResponse struct {
	DBInstanceId string
	Items        struct {
		AdviceOnStorage []struct {
			AdviseEngine  string
			CurrentEngine string
			DBName        string
			TableName     string
		}
	}
	PageNumber        int
	PageRecordCount   int
	TotalRecordsCount int
}

// DescribeParameterTemplates version 2014-08-15
//
// required parameters:
//  name: Engine, type: string
//  name: EngineVersion, type: string
//
// optional parameters:
//  name: ClientToken, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) DescribeParameterTemplates(Engine, EngineVersion string, optional openapi.M) (*DescribeParameterTemplatesResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "DescribeParameterTemplates")
	args.Query.Set("Engine", Engine)
	args.Query.Set("EngineVersion", EngineVersion)
	if v, ok := optional["ClientToken"]; ok {
		if ClientToken, ok := v.(string); ok {
			args.Query.Set("ClientToken", ClientToken)
		} else {
			return nil, errors.New("ClientToken must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(DescribeParameterTemplatesResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DescribeParameterTemplatesResponse represents the response of the api DescribeParameterTemplates.
type DescribeParameterTemplatesResponse struct {
	Engine         string
	EngineVersion  string
	ParameterCount string
	Parameters     struct {
		TemplateRecord []struct {
			CheckingCode         string
			ForceModify          string // optional values: false|true
			ForceRestart         string // optional values: false|true
			ParameterDescription string
			ParameterName        string
			ParameterValue       string
		}
	}
}

// DescribeParameters version 2014-08-15
//
// required parameters:
//  name: DBInstanceId, type: string
//
// optional parameters:
//  name: ClientToken, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) DescribeParameters(DBInstanceId string, optional openapi.M) (*DescribeParametersResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "DescribeParameters")
	args.Query.Set("DBInstanceId", DBInstanceId)
	if v, ok := optional["ClientToken"]; ok {
		if ClientToken, ok := v.(string); ok {
			args.Query.Set("ClientToken", ClientToken)
		} else {
			return nil, errors.New("ClientToken must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(DescribeParametersResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DescribeParametersResponse represents the response of the api DescribeParameters.
type DescribeParametersResponse struct {
	ConfigParameters struct {
		DBInstanceParameter []struct {
			ParameterDescription string
			ParameterName        string
			ParameterValue       string
		}
	}
	Engine            string
	EngineVersion     string
	RunningParameters struct {
		DBInstanceParameter []struct {
			ParameterDescription string
			ParameterName        string
			ParameterValue       string
		}
	}
}

// DescribePreCheckResults version 2014-08-15
//
// required parameters:
//  name: DBInstanceId, type: string
//  name: PreCheckId, type: string
//
// optional parameters:
//  name: ClientToken, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) DescribePreCheckResults(DBInstanceId, PreCheckId string, optional openapi.M) (*DescribePreCheckResultsResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "DescribePreCheckResults")
	args.Query.Set("DBInstanceId", DBInstanceId)
	args.Query.Set("PreCheckId", PreCheckId)
	if v, ok := optional["ClientToken"]; ok {
		if ClientToken, ok := v.(string); ok {
			args.Query.Set("ClientToken", ClientToken)
		} else {
			return nil, errors.New("ClientToken must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(DescribePreCheckResultsResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DescribePreCheckResultsResponse represents the response of the api DescribePreCheckResults.
type DescribePreCheckResultsResponse struct {
	DBInstanceId string
	Items        struct {
		PreCheckResult []struct {
			FailReasion    string
			PreCheckName   string
			PreCheckResult string
			RepairMethod   string
		}
	}
}

// DescribeRealtimeDiagnoses version 2014-08-15
//
// required parameters:
//  name: DBInstanceId, type: string
//  name: EndTime, type: string
//  name: StartTime, type: string
//
// optional parameters:
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: PageNumber, type: int, min value: 1, max value: 2147483647
//  name: PageSize, type: int, min value: 30, max value: 100
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) DescribeRealtimeDiagnoses(DBInstanceId, EndTime, StartTime string, optional openapi.M) (*DescribeRealtimeDiagnosesResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "DescribeRealtimeDiagnoses")
	args.Query.Set("DBInstanceId", DBInstanceId)
	args.Query.Set("EndTime", EndTime)
	args.Query.Set("StartTime", StartTime)
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["PageNumber"]; ok {
		if PageNumber, ok := v.(int); ok {
			if PageNumber < 1 {
				return nil, errors.New("PageNumber must be equal or greater than 1")
			}
			if PageNumber > 2147483647 {
				return nil, errors.New("PageNumber must be equal or less than 2147483647")
			}
			args.Query.Set("PageNumber", fmt.Sprint(PageNumber))
		} else {
			return nil, errors.New("PageNumber must be int")
		}
	}
	if v, ok := optional["PageSize"]; ok {
		if PageSize, ok := v.(int); ok {
			if PageSize < 30 {
				return nil, errors.New("PageSize must be equal or greater than 30")
			}
			if PageSize > 100 {
				return nil, errors.New("PageSize must be equal or less than 100")
			}
			args.Query.Set("PageSize", fmt.Sprint(PageSize))
		} else {
			return nil, errors.New("PageSize must be int")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(DescribeRealtimeDiagnosesResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DescribeRealtimeDiagnosesResponse represents the response of the api DescribeRealtimeDiagnoses.
type DescribeRealtimeDiagnosesResponse struct {
	Engine          string
	PageNumber      int
	PageRecordCount int
	Tasks           struct {
		RealtimeDiagnoseTasks []struct {
			CreateTime  string
			HealthScore string
			Status      string // optional values: NoStart|Running|Success
			TaskId      string
		}
	}
	TotalRecordCount int
}

// DescribeRegions version 2014-08-15
//
// optional parameters:
//  name: ClientToken, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) DescribeRegions(optional openapi.M) (*DescribeRegionsResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "DescribeRegions")
	if v, ok := optional["ClientToken"]; ok {
		if ClientToken, ok := v.(string); ok {
			args.Query.Set("ClientToken", ClientToken)
		} else {
			return nil, errors.New("ClientToken must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(DescribeRegionsResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DescribeRegionsResponse represents the response of the api DescribeRegions.
type DescribeRegionsResponse struct {
	Regions struct {
		RDSRegion []struct {
			RegionId string
			ZoneId   string
		}
	}
}

// DescribeResourceUsage version 2014-08-15
//
// required parameters:
//  name: DBInstanceId, type: string
//
// optional parameters:
//  name: ClientToken, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) DescribeResourceUsage(DBInstanceId string, optional openapi.M) (*DescribeResourceUsageResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "DescribeResourceUsage")
	args.Query.Set("DBInstanceId", DBInstanceId)
	if v, ok := optional["ClientToken"]; ok {
		if ClientToken, ok := v.(string); ok {
			args.Query.Set("ClientToken", ClientToken)
		} else {
			return nil, errors.New("ClientToken must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(DescribeResourceUsageResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DescribeResourceUsageResponse represents the response of the api DescribeResourceUsage.
type DescribeResourceUsageResponse struct {
	BackupSize     int64
	ColdBackupSize int64
	DBInstanceId   string
	DataSize       int64
	DiskUsed       int64
	Engine         string
	LogSize        int64
	SQLSize        int64
}

// DescribeSQLInjectionInfos version 2014-08-15
//
// required parameters:
//  name: DBInstanceId, type: string
//  name: EndTime, type: string
//  name: StartTime, type: string
//
// optional parameters:
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: PageNumber, type: int, min value: 1, max value: 2147483647
//  name: PageSize, type: int, min value: 30, max value: 100
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) DescribeSQLInjectionInfos(DBInstanceId, EndTime, StartTime string, optional openapi.M) (*DescribeSQLInjectionInfosResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "DescribeSQLInjectionInfos")
	args.Query.Set("DBInstanceId", DBInstanceId)
	args.Query.Set("EndTime", EndTime)
	args.Query.Set("StartTime", StartTime)
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["PageNumber"]; ok {
		if PageNumber, ok := v.(int); ok {
			if PageNumber < 1 {
				return nil, errors.New("PageNumber must be equal or greater than 1")
			}
			if PageNumber > 2147483647 {
				return nil, errors.New("PageNumber must be equal or less than 2147483647")
			}
			args.Query.Set("PageNumber", fmt.Sprint(PageNumber))
		} else {
			return nil, errors.New("PageNumber must be int")
		}
	}
	if v, ok := optional["PageSize"]; ok {
		if PageSize, ok := v.(int); ok {
			if PageSize < 30 {
				return nil, errors.New("PageSize must be equal or greater than 30")
			}
			if PageSize > 100 {
				return nil, errors.New("PageSize must be equal or less than 100")
			}
			args.Query.Set("PageSize", fmt.Sprint(PageSize))
		} else {
			return nil, errors.New("PageSize must be int")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(DescribeSQLInjectionInfosResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DescribeSQLInjectionInfosResponse represents the response of the api DescribeSQLInjectionInfos.
type DescribeSQLInjectionInfosResponse struct {
	Engine string
	Items  struct {
		SQLInjectionInfo []struct {
			AccountName    string
			DBName         string
			EffectRowCount string
			ExecuteTime    string
			HostAddress    string
			LatencyTime    string
			SQLText        string
		}
	}
	PageNumber       int
	PageRecordCount  int
	TotalRecordCount int
}

// DescribeSQLLogRecords version 2014-08-15
//
// required parameters:
//  name: DBInstanceId, type: string
//  name: EndTime, type: string
//  name: StartTime, type: string
//
// optional parameters:
//  name: ClientToken, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: PageNumber, type: int, min value: 1, max value: 2147483647
//  name: PageSize, type: int, min value: 30, max value: 200
//  name: QueryKeywords, type: string
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: SQLId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) DescribeSQLLogRecords(DBInstanceId, EndTime, StartTime string, optional openapi.M) (*DescribeSQLLogRecordsResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "DescribeSQLLogRecords")
	args.Query.Set("DBInstanceId", DBInstanceId)
	args.Query.Set("EndTime", EndTime)
	args.Query.Set("StartTime", StartTime)
	if v, ok := optional["ClientToken"]; ok {
		if ClientToken, ok := v.(string); ok {
			args.Query.Set("ClientToken", ClientToken)
		} else {
			return nil, errors.New("ClientToken must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["PageNumber"]; ok {
		if PageNumber, ok := v.(int); ok {
			if PageNumber < 1 {
				return nil, errors.New("PageNumber must be equal or greater than 1")
			}
			if PageNumber > 2147483647 {
				return nil, errors.New("PageNumber must be equal or less than 2147483647")
			}
			args.Query.Set("PageNumber", fmt.Sprint(PageNumber))
		} else {
			return nil, errors.New("PageNumber must be int")
		}
	}
	if v, ok := optional["PageSize"]; ok {
		if PageSize, ok := v.(int); ok {
			if PageSize < 30 {
				return nil, errors.New("PageSize must be equal or greater than 30")
			}
			if PageSize > 200 {
				return nil, errors.New("PageSize must be equal or less than 200")
			}
			args.Query.Set("PageSize", fmt.Sprint(PageSize))
		} else {
			return nil, errors.New("PageSize must be int")
		}
	}
	if v, ok := optional["QueryKeywords"]; ok {
		if QueryKeywords, ok := v.(string); ok {
			args.Query.Set("QueryKeywords", QueryKeywords)
		} else {
			return nil, errors.New("QueryKeywords must be string")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["SQLId"]; ok {
		if SQLId, ok := v.(int64); ok {
			args.Query.Set("SQLId", fmt.Sprint(SQLId))
		} else {
			return nil, errors.New("SQLId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(DescribeSQLLogRecordsResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DescribeSQLLogRecordsResponse represents the response of the api DescribeSQLLogRecords.
type DescribeSQLLogRecordsResponse struct {
	Items struct {
		SQLRecord []struct {
			AccountName         string
			DBName              string
			ExecuteTime         string
			HostAddress         string
			ReturnRowCounts     int64
			SQLText             string
			TotalExecutionTimes int64
		}
	}
	PageNumber       int
	PageRecordCount  int
	TotalRecordCount int
}

// DescribeSQLLogReports version 2014-08-15
//
// required parameters:
//  name: DBInstanceId, type: string
//  name: EndTime, type: string
//  name: StartTime, type: string
//
// optional parameters:
//  name: ClientToken, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: PageNumber, type: int, min value: 1, max value: 2147483647
//  name: PageSize, type: int, min value: 30, max value: 100
//  name: ReportType, type: string
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) DescribeSQLLogReports(DBInstanceId, EndTime, StartTime string, optional openapi.M) (*DescribeSQLLogReportsResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "DescribeSQLLogReports")
	args.Query.Set("DBInstanceId", DBInstanceId)
	args.Query.Set("EndTime", EndTime)
	args.Query.Set("StartTime", StartTime)
	if v, ok := optional["ClientToken"]; ok {
		if ClientToken, ok := v.(string); ok {
			args.Query.Set("ClientToken", ClientToken)
		} else {
			return nil, errors.New("ClientToken must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["PageNumber"]; ok {
		if PageNumber, ok := v.(int); ok {
			if PageNumber < 1 {
				return nil, errors.New("PageNumber must be equal or greater than 1")
			}
			if PageNumber > 2147483647 {
				return nil, errors.New("PageNumber must be equal or less than 2147483647")
			}
			args.Query.Set("PageNumber", fmt.Sprint(PageNumber))
		} else {
			return nil, errors.New("PageNumber must be int")
		}
	}
	if v, ok := optional["PageSize"]; ok {
		if PageSize, ok := v.(int); ok {
			if PageSize < 30 {
				return nil, errors.New("PageSize must be equal or greater than 30")
			}
			if PageSize > 100 {
				return nil, errors.New("PageSize must be equal or less than 100")
			}
			args.Query.Set("PageSize", fmt.Sprint(PageSize))
		} else {
			return nil, errors.New("PageSize must be int")
		}
	}
	if v, ok := optional["ReportType"]; ok {
		if ReportType, ok := v.(string); ok {
			args.Query.Set("ReportType", ReportType)
		} else {
			return nil, errors.New("ReportType must be string")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(DescribeSQLLogReportsResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DescribeSQLLogReportsResponse represents the response of the api DescribeSQLLogReports.
type DescribeSQLLogReportsResponse struct {
	Items struct {
		SQLReport []struct {
			ReturnTotalRowCounts string
			SQLText              string
			TotalExecutionCounts string
			TotalExecutionTimes  string
		}
	}
	PageNumber       string
	PageRecordCount  string
	TotalRecordCount string
}

// DescribeSlowLogRecords version 2014-08-15
//
// required parameters:
//  name: DBInstanceId, type: string
//  name: EndTime, type: string
//  name: StartTime, type: string
//
// optional parameters:
//  name: DBName, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: PageNumber, type: int, min value: 1, max value: 2147483647
//  name: PageSize, type: int, min value: 30, max value: 100
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: SQLId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) DescribeSlowLogRecords(DBInstanceId, EndTime, StartTime string, optional openapi.M) (*DescribeSlowLogRecordsResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "DescribeSlowLogRecords")
	args.Query.Set("DBInstanceId", DBInstanceId)
	args.Query.Set("EndTime", EndTime)
	args.Query.Set("StartTime", StartTime)
	if v, ok := optional["DBName"]; ok {
		if DBName, ok := v.(string); ok {
			args.Query.Set("DBName", DBName)
		} else {
			return nil, errors.New("DBName must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["PageNumber"]; ok {
		if PageNumber, ok := v.(int); ok {
			if PageNumber < 1 {
				return nil, errors.New("PageNumber must be equal or greater than 1")
			}
			if PageNumber > 2147483647 {
				return nil, errors.New("PageNumber must be equal or less than 2147483647")
			}
			args.Query.Set("PageNumber", fmt.Sprint(PageNumber))
		} else {
			return nil, errors.New("PageNumber must be int")
		}
	}
	if v, ok := optional["PageSize"]; ok {
		if PageSize, ok := v.(int); ok {
			if PageSize < 30 {
				return nil, errors.New("PageSize must be equal or greater than 30")
			}
			if PageSize > 100 {
				return nil, errors.New("PageSize must be equal or less than 100")
			}
			args.Query.Set("PageSize", fmt.Sprint(PageSize))
		} else {
			return nil, errors.New("PageSize must be int")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["SQLId"]; ok {
		if SQLId, ok := v.(int64); ok {
			args.Query.Set("SQLId", fmt.Sprint(SQLId))
		} else {
			return nil, errors.New("SQLId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(DescribeSlowLogRecordsResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DescribeSlowLogRecordsResponse represents the response of the api DescribeSlowLogRecords.
type DescribeSlowLogRecordsResponse struct {
	Engine string
	Items  struct {
		SQLSlowRecord []struct {
			DBName             string
			ExecutionStartTime string
			HostAddress        string
			LockTimes          int64
			ParseRowCounts     int64
			QueryTimes         int64
			ReturnRowCounts    int64
			SQLText            string
		}
	}
	PageNumber       int
	PageRecordCount  int
	TotalRecordCount int
}

// DescribeSlowLogs version 2014-08-15
//
// required parameters:
//  name: DBInstanceId, type: string
//  name: EndTime, type: string
//  name: StartTime, type: string
//
// optional parameters:
//  name: DBName, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: PageNumber, type: int, min value: 1, max value: 65535
//  name: PageSize, type: int, min value: 30, max value: 100
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: SortKey, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) DescribeSlowLogs(DBInstanceId, EndTime, StartTime string, optional openapi.M) (*DescribeSlowLogsResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "DescribeSlowLogs")
	args.Query.Set("DBInstanceId", DBInstanceId)
	args.Query.Set("EndTime", EndTime)
	args.Query.Set("StartTime", StartTime)
	if v, ok := optional["DBName"]; ok {
		if DBName, ok := v.(string); ok {
			args.Query.Set("DBName", DBName)
		} else {
			return nil, errors.New("DBName must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["PageNumber"]; ok {
		if PageNumber, ok := v.(int); ok {
			if PageNumber < 1 {
				return nil, errors.New("PageNumber must be equal or greater than 1")
			}
			if PageNumber > 65535 {
				return nil, errors.New("PageNumber must be equal or less than 65535")
			}
			args.Query.Set("PageNumber", fmt.Sprint(PageNumber))
		} else {
			return nil, errors.New("PageNumber must be int")
		}
	}
	if v, ok := optional["PageSize"]; ok {
		if PageSize, ok := v.(int); ok {
			if PageSize < 30 {
				return nil, errors.New("PageSize must be equal or greater than 30")
			}
			if PageSize > 100 {
				return nil, errors.New("PageSize must be equal or less than 100")
			}
			args.Query.Set("PageSize", fmt.Sprint(PageSize))
		} else {
			return nil, errors.New("PageSize must be int")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["SortKey"]; ok {
		if SortKey, ok := v.(string); ok {
			args.Query.Set("SortKey", SortKey)
		} else {
			return nil, errors.New("SortKey must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(DescribeSlowLogsResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DescribeSlowLogsResponse represents the response of the api DescribeSlowLogs.
type DescribeSlowLogsResponse struct {
	EndTime string
	Engine  string
	Items   struct {
		SQLSlowLog []struct {
			AvgExecutionTime              int64
			CreateTime                    string
			DBName                        string
			MaxExecutionTime              int64
			MaxLockTime                   int64
			MySQLTotalExecutionCounts     int64
			MySQLTotalExecutionTimes      int64
			ParseMaxRowCount              int64
			ParseTotalRowCounts           int64
			ReportTime                    string
			ReturnMaxRowCount             int64
			ReturnTotalRowCounts          int64
			SQLId                         int64
			SQLServerTotalExecutionCounts int64
			SQLServerTotalExecutionTimes  int64
			SQLText                       string
			SlowLogId                     int64
			TotalLockTimes                int64
			TotalLogicalReadCounts        int64
			TotalPhysicalReadCounts       int64
		}
	}
	PageNumber       int
	PageRecordCount  int
	StartTime        string
	TotalRecordCount int
}

// DescribeTasks version 2014-08-15
//
// required parameters:
//  name: DBInstanceId, type: string
//
// optional parameters:
//  name: EndTime, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: PageNumber, type: int, min value: 1, max value: 2147483647
//  name: PageSize, type: int, min value: 30, max value: 100
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: StartTime, type: string
//  name: Status, type: string
//  name: TaskAction, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) DescribeTasks(DBInstanceId string, optional openapi.M) (*DescribeTasksResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "DescribeTasks")
	args.Query.Set("DBInstanceId", DBInstanceId)
	if v, ok := optional["EndTime"]; ok {
		if EndTime, ok := v.(string); ok {
			args.Query.Set("EndTime", EndTime)
		} else {
			return nil, errors.New("EndTime must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["PageNumber"]; ok {
		if PageNumber, ok := v.(int); ok {
			if PageNumber < 1 {
				return nil, errors.New("PageNumber must be equal or greater than 1")
			}
			if PageNumber > 2147483647 {
				return nil, errors.New("PageNumber must be equal or less than 2147483647")
			}
			args.Query.Set("PageNumber", fmt.Sprint(PageNumber))
		} else {
			return nil, errors.New("PageNumber must be int")
		}
	}
	if v, ok := optional["PageSize"]; ok {
		if PageSize, ok := v.(int); ok {
			if PageSize < 30 {
				return nil, errors.New("PageSize must be equal or greater than 30")
			}
			if PageSize > 100 {
				return nil, errors.New("PageSize must be equal or less than 100")
			}
			args.Query.Set("PageSize", fmt.Sprint(PageSize))
		} else {
			return nil, errors.New("PageSize must be int")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["StartTime"]; ok {
		if StartTime, ok := v.(string); ok {
			args.Query.Set("StartTime", StartTime)
		} else {
			return nil, errors.New("StartTime must be string")
		}
	}
	if v, ok := optional["Status"]; ok {
		if Status, ok := v.(string); ok {
			args.Query.Set("Status", Status)
		} else {
			return nil, errors.New("Status must be string")
		}
	}
	if v, ok := optional["TaskAction"]; ok {
		if TaskAction, ok := v.(string); ok {
			args.Query.Set("TaskAction", TaskAction)
		} else {
			return nil, errors.New("TaskAction must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(DescribeTasksResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DescribeTasksResponse represents the response of the api DescribeTasks.
type DescribeTasksResponse struct {
	Items struct {
		TaskProgressInfo []struct {
			BeginTime          string
			DBName             string
			ExpectedFinishTime string
			FinishTime         string
			Progress           string
			ProgressInfo       string
			Status             string // optional values: Failed|NoStart|Pending|Processing|Success
			TaskAction         string
			TaskId             string
		}
	}
	PageNumber       int
	PageRecordCount  int
	TotalRecordCount int
}

// DescribeVpcZoneNos version 2014-08-15
//
// optional parameters:
//  name: ClientToken, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: Region, type: string
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: ZoneId, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) DescribeVpcZoneNos(optional openapi.M) (*DescribeVpcZoneNosResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "DescribeVpcZoneNos")
	if v, ok := optional["ClientToken"]; ok {
		if ClientToken, ok := v.(string); ok {
			args.Query.Set("ClientToken", ClientToken)
		} else {
			return nil, errors.New("ClientToken must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["Region"]; ok {
		if Region, ok := v.(string); ok {
			args.Query.Set("Region", Region)
		} else {
			return nil, errors.New("Region must be string")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["ZoneId"]; ok {
		if ZoneId, ok := v.(string); ok {
			args.Query.Set("ZoneId", ZoneId)
		} else {
			return nil, errors.New("ZoneId must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(DescribeVpcZoneNosResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DescribeVpcZoneNosResponse represents the response of the api DescribeVpcZoneNos.
type DescribeVpcZoneNosResponse struct {
	Items struct {
		VpcZoneId []struct {
			Region    string
			SubDomain string
			ZoneId    string
		}
	}
}

// ExtractBackupFromOAS version 2014-08-15
//
// required parameters:
//  name: BackupId, type: string
//  name: DBInstanceId, type: string
//
// optional parameters:
//  name: ClientToken, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) ExtractBackupFromOAS(BackupId, DBInstanceId string, optional openapi.M) (*ExtractBackupFromOASResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "ExtractBackupFromOAS")
	args.Query.Set("BackupId", BackupId)
	args.Query.Set("DBInstanceId", DBInstanceId)
	if v, ok := optional["ClientToken"]; ok {
		if ClientToken, ok := v.(string); ok {
			args.Query.Set("ClientToken", ClientToken)
		} else {
			return nil, errors.New("ClientToken must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(ExtractBackupFromOASResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// ExtractBackupFromOASResponse represents the response of the api ExtractBackupFromOAS.
type ExtractBackupFromOASResponse struct {
	DataExtractionLastTime string
}

// GrantAccountPrivilege version 2014-08-15
//
// required parameters:
//  name: AccountName, type: string
//  name: AccountPrivilege, type: string
//  name: DBInstanceId, type: string
//  name: DBName, type: string
//
// optional parameters:
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) GrantAccountPrivilege(AccountName, AccountPrivilege, DBInstanceId, DBName string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "GrantAccountPrivilege")
	args.Query.Set("AccountName", AccountName)
	args.Query.Set("AccountPrivilege", AccountPrivilege)
	args.Query.Set("DBInstanceId", DBInstanceId)
	args.Query.Set("DBName", DBName)
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// ImportDataForSQLServer version 2014-08-15
//
// required parameters:
//  name: DBInstanceId, type: string
//  name: FileName, type: string
//
// optional parameters:
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) ImportDataForSQLServer(DBInstanceId, FileName string, optional openapi.M) (*ImportDataForSQLServerResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "ImportDataForSQLServer")
	args.Query.Set("DBInstanceId", DBInstanceId)
	args.Query.Set("FileName", FileName)
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(ImportDataForSQLServerResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// ImportDataForSQLServerResponse represents the response of the api ImportDataForSQLServer.
type ImportDataForSQLServerResponse struct {
	ImportID int
}

// ImportDataFromDatabase version 2014-08-15
//
// required parameters:
//  name: DBInstanceId, type: string
//  name: ImportDataType, type: string
//  name: IsLockTable, type: string
//  name: SourceDatabaseDBNames, type: string
//  name: SourceDatabaseIp, type: string
//  name: SourceDatabasePassword, type: string
//  name: SourceDatabasePort, type: string
//  name: SourceDatabaseUserName, type: string
//
// optional parameters:
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) ImportDataFromDatabase(DBInstanceId, ImportDataType, IsLockTable, SourceDatabaseDBNames, SourceDatabaseIp, SourceDatabasePassword, SourceDatabasePort, SourceDatabaseUserName string, optional openapi.M) (*ImportDataFromDatabaseResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "ImportDataFromDatabase")
	args.Query.Set("DBInstanceId", DBInstanceId)
	args.Query.Set("ImportDataType", ImportDataType)
	args.Query.Set("IsLockTable", IsLockTable)
	args.Query.Set("SourceDatabaseDBNames", SourceDatabaseDBNames)
	args.Query.Set("SourceDatabaseIp", SourceDatabaseIp)
	args.Query.Set("SourceDatabasePassword", SourceDatabasePassword)
	args.Query.Set("SourceDatabasePort", SourceDatabasePort)
	args.Query.Set("SourceDatabaseUserName", SourceDatabaseUserName)
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(ImportDataFromDatabaseResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// ImportDataFromDatabaseResponse represents the response of the api ImportDataFromDatabase.
type ImportDataFromDatabaseResponse struct {
	ImportId int
}

// ImportDatabaseBetweenInstances version 2014-08-15
//
// required parameters:
//  name: DBInfo, type: string
//  name: DBInstanceId, type: string
//  name: SourceDBInstanceId, type: string
//
// optional parameters:
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) ImportDatabaseBetweenInstances(DBInfo, DBInstanceId, SourceDBInstanceId string, optional openapi.M) (*ImportDatabaseBetweenInstancesResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "ImportDatabaseBetweenInstances")
	args.Query.Set("DBInfo", DBInfo)
	args.Query.Set("DBInstanceId", DBInstanceId)
	args.Query.Set("SourceDBInstanceId", SourceDBInstanceId)
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(ImportDatabaseBetweenInstancesResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// ImportDatabaseBetweenInstancesResponse represents the response of the api ImportDatabaseBetweenInstances.
type ImportDatabaseBetweenInstancesResponse struct {
	ImportId string
}

// LockDBInstance version 2014-08-15
//
// required parameters:
//  name: DBInstanceId, type: string
//  name: LockReason, type: string
//
// optional parameters:
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) LockDBInstance(DBInstanceId, LockReason string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "LockDBInstance")
	args.Query.Set("DBInstanceId", DBInstanceId)
	args.Query.Set("LockReason", LockReason)
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// MigrateToOtherZone version 2014-08-15
//
// required parameters:
//  name: DBInstanceId, type: string
//  name: ZoneId, type: string
//
// optional parameters:
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) MigrateToOtherZone(DBInstanceId, ZoneId string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "MigrateToOtherZone")
	args.Query.Set("DBInstanceId", DBInstanceId)
	args.Query.Set("ZoneId", ZoneId)
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// ModifyAccountDescription version 2014-08-15
//
// required parameters:
//  name: AccountDescription, type: string
//  name: AccountName, type: string
//  name: DBInstanceId, type: string
//
// optional parameters:
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) ModifyAccountDescription(AccountDescription, AccountName, DBInstanceId string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "ModifyAccountDescription")
	args.Query.Set("AccountDescription", AccountDescription)
	args.Query.Set("AccountName", AccountName)
	args.Query.Set("DBInstanceId", DBInstanceId)
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// ModifyBackupPolicy version 2014-08-15
//
// required parameters:
//  name: DBInstanceId, type: string
//  name: PreferredBackupPeriod, type: string
//  name: PreferredBackupTime, type: string
//
// optional parameters:
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) ModifyBackupPolicy(DBInstanceId, PreferredBackupPeriod, PreferredBackupTime string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "ModifyBackupPolicy")
	args.Query.Set("DBInstanceId", DBInstanceId)
	args.Query.Set("PreferredBackupPeriod", PreferredBackupPeriod)
	args.Query.Set("PreferredBackupTime", PreferredBackupTime)
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// ModifyDBDescription version 2014-08-15
//
// required parameters:
//  name: DBDescription, type: string
//  name: DBInstanceId, type: string
//  name: DBName, type: string
//
// optional parameters:
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) ModifyDBDescription(DBDescription, DBInstanceId, DBName string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "ModifyDBDescription")
	args.Query.Set("DBDescription", DBDescription)
	args.Query.Set("DBInstanceId", DBInstanceId)
	args.Query.Set("DBName", DBName)
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// ModifyDBInstanceConnectionMode version 2014-08-15
//
// required parameters:
//  name: ConnectionMode, type: string
//  name: DBInstanceId, type: string
//
// optional parameters:
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) ModifyDBInstanceConnectionMode(ConnectionMode, DBInstanceId string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "ModifyDBInstanceConnectionMode")
	args.Query.Set("ConnectionMode", ConnectionMode)
	args.Query.Set("DBInstanceId", DBInstanceId)
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// ModifyDBInstanceConnectionString version 2014-08-15
//
// required parameters:
//  name: ConnectionStringPrefix, type: string
//  name: CurrentConnectionString, type: string
//  name: DBInstanceId, type: string
//  name: Port, type: string
//
// optional parameters:
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) ModifyDBInstanceConnectionString(ConnectionStringPrefix, CurrentConnectionString, DBInstanceId, Port string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "ModifyDBInstanceConnectionString")
	args.Query.Set("ConnectionStringPrefix", ConnectionStringPrefix)
	args.Query.Set("CurrentConnectionString", CurrentConnectionString)
	args.Query.Set("DBInstanceId", DBInstanceId)
	args.Query.Set("Port", Port)
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// ModifyDBInstanceDescription version 2014-08-15
//
// required parameters:
//  name: DBInstanceDescription, type: string
//  name: DBInstanceId, type: string
//
// optional parameters:
//  name: ClientToken, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) ModifyDBInstanceDescription(DBInstanceDescription, DBInstanceId string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "ModifyDBInstanceDescription")
	args.Query.Set("DBInstanceDescription", DBInstanceDescription)
	args.Query.Set("DBInstanceId", DBInstanceId)
	if v, ok := optional["ClientToken"]; ok {
		if ClientToken, ok := v.(string); ok {
			args.Query.Set("ClientToken", ClientToken)
		} else {
			return nil, errors.New("ClientToken must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// ModifyDBInstanceMaintainTime version 2014-08-15
//
// required parameters:
//  name: DBInstanceId, type: string
//  name: MaintainTime, type: string
//
// optional parameters:
//  name: ClientToken, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) ModifyDBInstanceMaintainTime(DBInstanceId, MaintainTime string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "ModifyDBInstanceMaintainTime")
	args.Query.Set("DBInstanceId", DBInstanceId)
	args.Query.Set("MaintainTime", MaintainTime)
	if v, ok := optional["ClientToken"]; ok {
		if ClientToken, ok := v.(string); ok {
			args.Query.Set("ClientToken", ClientToken)
		} else {
			return nil, errors.New("ClientToken must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// ModifyDBInstanceNetworkType version 2014-08-15
//
// required parameters:
//  name: DBInstanceId, type: string
//  name: InstanceNetworkType, type: string
//
// optional parameters:
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: PrivateIpAddress, type: string
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: VPCId, type: string
//  name: VSwitchId, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) ModifyDBInstanceNetworkType(DBInstanceId, InstanceNetworkType string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "ModifyDBInstanceNetworkType")
	args.Query.Set("DBInstanceId", DBInstanceId)
	args.Query.Set("InstanceNetworkType", InstanceNetworkType)
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["PrivateIpAddress"]; ok {
		if PrivateIpAddress, ok := v.(string); ok {
			args.Query.Set("PrivateIpAddress", PrivateIpAddress)
		} else {
			return nil, errors.New("PrivateIpAddress must be string")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["VPCId"]; ok {
		if VPCId, ok := v.(string); ok {
			args.Query.Set("VPCId", VPCId)
		} else {
			return nil, errors.New("VPCId must be string")
		}
	}
	if v, ok := optional["VSwitchId"]; ok {
		if VSwitchId, ok := v.(string); ok {
			args.Query.Set("VSwitchId", VSwitchId)
		} else {
			return nil, errors.New("VSwitchId must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// ModifyDBInstanceSpec version 2014-08-15
//
// required parameters:
//  name: DBInstanceId, type: string
//  name: PayType, type: string
//
// optional parameters:
//  name: ClientToken, type: string
//  name: DBInstanceClass, type: string
//  name: DBInstanceStorage, type: int, min value: 5, max value: 1000
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) ModifyDBInstanceSpec(DBInstanceId, PayType string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "ModifyDBInstanceSpec")
	args.Query.Set("DBInstanceId", DBInstanceId)
	args.Query.Set("PayType", PayType)
	if v, ok := optional["ClientToken"]; ok {
		if ClientToken, ok := v.(string); ok {
			args.Query.Set("ClientToken", ClientToken)
		} else {
			return nil, errors.New("ClientToken must be string")
		}
	}
	if v, ok := optional["DBInstanceClass"]; ok {
		if DBInstanceClass, ok := v.(string); ok {
			args.Query.Set("DBInstanceClass", DBInstanceClass)
		} else {
			return nil, errors.New("DBInstanceClass must be string")
		}
	}
	if v, ok := optional["DBInstanceStorage"]; ok {
		if DBInstanceStorage, ok := v.(int); ok {
			if DBInstanceStorage < 5 {
				return nil, errors.New("DBInstanceStorage must be equal or greater than 5")
			}
			if DBInstanceStorage > 1000 {
				return nil, errors.New("DBInstanceStorage must be equal or less than 1000")
			}
			args.Query.Set("DBInstanceStorage", fmt.Sprint(DBInstanceStorage))
		} else {
			return nil, errors.New("DBInstanceStorage must be int")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// ModifyParameter version 2014-08-15
//
// required parameters:
//  name: DBInstanceId, type: string
//  name: Parameters, type: string
//
// optional parameters:
//  name: ClientToken, type: string
//  name: Forcerestart, type: bool
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) ModifyParameter(DBInstanceId, Parameters string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "ModifyParameter")
	args.Query.Set("DBInstanceId", DBInstanceId)
	args.Query.Set("Parameters", Parameters)
	if v, ok := optional["ClientToken"]; ok {
		if ClientToken, ok := v.(string); ok {
			args.Query.Set("ClientToken", ClientToken)
		} else {
			return nil, errors.New("ClientToken must be string")
		}
	}
	if v, ok := optional["Forcerestart"]; ok {
		if Forcerestart, ok := v.(bool); ok {
			args.Query.Set("Forcerestart", fmt.Sprint(Forcerestart))
		} else {
			return nil, errors.New("Forcerestart must be bool")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// ModifyPostpaidDBInstanceSpec version 2014-08-15
//
// required parameters:
//  name: DBInstanceId, type: string
//
// optional parameters:
//  name: ClientToken, type: string
//  name: DBInstanceClass, type: string
//  name: DBInstanceStorage, type: int, min value: 5, max value: 1000
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) ModifyPostpaidDBInstanceSpec(DBInstanceId string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "ModifyPostpaidDBInstanceSpec")
	args.Query.Set("DBInstanceId", DBInstanceId)
	if v, ok := optional["ClientToken"]; ok {
		if ClientToken, ok := v.(string); ok {
			args.Query.Set("ClientToken", ClientToken)
		} else {
			return nil, errors.New("ClientToken must be string")
		}
	}
	if v, ok := optional["DBInstanceClass"]; ok {
		if DBInstanceClass, ok := v.(string); ok {
			args.Query.Set("DBInstanceClass", DBInstanceClass)
		} else {
			return nil, errors.New("DBInstanceClass must be string")
		}
	}
	if v, ok := optional["DBInstanceStorage"]; ok {
		if DBInstanceStorage, ok := v.(int); ok {
			if DBInstanceStorage < 5 {
				return nil, errors.New("DBInstanceStorage must be equal or greater than 5")
			}
			if DBInstanceStorage > 1000 {
				return nil, errors.New("DBInstanceStorage must be equal or less than 1000")
			}
			args.Query.Set("DBInstanceStorage", fmt.Sprint(DBInstanceStorage))
		} else {
			return nil, errors.New("DBInstanceStorage must be int")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// ModifySecurityIps version 2014-08-15
//
// required parameters:
//  name: DBInstanceId, type: string
//  name: SecurityIps, type: string
//
// optional parameters:
//  name: ClientToken, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) ModifySecurityIps(DBInstanceId, SecurityIps string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "ModifySecurityIps")
	args.Query.Set("DBInstanceId", DBInstanceId)
	args.Query.Set("SecurityIps", SecurityIps)
	if v, ok := optional["ClientToken"]; ok {
		if ClientToken, ok := v.(string); ok {
			args.Query.Set("ClientToken", ClientToken)
		} else {
			return nil, errors.New("ClientToken must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// PreCheckBeforeImportData version 2014-08-15
//
// required parameters:
//  name: DBInstanceId, type: string
//  name: ImportDataType, type: string
//  name: SourceDatabaseDBNames, type: string
//  name: SourceDatabaseIp, type: string
//  name: SourceDatabasePassword, type: string
//  name: SourceDatabasePort, type: string
//  name: SourceDatabaseUserName, type: string
//
// optional parameters:
//  name: ClientToken, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) PreCheckBeforeImportData(DBInstanceId, ImportDataType, SourceDatabaseDBNames, SourceDatabaseIp, SourceDatabasePassword, SourceDatabasePort, SourceDatabaseUserName string, optional openapi.M) (*PreCheckBeforeImportDataResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "PreCheckBeforeImportData")
	args.Query.Set("DBInstanceId", DBInstanceId)
	args.Query.Set("ImportDataType", ImportDataType)
	args.Query.Set("SourceDatabaseDBNames", SourceDatabaseDBNames)
	args.Query.Set("SourceDatabaseIp", SourceDatabaseIp)
	args.Query.Set("SourceDatabasePassword", SourceDatabasePassword)
	args.Query.Set("SourceDatabasePort", SourceDatabasePort)
	args.Query.Set("SourceDatabaseUserName", SourceDatabaseUserName)
	if v, ok := optional["ClientToken"]; ok {
		if ClientToken, ok := v.(string); ok {
			args.Query.Set("ClientToken", ClientToken)
		} else {
			return nil, errors.New("ClientToken must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(PreCheckBeforeImportDataResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// PreCheckBeforeImportDataResponse represents the response of the api PreCheckBeforeImportData.
type PreCheckBeforeImportDataResponse struct {
	PreCheckId string
}

// PurgeDBInstanceLog version 2014-08-15
//
// required parameters:
//  name: DBInstanceId, type: string
//
// optional parameters:
//  name: ClientToken, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) PurgeDBInstanceLog(DBInstanceId string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "PurgeDBInstanceLog")
	args.Query.Set("DBInstanceId", DBInstanceId)
	if v, ok := optional["ClientToken"]; ok {
		if ClientToken, ok := v.(string); ok {
			args.Query.Set("ClientToken", ClientToken)
		} else {
			return nil, errors.New("ClientToken must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// ReleaseInstancePublicConnection version 2014-08-15
//
// required parameters:
//  name: CurrentConnectionString, type: string
//  name: DBInstanceId, type: string
//
// optional parameters:
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) ReleaseInstancePublicConnection(CurrentConnectionString, DBInstanceId string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "ReleaseInstancePublicConnection")
	args.Query.Set("CurrentConnectionString", CurrentConnectionString)
	args.Query.Set("DBInstanceId", DBInstanceId)
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// RemoveTagsFromResource version 2014-08-15
//
// required parameters:
//  name: DBInstanceId, type: string
//
// optional parameters:
//  name: ClientToken, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: Tag.1.key, type: string
//  name: Tag.1.value, type: string
//  name: Tag.2.key, type: string
//  name: Tag.2.value, type: string
//  name: Tag.3.key, type: string
//  name: Tag.3.value, type: string
//  name: Tag.4.key, type: string
//  name: Tag.4.value, type: string
//  name: Tag.5.key, type: string
//  name: Tag.5.value, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
//  name: proxyId, type: string
func (api API) RemoveTagsFromResource(DBInstanceId string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "RemoveTagsFromResource")
	args.Query.Set("DBInstanceId", DBInstanceId)
	if v, ok := optional["ClientToken"]; ok {
		if ClientToken, ok := v.(string); ok {
			args.Query.Set("ClientToken", ClientToken)
		} else {
			return nil, errors.New("ClientToken must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["Tag.1.key"]; ok {
		if Tag1key, ok := v.(string); ok {
			args.Query.Set("Tag.1.key", Tag1key)
		} else {
			return nil, errors.New("Tag.1.key must be string")
		}
	}
	if v, ok := optional["Tag.1.value"]; ok {
		if Tag1value, ok := v.(string); ok {
			args.Query.Set("Tag.1.value", Tag1value)
		} else {
			return nil, errors.New("Tag.1.value must be string")
		}
	}
	if v, ok := optional["Tag.2.key"]; ok {
		if Tag2key, ok := v.(string); ok {
			args.Query.Set("Tag.2.key", Tag2key)
		} else {
			return nil, errors.New("Tag.2.key must be string")
		}
	}
	if v, ok := optional["Tag.2.value"]; ok {
		if Tag2value, ok := v.(string); ok {
			args.Query.Set("Tag.2.value", Tag2value)
		} else {
			return nil, errors.New("Tag.2.value must be string")
		}
	}
	if v, ok := optional["Tag.3.key"]; ok {
		if Tag3key, ok := v.(string); ok {
			args.Query.Set("Tag.3.key", Tag3key)
		} else {
			return nil, errors.New("Tag.3.key must be string")
		}
	}
	if v, ok := optional["Tag.3.value"]; ok {
		if Tag3value, ok := v.(string); ok {
			args.Query.Set("Tag.3.value", Tag3value)
		} else {
			return nil, errors.New("Tag.3.value must be string")
		}
	}
	if v, ok := optional["Tag.4.key"]; ok {
		if Tag4key, ok := v.(string); ok {
			args.Query.Set("Tag.4.key", Tag4key)
		} else {
			return nil, errors.New("Tag.4.key must be string")
		}
	}
	if v, ok := optional["Tag.4.value"]; ok {
		if Tag4value, ok := v.(string); ok {
			args.Query.Set("Tag.4.value", Tag4value)
		} else {
			return nil, errors.New("Tag.4.value must be string")
		}
	}
	if v, ok := optional["Tag.5.key"]; ok {
		if Tag5key, ok := v.(string); ok {
			args.Query.Set("Tag.5.key", Tag5key)
		} else {
			return nil, errors.New("Tag.5.key must be string")
		}
	}
	if v, ok := optional["Tag.5.value"]; ok {
		if Tag5value, ok := v.(string); ok {
			args.Query.Set("Tag.5.value", Tag5value)
		} else {
			return nil, errors.New("Tag.5.value must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}
	if v, ok := optional["proxyId"]; ok {
		if proxyId, ok := v.(string); ok {
			args.Query.Set("proxyId", proxyId)
		} else {
			return nil, errors.New("proxyId must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// ResetAccountForPG version 2014-08-15
//
// required parameters:
//  name: AccountName, type: string
//  name: AccountPassword, type: string
//  name: DBInstanceId, type: string
//
// optional parameters:
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) ResetAccountForPG(AccountName, AccountPassword, DBInstanceId string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "ResetAccountForPG")
	args.Query.Set("AccountName", AccountName)
	args.Query.Set("AccountPassword", AccountPassword)
	args.Query.Set("DBInstanceId", DBInstanceId)
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// ResetAccountPassword version 2014-08-15
//
// required parameters:
//  name: AccountName, type: string
//  name: AccountPassword, type: string
//  name: DBInstanceId, type: string
//
// optional parameters:
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) ResetAccountPassword(AccountName, AccountPassword, DBInstanceId string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "ResetAccountPassword")
	args.Query.Set("AccountName", AccountName)
	args.Query.Set("AccountPassword", AccountPassword)
	args.Query.Set("DBInstanceId", DBInstanceId)
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// RestartDBInstance version 2014-08-15
//
// required parameters:
//  name: DBInstanceId, type: string
//
// optional parameters:
//  name: ClientToken, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) RestartDBInstance(DBInstanceId string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "RestartDBInstance")
	args.Query.Set("DBInstanceId", DBInstanceId)
	if v, ok := optional["ClientToken"]; ok {
		if ClientToken, ok := v.(string); ok {
			args.Query.Set("ClientToken", ClientToken)
		} else {
			return nil, errors.New("ClientToken must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// RestoreDBInstance version 2014-08-15
//
// required parameters:
//  name: BackupId, type: string
//  name: DBInstanceId, type: string
//
// optional parameters:
//  name: ClientToken, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) RestoreDBInstance(BackupId, DBInstanceId string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "RestoreDBInstance")
	args.Query.Set("BackupId", BackupId)
	args.Query.Set("DBInstanceId", DBInstanceId)
	if v, ok := optional["ClientToken"]; ok {
		if ClientToken, ok := v.(string); ok {
			args.Query.Set("ClientToken", ClientToken)
		} else {
			return nil, errors.New("ClientToken must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// RevokeAccountPrivilege version 2014-08-15
//
// required parameters:
//  name: AccountName, type: string
//  name: DBInstanceId, type: string
//  name: DBName, type: string
//
// optional parameters:
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) RevokeAccountPrivilege(AccountName, DBInstanceId, DBName string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "RevokeAccountPrivilege")
	args.Query.Set("AccountName", AccountName)
	args.Query.Set("DBInstanceId", DBInstanceId)
	args.Query.Set("DBName", DBName)
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// StartDBInstanceDiagnose version 2014-08-15
//
// required parameters:
//  name: DBInstanceId, type: string
//
// optional parameters:
//  name: ClientToken, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
//  name: proxyId, type: string
func (api API) StartDBInstanceDiagnose(DBInstanceId string, optional openapi.M) (*StartDBInstanceDiagnoseResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "StartDBInstanceDiagnose")
	args.Query.Set("DBInstanceId", DBInstanceId)
	if v, ok := optional["ClientToken"]; ok {
		if ClientToken, ok := v.(string); ok {
			args.Query.Set("ClientToken", ClientToken)
		} else {
			return nil, errors.New("ClientToken must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}
	if v, ok := optional["proxyId"]; ok {
		if proxyId, ok := v.(string); ok {
			args.Query.Set("proxyId", proxyId)
		} else {
			return nil, errors.New("proxyId must be string")
		}
	}

	result := new(StartDBInstanceDiagnoseResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// StartDBInstanceDiagnoseResponse represents the response of the api StartDBInstanceDiagnose.
type StartDBInstanceDiagnoseResponse struct {
	DBInstanceId   string
	DBInstanceName string
}

// StopSyncing version 2014-08-15
//
// required parameters:
//  name: DBInstanceId, type: string
//  name: ImportId, type: int
//
// optional parameters:
//  name: ClientToken, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) StopSyncing(DBInstanceId string, ImportId int, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "StopSyncing")
	args.Query.Set("DBInstanceId", DBInstanceId)
	args.Query.Set("ImportId", fmt.Sprint(ImportId))
	if v, ok := optional["ClientToken"]; ok {
		if ClientToken, ok := v.(string); ok {
			args.Query.Set("ClientToken", ClientToken)
		} else {
			return nil, errors.New("ClientToken must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// SwitchDBInstanceNetType version 2014-08-15
//
// required parameters:
//  name: ConnectionStringPrefix, type: string
//  name: DBInstanceId, type: string
//
// optional parameters:
//  name: ClientToken, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: Port, type: int, min value: 3001, max value: 3999
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) SwitchDBInstanceNetType(ConnectionStringPrefix, DBInstanceId string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "SwitchDBInstanceNetType")
	args.Query.Set("ConnectionStringPrefix", ConnectionStringPrefix)
	args.Query.Set("DBInstanceId", DBInstanceId)
	if v, ok := optional["ClientToken"]; ok {
		if ClientToken, ok := v.(string); ok {
			args.Query.Set("ClientToken", ClientToken)
		} else {
			return nil, errors.New("ClientToken must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["Port"]; ok {
		if Port, ok := v.(int); ok {
			if Port < 3001 {
				return nil, errors.New("Port must be equal or greater than 3001")
			}
			if Port > 3999 {
				return nil, errors.New("Port must be equal or less than 3999")
			}
			args.Query.Set("Port", fmt.Sprint(Port))
		} else {
			return nil, errors.New("Port must be int")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// UnlockDBInstance version 2014-08-15
//
// required parameters:
//  name: DBInstanceId, type: string
//
// optional parameters:
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) UnlockDBInstance(DBInstanceId string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "UnlockDBInstance")
	args.Query.Set("DBInstanceId", DBInstanceId)
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// UpgradeDBInstanceEngineVersion version 2014-08-15
//
// required parameters:
//  name: DBInstanceId, type: string
//  name: EngineVersion, type: string
//
// optional parameters:
//  name: ClientToken, type: string
//  name: OwnerAccount, type: string
//  name: OwnerId, type: int64
//  name: ResourceOwnerAccount, type: string
//  name: ResourceOwnerId, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) UpgradeDBInstanceEngineVersion(DBInstanceId, EngineVersion string, optional openapi.M) (*UpgradeDBInstanceEngineVersionResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "UpgradeDBInstanceEngineVersion")
	args.Query.Set("DBInstanceId", DBInstanceId)
	args.Query.Set("EngineVersion", EngineVersion)
	if v, ok := optional["ClientToken"]; ok {
		if ClientToken, ok := v.(string); ok {
			args.Query.Set("ClientToken", ClientToken)
		} else {
			return nil, errors.New("ClientToken must be string")
		}
	}
	if v, ok := optional["OwnerAccount"]; ok {
		if OwnerAccount, ok := v.(string); ok {
			args.Query.Set("OwnerAccount", OwnerAccount)
		} else {
			return nil, errors.New("OwnerAccount must be string")
		}
	}
	if v, ok := optional["OwnerId"]; ok {
		if OwnerId, ok := v.(int64); ok {
			args.Query.Set("OwnerId", fmt.Sprint(OwnerId))
		} else {
			return nil, errors.New("OwnerId must be int64")
		}
	}
	if v, ok := optional["ResourceOwnerAccount"]; ok {
		if ResourceOwnerAccount, ok := v.(string); ok {
			args.Query.Set("ResourceOwnerAccount", ResourceOwnerAccount)
		} else {
			return nil, errors.New("ResourceOwnerAccount must be string")
		}
	}
	if v, ok := optional["ResourceOwnerId"]; ok {
		if ResourceOwnerId, ok := v.(int64); ok {
			args.Query.Set("ResourceOwnerId", fmt.Sprint(ResourceOwnerId))
		} else {
			return nil, errors.New("ResourceOwnerId must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(UpgradeDBInstanceEngineVersionResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// UpgradeDBInstanceEngineVersionResponse represents the response of the api UpgradeDBInstanceEngineVersion.
type UpgradeDBInstanceEngineVersionResponse struct {
	TaskId string
}
