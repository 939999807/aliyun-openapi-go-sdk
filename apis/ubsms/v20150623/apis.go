// Copyright 2015 Chen Xianren. All rights reserved.
// Code generated by openapi-meta; DO NOT EDIT

package ubsms

import (
	"errors"
	"fmt"

	"git.oschina.net/cxr29/aliyun-openapi-go-sdk"
)

var (
	_ = errors.New("")
	_ = fmt.Sprint("")
)

type API struct {
	openapi.Service
}

func New(accessKeyId, accessKeySecret string) API {
	return API{openapi.NewService(accessKeyId, accessKeySecret)}
}

func NewParams() openapi.Params {
	args := openapi.NewParams()
	args.Product = Product
	args.Style = Style
	args.Version = Version
	return args
}

const (
	Product = "Ubsms"
	Style   = "RPC"
	Version = "2015-06-23"
)

// DescribeBusinessStatus version 2015-06-23
//
// required parameters:
//  name: callerBid, type: string
//
// optional parameters:
//  name: Password, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) DescribeBusinessStatus(callerBid string, optional openapi.M) (*DescribeBusinessStatusResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "DescribeBusinessStatus")
	args.Query.Set("callerBid", callerBid)
	if v, ok := optional["Password"]; ok {
		if Password, ok := v.(string); ok {
			args.Query.Set("Password", Password)
		} else {
			return nil, errors.New("Password must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(DescribeBusinessStatusResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DescribeBusinessStatusResponse represents the response of the api DescribeBusinessStatus.
type DescribeBusinessStatusResponse struct {
	Success                bool
	UserBusinessStatusList struct {
		UserBusinessStatus []struct {
			ServiceCode string
			Statuses    struct {
				Status []struct {
					StatusKey   string
					StatusValue string
				}
			}
			Uid string
		}
	}
}

// NotifyUserBusinessCommand version 2015-06-23
//
// required parameters:
//  name: ClientToken, type: string
//  name: Cmd, type: string
//  name: ServiceCode, type: string
//  name: Uid, type: string
//
// optional parameters:
//  name: InstanceId, type: string
//  name: Password, type: string
//  name: Region, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) NotifyUserBusinessCommand(ClientToken, Cmd, ServiceCode, Uid string, optional openapi.M) (*NotifyUserBusinessCommandResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "NotifyUserBusinessCommand")
	args.Query.Set("ClientToken", ClientToken)
	args.Query.Set("Cmd", Cmd)
	args.Query.Set("ServiceCode", ServiceCode)
	args.Query.Set("Uid", Uid)
	if v, ok := optional["InstanceId"]; ok {
		if InstanceId, ok := v.(string); ok {
			args.Query.Set("InstanceId", InstanceId)
		} else {
			return nil, errors.New("InstanceId must be string")
		}
	}
	if v, ok := optional["Password"]; ok {
		if Password, ok := v.(string); ok {
			args.Query.Set("Password", Password)
		} else {
			return nil, errors.New("Password must be string")
		}
	}
	if v, ok := optional["Region"]; ok {
		if Region, ok := v.(string); ok {
			args.Query.Set("Region", Region)
		} else {
			return nil, errors.New("Region must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(NotifyUserBusinessCommandResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// NotifyUserBusinessCommandResponse represents the response of the api NotifyUserBusinessCommand.
type NotifyUserBusinessCommandResponse struct {
	Success bool
}

// SetUserBusinessStatus version 2015-06-23
//
// required parameters:
//  name: Service, type: string
//  name: StatusKey, type: string
//  name: StatusValue, type: string
//  name: Uid, type: string
//
// optional parameters:
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) SetUserBusinessStatus(Service, StatusKey, StatusValue, Uid string, optional openapi.M) (*SetUserBusinessStatusResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "SetUserBusinessStatus")
	args.Query.Set("Service", Service)
	args.Query.Set("StatusKey", StatusKey)
	args.Query.Set("StatusValue", StatusValue)
	args.Query.Set("Uid", Uid)
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(SetUserBusinessStatusResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// SetUserBusinessStatusResponse represents the response of the api SetUserBusinessStatus.
type SetUserBusinessStatusResponse struct {
	Success bool
}

// SetUserBusinessStatuses version 2015-06-23
//
// required parameters:
//  name: ServiceCode, type: string
//  name: Uid, type: string
//
// optional parameters:
//  name: Password, type: string
//  name: StatusKey1, type: string
//  name: StatusKey10, type: string
//  name: StatusKey2, type: string
//  name: StatusKey3, type: string
//  name: StatusKey4, type: string
//  name: StatusKey5, type: string
//  name: StatusKey6, type: string
//  name: StatusKey7, type: string
//  name: StatusKey8, type: string
//  name: StatusKey9, type: string
//  name: StatusValue1, type: string
//  name: StatusValue10, type: string
//  name: StatusValue2, type: string
//  name: StatusValue3, type: string
//  name: StatusValue4, type: string
//  name: StatusValue5, type: string
//  name: StatusValue6, type: string
//  name: StatusValue7, type: string
//  name: StatusValue8, type: string
//  name: StatusValue9, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) SetUserBusinessStatuses(ServiceCode, Uid string, optional openapi.M) (*SetUserBusinessStatusesResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "SetUserBusinessStatuses")
	args.Query.Set("ServiceCode", ServiceCode)
	args.Query.Set("Uid", Uid)
	if v, ok := optional["Password"]; ok {
		if Password, ok := v.(string); ok {
			args.Query.Set("Password", Password)
		} else {
			return nil, errors.New("Password must be string")
		}
	}
	if v, ok := optional["StatusKey1"]; ok {
		if StatusKey1, ok := v.(string); ok {
			args.Query.Set("StatusKey1", StatusKey1)
		} else {
			return nil, errors.New("StatusKey1 must be string")
		}
	}
	if v, ok := optional["StatusKey10"]; ok {
		if StatusKey10, ok := v.(string); ok {
			args.Query.Set("StatusKey10", StatusKey10)
		} else {
			return nil, errors.New("StatusKey10 must be string")
		}
	}
	if v, ok := optional["StatusKey2"]; ok {
		if StatusKey2, ok := v.(string); ok {
			args.Query.Set("StatusKey2", StatusKey2)
		} else {
			return nil, errors.New("StatusKey2 must be string")
		}
	}
	if v, ok := optional["StatusKey3"]; ok {
		if StatusKey3, ok := v.(string); ok {
			args.Query.Set("StatusKey3", StatusKey3)
		} else {
			return nil, errors.New("StatusKey3 must be string")
		}
	}
	if v, ok := optional["StatusKey4"]; ok {
		if StatusKey4, ok := v.(string); ok {
			args.Query.Set("StatusKey4", StatusKey4)
		} else {
			return nil, errors.New("StatusKey4 must be string")
		}
	}
	if v, ok := optional["StatusKey5"]; ok {
		if StatusKey5, ok := v.(string); ok {
			args.Query.Set("StatusKey5", StatusKey5)
		} else {
			return nil, errors.New("StatusKey5 must be string")
		}
	}
	if v, ok := optional["StatusKey6"]; ok {
		if StatusKey6, ok := v.(string); ok {
			args.Query.Set("StatusKey6", StatusKey6)
		} else {
			return nil, errors.New("StatusKey6 must be string")
		}
	}
	if v, ok := optional["StatusKey7"]; ok {
		if StatusKey7, ok := v.(string); ok {
			args.Query.Set("StatusKey7", StatusKey7)
		} else {
			return nil, errors.New("StatusKey7 must be string")
		}
	}
	if v, ok := optional["StatusKey8"]; ok {
		if StatusKey8, ok := v.(string); ok {
			args.Query.Set("StatusKey8", StatusKey8)
		} else {
			return nil, errors.New("StatusKey8 must be string")
		}
	}
	if v, ok := optional["StatusKey9"]; ok {
		if StatusKey9, ok := v.(string); ok {
			args.Query.Set("StatusKey9", StatusKey9)
		} else {
			return nil, errors.New("StatusKey9 must be string")
		}
	}
	if v, ok := optional["StatusValue1"]; ok {
		if StatusValue1, ok := v.(string); ok {
			args.Query.Set("StatusValue1", StatusValue1)
		} else {
			return nil, errors.New("StatusValue1 must be string")
		}
	}
	if v, ok := optional["StatusValue10"]; ok {
		if StatusValue10, ok := v.(string); ok {
			args.Query.Set("StatusValue10", StatusValue10)
		} else {
			return nil, errors.New("StatusValue10 must be string")
		}
	}
	if v, ok := optional["StatusValue2"]; ok {
		if StatusValue2, ok := v.(string); ok {
			args.Query.Set("StatusValue2", StatusValue2)
		} else {
			return nil, errors.New("StatusValue2 must be string")
		}
	}
	if v, ok := optional["StatusValue3"]; ok {
		if StatusValue3, ok := v.(string); ok {
			args.Query.Set("StatusValue3", StatusValue3)
		} else {
			return nil, errors.New("StatusValue3 must be string")
		}
	}
	if v, ok := optional["StatusValue4"]; ok {
		if StatusValue4, ok := v.(string); ok {
			args.Query.Set("StatusValue4", StatusValue4)
		} else {
			return nil, errors.New("StatusValue4 must be string")
		}
	}
	if v, ok := optional["StatusValue5"]; ok {
		if StatusValue5, ok := v.(string); ok {
			args.Query.Set("StatusValue5", StatusValue5)
		} else {
			return nil, errors.New("StatusValue5 must be string")
		}
	}
	if v, ok := optional["StatusValue6"]; ok {
		if StatusValue6, ok := v.(string); ok {
			args.Query.Set("StatusValue6", StatusValue6)
		} else {
			return nil, errors.New("StatusValue6 must be string")
		}
	}
	if v, ok := optional["StatusValue7"]; ok {
		if StatusValue7, ok := v.(string); ok {
			args.Query.Set("StatusValue7", StatusValue7)
		} else {
			return nil, errors.New("StatusValue7 must be string")
		}
	}
	if v, ok := optional["StatusValue8"]; ok {
		if StatusValue8, ok := v.(string); ok {
			args.Query.Set("StatusValue8", StatusValue8)
		} else {
			return nil, errors.New("StatusValue8 must be string")
		}
	}
	if v, ok := optional["StatusValue9"]; ok {
		if StatusValue9, ok := v.(string); ok {
			args.Query.Set("StatusValue9", StatusValue9)
		} else {
			return nil, errors.New("StatusValue9 must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(SetUserBusinessStatusesResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// SetUserBusinessStatusesResponse represents the response of the api SetUserBusinessStatuses.
type SetUserBusinessStatusesResponse struct {
	Success bool
}
