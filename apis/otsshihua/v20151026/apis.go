// Copyright 2015 Chen Xianren. All rights reserved.
// Code generated by openapi-meta; DO NOT EDIT

package otsshihua // import "github.com/cxr29/aliyun-openapi-go-sdk/apis/otsshihua/v20151026"

import (
	"errors"
	"fmt"

	"github.com/cxr29/aliyun-openapi-go-sdk"
)

var (
	_ = errors.New("")
	_ = fmt.Sprint("")
)

type API struct {
	openapi.Service
}

func New(accessKeyId, accessKeySecret string) API {
	return API{openapi.NewService(accessKeyId, accessKeySecret)}
}

func NewParams() openapi.Params {
	args := openapi.NewParams()
	args.Product = Product
	args.Style = Style
	args.Version = Version
	return args
}

const (
	Product = "OtsShihua"
	Style   = "RPC"
	Version = "2015-10-26"
)

// DeleteInstance version 2015-10-26
//
// required parameters:
//  name: InstanceName, type: string
//
// optional parameters:
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) DeleteInstance(InstanceName string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "DeleteInstance")
	args.Method = "POST"
	args.Query.Set("InstanceName", InstanceName)
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// GetInstance version 2015-10-26
//
// required parameters:
//  name: InstanceName, type: string
//
// optional parameters:
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) GetInstance(InstanceName string, optional openapi.M) (*GetInstanceResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "GetInstance")
	args.Method = "GET"
	args.Query.Set("InstanceName", InstanceName)
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(GetInstanceResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// GetInstanceResponse represents the response of the api GetInstance.
type GetInstanceResponse struct {
	InstanceInfo struct {
		Description  string
		InstanceName string
		Status       int
		Timestamp    string
	}
}

// InsertInstance version 2015-10-26
//
// required parameters:
//  name: InstanceName, type: string
//
// optional parameters:
//  name: ClusterType, type: string
//  name: Description, type: string
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) InsertInstance(InstanceName string, optional openapi.M) (*openapi.Response, error) {
	args := NewParams()

	args.Query.Set("Action", "InsertInstance")
	args.Method = "POST"
	args.Query.Set("InstanceName", InstanceName)
	if v, ok := optional["ClusterType"]; ok {
		if ClusterType, ok := v.(string); ok {
			args.Query.Set("ClusterType", ClusterType)
		} else {
			return nil, errors.New("ClusterType must be string")
		}
	}
	if v, ok := optional["Description"]; ok {
		if Description, ok := v.(string); ok {
			args.Query.Set("Description", Description)
		} else {
			return nil, errors.New("Description must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(openapi.Response)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// ListInstance version 2015-10-26
//
// optional parameters:
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) ListInstance(optional openapi.M) (*ListInstanceResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "ListInstance")
	args.Method = "GET"
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(ListInstanceResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// ListInstanceResponse represents the response of the api ListInstance.
type ListInstanceResponse struct {
	InstanceInfos struct {
		InstanceInfo []struct {
			InstanceName string
			Timestamp    string
		}
	}
}
