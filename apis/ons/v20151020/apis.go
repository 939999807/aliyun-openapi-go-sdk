// Copyright 2015 Chen Xianren. All rights reserved.
// Code generated by openapi-meta; DO NOT EDIT

package ons

import (
	"errors"
	"fmt"

	"git.oschina.net/cxr29/aliyun-openapi-go-sdk"
)

var (
	_ = errors.New("")
	_ = fmt.Sprint("")
	_ = make(openapi.M)
)

type API struct {
	openapi.Service
}

func New(accessKeyId, accessKeySecret string) API {
	return API{openapi.NewService(accessKeyId, accessKeySecret)}
}

func NewParams() openapi.Params {
	args := openapi.NewParams()
	args.Product = Product
	args.Style = Style
	args.Version = Version
	return args
}

const (
	Product = "Ons"
	Style   = "RPC"
	Version = "2015-10-20"
)

// OnsCloudGetAppkeyList version 2015-10-20
//
// required parameters:
//  name: IsvId, type: int64
//  name: OnsRegionId, type: string
//  name: PreventCache, type: int64
//
// optional parameters:
//  name: OnsPlatform, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) OnsCloudGetAppkeyList(IsvId int64, OnsRegionId string, PreventCache int64, optional openapi.M) (*OnsCloudGetAppkeyListResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "OnsCloudGetAppkeyList")
	args.Query.Set("IsvId", fmt.Sprint(IsvId))
	args.Query.Set("OnsRegionId", OnsRegionId)
	args.Query.Set("PreventCache", fmt.Sprint(PreventCache))
	if v, ok := optional["OnsPlatform"]; ok {
		if OnsPlatform, ok := v.(string); ok {
			args.Query.Set("OnsPlatform", OnsPlatform)
		} else {
			return nil, errors.New("OnsPlatform must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(OnsCloudGetAppkeyListResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// OnsCloudGetAppkeyListResponse represents the response of the api OnsCloudGetAppkeyList.
type OnsCloudGetAppkeyListResponse struct {
	Data struct {
		AppStatus    int64
		Appkey       string
		Description  string
		IsvId        int64
		SupportEmail string
		Title        string
		Wangwang     string
	}
	HelpUrl string
}

// OnsClusterList version 2015-10-20
//
// required parameters:
//  name: OnsRegionId, type: string
//  name: PreventCache, type: int64
//
// optional parameters:
//  name: Cluster, type: string
//  name: OnsPlatform, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) OnsClusterList(OnsRegionId string, PreventCache int64, optional openapi.M) (*OnsClusterListResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "OnsClusterList")
	args.Query.Set("OnsRegionId", OnsRegionId)
	args.Query.Set("PreventCache", fmt.Sprint(PreventCache))
	if v, ok := optional["Cluster"]; ok {
		if Cluster, ok := v.(string); ok {
			args.Query.Set("Cluster", Cluster)
		} else {
			return nil, errors.New("Cluster must be string")
		}
	}
	if v, ok := optional["OnsPlatform"]; ok {
		if OnsPlatform, ok := v.(string); ok {
			args.Query.Set("OnsPlatform", OnsPlatform)
		} else {
			return nil, errors.New("OnsPlatform must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(OnsClusterListResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// OnsClusterListResponse represents the response of the api OnsClusterList.
type OnsClusterListResponse struct {
	Data struct {
		ClusterInfoDataDo []struct {
			BrokerInfoList struct {
				BrokerInfoDataDo []struct {
					BrokerAddr    string
					BrokerId      int
					BrokerIp      string
					BrokerName    string
					ClusterName   string
					InTPS         float32
					InTotalToday  float32
					InTotalYest   float32
					OutTPS        float32
					OutTotalToday float32
					OutTotalYest  float32
					Version       string
				}
			}
			ClusterName string
		}
	}
	HelpUrl string
}

// OnsClusterNames version 2015-10-20
//
// required parameters:
//  name: OnsRegionId, type: string
//  name: PreventCache, type: int64
//
// optional parameters:
//  name: OnsPlatform, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) OnsClusterNames(OnsRegionId string, PreventCache int64, optional openapi.M) (*OnsClusterNamesResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "OnsClusterNames")
	args.Query.Set("OnsRegionId", OnsRegionId)
	args.Query.Set("PreventCache", fmt.Sprint(PreventCache))
	if v, ok := optional["OnsPlatform"]; ok {
		if OnsPlatform, ok := v.(string); ok {
			args.Query.Set("OnsPlatform", OnsPlatform)
		} else {
			return nil, errors.New("OnsPlatform must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(OnsClusterNamesResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// OnsClusterNamesResponse represents the response of the api OnsClusterNames.
type OnsClusterNamesResponse struct {
	HelpUrl string
}

// OnsConsumerAccumulate version 2015-10-20
//
// required parameters:
//  name: ConsumerId, type: string
//  name: OnsRegionId, type: string
//  name: PreventCache, type: int64
//
// optional parameters:
//  name: Detail, type: bool
//  name: OnsPlatform, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) OnsConsumerAccumulate(ConsumerId, OnsRegionId string, PreventCache int64, optional openapi.M) (*OnsConsumerAccumulateResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "OnsConsumerAccumulate")
	args.Query.Set("ConsumerId", ConsumerId)
	args.Query.Set("OnsRegionId", OnsRegionId)
	args.Query.Set("PreventCache", fmt.Sprint(PreventCache))
	if v, ok := optional["Detail"]; ok {
		if Detail, ok := v.(bool); ok {
			args.Query.Set("Detail", fmt.Sprint(Detail))
		} else {
			return nil, errors.New("Detail must be bool")
		}
	}
	if v, ok := optional["OnsPlatform"]; ok {
		if OnsPlatform, ok := v.(string); ok {
			args.Query.Set("OnsPlatform", OnsPlatform)
		} else {
			return nil, errors.New("OnsPlatform must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(OnsConsumerAccumulateResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// OnsConsumerAccumulateResponse represents the response of the api OnsConsumerAccumulate.
type OnsConsumerAccumulateResponse struct {
	Data struct {
		ConsumeTps        float32
		DelayTime         int64
		DetailInTopicList struct {
			DetailInTopicDo []struct {
				ConsumeTps    float32
				DelayTime     int64
				LastTimestamp int64
				OffsetList    struct {
					ConsumeQueueOffset []struct {
						BrokerName     string
						BrokerOffset   int64
						ConsumerOffset int64
						LastTimestamp  int64
						QueueId        int
						Topic          string
					}
				}
				Topic string
			}
		}
		LastTimestamp int64
		Online        bool
		TotalDiff     int64
	}
	HelpUrl string
}

// OnsConsumerGetConnection version 2015-10-20
//
// required parameters:
//  name: ConsumerId, type: string
//  name: OnsRegionId, type: string
//  name: PreventCache, type: int64
//
// optional parameters:
//  name: OnsPlatform, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) OnsConsumerGetConnection(ConsumerId, OnsRegionId string, PreventCache int64, optional openapi.M) (*OnsConsumerGetConnectionResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "OnsConsumerGetConnection")
	args.Query.Set("ConsumerId", ConsumerId)
	args.Query.Set("OnsRegionId", OnsRegionId)
	args.Query.Set("PreventCache", fmt.Sprint(PreventCache))
	if v, ok := optional["OnsPlatform"]; ok {
		if OnsPlatform, ok := v.(string); ok {
			args.Query.Set("OnsPlatform", OnsPlatform)
		} else {
			return nil, errors.New("OnsPlatform must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(OnsConsumerGetConnectionResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// OnsConsumerGetConnectionResponse represents the response of the api OnsConsumerGetConnection.
type OnsConsumerGetConnectionResponse struct {
	Data struct {
		ConnectionList struct {
			ConnectionDo []struct {
				ClientAddr string
				ClientId   string
				Language   string
				Version    string
			}
		}
	}
	HelpUrl string
}

// OnsConsumerResetOffset version 2015-10-20
//
// required parameters:
//  name: ConsumerId, type: string
//  name: OnsRegionId, type: string
//  name: PreventCache, type: int64
//  name: ResetTimestamp, type: int64
//  name: Topic, type: string
//
// optional parameters:
//  name: OnsPlatform, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) OnsConsumerResetOffset(ConsumerId, OnsRegionId string, PreventCache, ResetTimestamp int64, Topic string, optional openapi.M) (*OnsConsumerResetOffsetResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "OnsConsumerResetOffset")
	args.Query.Set("ConsumerId", ConsumerId)
	args.Query.Set("OnsRegionId", OnsRegionId)
	args.Query.Set("PreventCache", fmt.Sprint(PreventCache))
	args.Query.Set("ResetTimestamp", fmt.Sprint(ResetTimestamp))
	args.Query.Set("Topic", Topic)
	if v, ok := optional["OnsPlatform"]; ok {
		if OnsPlatform, ok := v.(string); ok {
			args.Query.Set("OnsPlatform", OnsPlatform)
		} else {
			return nil, errors.New("OnsPlatform must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(OnsConsumerResetOffsetResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// OnsConsumerResetOffsetResponse represents the response of the api OnsConsumerResetOffset.
type OnsConsumerResetOffsetResponse struct {
	HelpUrl string
}

// OnsConsumerStatus version 2015-10-20
//
// required parameters:
//  name: ConsumerId, type: string
//  name: OnsRegionId, type: string
//  name: PreventCache, type: int64
//
// optional parameters:
//  name: Detail, type: bool
//  name: NeedJstack, type: bool
//  name: OnsPlatform, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) OnsConsumerStatus(ConsumerId, OnsRegionId string, PreventCache int64, optional openapi.M) (*OnsConsumerStatusResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "OnsConsumerStatus")
	args.Query.Set("ConsumerId", ConsumerId)
	args.Query.Set("OnsRegionId", OnsRegionId)
	args.Query.Set("PreventCache", fmt.Sprint(PreventCache))
	if v, ok := optional["Detail"]; ok {
		if Detail, ok := v.(bool); ok {
			args.Query.Set("Detail", fmt.Sprint(Detail))
		} else {
			return nil, errors.New("Detail must be bool")
		}
	}
	if v, ok := optional["NeedJstack"]; ok {
		if NeedJstack, ok := v.(bool); ok {
			args.Query.Set("NeedJstack", fmt.Sprint(NeedJstack))
		} else {
			return nil, errors.New("NeedJstack must be bool")
		}
	}
	if v, ok := optional["OnsPlatform"]; ok {
		if OnsPlatform, ok := v.(string); ok {
			args.Query.Set("OnsPlatform", OnsPlatform)
		} else {
			return nil, errors.New("OnsPlatform must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(OnsConsumerStatusResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// OnsConsumerStatusResponse represents the response of the api OnsConsumerStatus.
type OnsConsumerStatusResponse struct {
	Data struct {
		ConnectionSet struct {
			ConnectionDo []struct {
				ClientAddr string
				ClientId   string
				Language   string
				Version    string
			}
		}
		ConsumeModel               string
		ConsumeTps                 float32
		ConsumerConnectionInfoList struct {
			ConsumerConnectionInfoDo []struct {
				Connection   string
				ConsumeModel string
				ConsumeType  string
				InstanceId   string
				Jstack       struct {
					ThreadTrackDo []struct {
						Thread string
					}
				}
				Language               string
				LastTimeStamp          int64
				ProcessQueueInfoDoList struct {
					ProcessQueueInfoDo []struct {
						BrokerName string
						QueueId    int
						Topic      string `json:"topic" xml:"topic"`
						WarnMap    struct {
							BLOCK  string
							LOCK   string
							UNLOCK string
						}
					}
				}
				RunningDataList struct {
					ConsumerRunningDataDo []struct {
						ConsumerId         string
						FailedCountPerHour int64
						FailedTps          int64
						OkTps              float32
						Rt                 float32
						Topic              string
					}
				}
				StartTimeStamp  int64
				SubscriptionSet struct {
					SubscriptionData []struct {
						ClassFilterMode bool
						SubString       string
						SubVersion      int64
						Topic           string
					}
				}
				ThreadCount int
				Version     string
			}
		}
		DelayTime         int64
		DetailInTopicList struct {
			DetailInTopicDo []struct {
				ConsumeTps    float32
				DelayTime     int64
				LastTimestamp int64
				OffsetList    struct {
					ConsumeQueueOffset []struct {
						BrokerName     string
						BrokerOffset   int64
						ConsumerOffset int64
						LastTimestamp  int64
						QueueId        int
						Topic          string
					}
				}
				Topic string
			}
		}
		LastTimestamp    int64
		Online           bool
		RebalanceOK      bool
		SubscriptionSame bool
		TotalDiff        int64
	}
	HelpUrl string
}

// OnsConsumerTimeSpan version 2015-10-20
//
// required parameters:
//  name: ConsumerId, type: string
//  name: OnsRegionId, type: string
//  name: PreventCache, type: int64
//  name: Topic, type: string
//
// optional parameters:
//  name: OnsPlatform, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) OnsConsumerTimeSpan(ConsumerId, OnsRegionId string, PreventCache int64, Topic string, optional openapi.M) (*OnsConsumerTimeSpanResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "OnsConsumerTimeSpan")
	args.Query.Set("ConsumerId", ConsumerId)
	args.Query.Set("OnsRegionId", OnsRegionId)
	args.Query.Set("PreventCache", fmt.Sprint(PreventCache))
	args.Query.Set("Topic", Topic)
	if v, ok := optional["OnsPlatform"]; ok {
		if OnsPlatform, ok := v.(string); ok {
			args.Query.Set("OnsPlatform", OnsPlatform)
		} else {
			return nil, errors.New("OnsPlatform must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(OnsConsumerTimeSpanResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// OnsConsumerTimeSpanResponse represents the response of the api OnsConsumerTimeSpan.
type OnsConsumerTimeSpanResponse struct {
	Data struct {
		ConsumeTimeStamp int64
		MaxTimeStamp     int64
		MinTimeStamp     int64
		QueueTimeSpans   struct {
			QueueTimeSpan []struct {
				ConsumeTimeStamp int64
				MaxTimeStamp     int64
				MessageQueue     struct {
					BrokerName string
					QueueId    int
					Topic      string
				}
				MinTimeStamp int64
			}
		}
		Topic string
	}
	HelpUrl string
}

// OnsEmpowerCreate version 2015-10-20
//
// required parameters:
//  name: EmpowerUser, type: string
//  name: OnsRegionId, type: string
//  name: PreventCache, type: int64
//  name: Relation, type: int
//  name: Topic, type: string
//
// optional parameters:
//  name: OnsPlatform, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) OnsEmpowerCreate(EmpowerUser, OnsRegionId string, PreventCache int64, Relation int, Topic string, optional openapi.M) (*OnsEmpowerCreateResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "OnsEmpowerCreate")
	args.Query.Set("EmpowerUser", EmpowerUser)
	args.Query.Set("OnsRegionId", OnsRegionId)
	args.Query.Set("PreventCache", fmt.Sprint(PreventCache))
	args.Query.Set("Relation", fmt.Sprint(Relation))
	args.Query.Set("Topic", Topic)
	if v, ok := optional["OnsPlatform"]; ok {
		if OnsPlatform, ok := v.(string); ok {
			args.Query.Set("OnsPlatform", OnsPlatform)
		} else {
			return nil, errors.New("OnsPlatform must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(OnsEmpowerCreateResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// OnsEmpowerCreateResponse represents the response of the api OnsEmpowerCreate.
type OnsEmpowerCreateResponse struct {
	HelpUrl string
}

// OnsEmpowerDelete version 2015-10-20
//
// required parameters:
//  name: EmpowerUser, type: string
//  name: OnsRegionId, type: string
//  name: PreventCache, type: int64
//  name: Topic, type: string
//
// optional parameters:
//  name: OnsPlatform, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) OnsEmpowerDelete(EmpowerUser, OnsRegionId string, PreventCache int64, Topic string, optional openapi.M) (*OnsEmpowerDeleteResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "OnsEmpowerDelete")
	args.Query.Set("EmpowerUser", EmpowerUser)
	args.Query.Set("OnsRegionId", OnsRegionId)
	args.Query.Set("PreventCache", fmt.Sprint(PreventCache))
	args.Query.Set("Topic", Topic)
	if v, ok := optional["OnsPlatform"]; ok {
		if OnsPlatform, ok := v.(string); ok {
			args.Query.Set("OnsPlatform", OnsPlatform)
		} else {
			return nil, errors.New("OnsPlatform must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(OnsEmpowerDeleteResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// OnsEmpowerDeleteResponse represents the response of the api OnsEmpowerDelete.
type OnsEmpowerDeleteResponse struct {
	HelpUrl string
}

// OnsEmpowerList version 2015-10-20
//
// required parameters:
//  name: EmpowerUser, type: string
//  name: OnsRegionId, type: string
//  name: PreventCache, type: int64
//  name: Topic, type: string
//
// optional parameters:
//  name: OnsPlatform, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) OnsEmpowerList(EmpowerUser, OnsRegionId string, PreventCache int64, Topic string, optional openapi.M) (*OnsEmpowerListResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "OnsEmpowerList")
	args.Query.Set("EmpowerUser", EmpowerUser)
	args.Query.Set("OnsRegionId", OnsRegionId)
	args.Query.Set("PreventCache", fmt.Sprint(PreventCache))
	args.Query.Set("Topic", Topic)
	if v, ok := optional["OnsPlatform"]; ok {
		if OnsPlatform, ok := v.(string); ok {
			args.Query.Set("OnsPlatform", OnsPlatform)
		} else {
			return nil, errors.New("OnsPlatform must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(OnsEmpowerListResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// OnsEmpowerListResponse represents the response of the api OnsEmpowerList.
type OnsEmpowerListResponse struct {
	Data struct {
		AuthOwnerInfoDo []struct {
			CreateTime   int64
			Id           int64
			Owner        int64
			Relation     int
			RelationName string
			Topic        string
			UpdateTime   int64
		}
	}
	HelpUrl string
}

// OnsMessageGetByKey version 2015-10-20
//
// required parameters:
//  name: Key, type: string
//  name: OnsRegionId, type: string
//  name: PreventCache, type: int64
//  name: Topic, type: string
//
// optional parameters:
//  name: OnsPlatform, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) OnsMessageGetByKey(Key, OnsRegionId string, PreventCache int64, Topic string, optional openapi.M) (*OnsMessageGetByKeyResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "OnsMessageGetByKey")
	args.Query.Set("Key", Key)
	args.Query.Set("OnsRegionId", OnsRegionId)
	args.Query.Set("PreventCache", fmt.Sprint(PreventCache))
	args.Query.Set("Topic", Topic)
	if v, ok := optional["OnsPlatform"]; ok {
		if OnsPlatform, ok := v.(string); ok {
			args.Query.Set("OnsPlatform", OnsPlatform)
		} else {
			return nil, errors.New("OnsPlatform must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(OnsMessageGetByKeyResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// OnsMessageGetByKeyResponse represents the response of the api OnsMessageGetByKey.
type OnsMessageGetByKeyResponse struct {
	Data struct {
		OnsRestMessageDo []struct {
			Body                      string
			BodyCRC                   int
			BornHost                  string
			BornTimestamp             int64
			CommitLogOffset           int64
			Flag                      int
			MsgId                     string
			PreparedTransactionOffset int64
			PropertyList              struct {
				MessageProperty []struct {
					Name  string
					Value string
				}
			}
			QueueId        int
			QueueOffset    int64
			ReconsumeTimes int
			StoreHost      string
			StoreSize      int
			StoreTimestamp int64
			SysFlag        int
			Topic          string
		}
	}
	HelpUrl string
}

// OnsMessageGetByMsgId version 2015-10-20
//
// required parameters:
//  name: MsgId, type: string
//  name: OnsRegionId, type: string
//  name: PreventCache, type: int64
//
// optional parameters:
//  name: OnsPlatform, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) OnsMessageGetByMsgId(MsgId, OnsRegionId string, PreventCache int64, optional openapi.M) (*OnsMessageGetByMsgIdResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "OnsMessageGetByMsgId")
	args.Query.Set("MsgId", MsgId)
	args.Query.Set("OnsRegionId", OnsRegionId)
	args.Query.Set("PreventCache", fmt.Sprint(PreventCache))
	if v, ok := optional["OnsPlatform"]; ok {
		if OnsPlatform, ok := v.(string); ok {
			args.Query.Set("OnsPlatform", OnsPlatform)
		} else {
			return nil, errors.New("OnsPlatform must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(OnsMessageGetByMsgIdResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// OnsMessageGetByMsgIdResponse represents the response of the api OnsMessageGetByMsgId.
type OnsMessageGetByMsgIdResponse struct {
	Data struct {
		Body                      string
		BodyCRC                   int
		BornHost                  string
		BornTimestamp             int64
		CommitLogOffset           int64
		Flag                      int
		MsgId                     string
		PreparedTransactionOffset int64
		PropertyList              struct {
			MessageProperty []struct {
				Name  string
				Value string
			}
		}
		QueueId        int
		QueueOffset    int64
		ReconsumeTimes int
		StoreHost      string
		StoreSize      int
		StoreTimestamp int64
		SysFlag        int
		Topic          string
	}
	HelpUrl string
}

// OnsMessageGetByTopic version 2015-10-20
//
// required parameters:
//  name: OnsRegionId, type: string
//  name: PreventCache, type: int64
//  name: Topic, type: string
//
// optional parameters:
//  name: OnsPlatform, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) OnsMessageGetByTopic(OnsRegionId string, PreventCache int64, Topic string, optional openapi.M) (*OnsMessageGetByTopicResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "OnsMessageGetByTopic")
	args.Query.Set("OnsRegionId", OnsRegionId)
	args.Query.Set("PreventCache", fmt.Sprint(PreventCache))
	args.Query.Set("Topic", Topic)
	if v, ok := optional["OnsPlatform"]; ok {
		if OnsPlatform, ok := v.(string); ok {
			args.Query.Set("OnsPlatform", OnsPlatform)
		} else {
			return nil, errors.New("OnsPlatform must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(OnsMessageGetByTopicResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// OnsMessageGetByTopicResponse represents the response of the api OnsMessageGetByTopic.
type OnsMessageGetByTopicResponse struct {
	Data struct {
		OnsRestMessageDo []struct {
			Body                      string
			BodyCRC                   int
			BornHost                  string
			BornTimestamp             int64
			CommitLogOffset           int64
			Flag                      int
			MsgId                     string
			PreparedTransactionOffset int64
			PropertyList              struct {
				MessageProperty []struct {
					Name  string
					Value string
				}
			}
			QueueId        int
			QueueOffset    int64
			ReconsumeTimes int
			StoreHost      string
			StoreSize      int
			StoreTimestamp int64
			SysFlag        int
			Topic          string
		}
	}
	HelpUrl string
}

// OnsMessagePush version 2015-10-20
//
// required parameters:
//  name: ClientId, type: string
//  name: ConsumerId, type: string
//  name: MsgId, type: string
//  name: OnsRegionId, type: string
//  name: PreventCache, type: int64
//  name: Topic, type: string
//
// optional parameters:
//  name: OnsPlatform, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) OnsMessagePush(ClientId, ConsumerId, MsgId, OnsRegionId string, PreventCache int64, Topic string, optional openapi.M) (*OnsMessagePushResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "OnsMessagePush")
	args.Query.Set("ClientId", ClientId)
	args.Query.Set("ConsumerId", ConsumerId)
	args.Query.Set("MsgId", MsgId)
	args.Query.Set("OnsRegionId", OnsRegionId)
	args.Query.Set("PreventCache", fmt.Sprint(PreventCache))
	args.Query.Set("Topic", Topic)
	if v, ok := optional["OnsPlatform"]; ok {
		if OnsPlatform, ok := v.(string); ok {
			args.Query.Set("OnsPlatform", OnsPlatform)
		} else {
			return nil, errors.New("OnsPlatform must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(OnsMessagePushResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// OnsMessagePushResponse represents the response of the api OnsMessagePush.
type OnsMessagePushResponse struct {
	HelpUrl string
}

// OnsMessageSend version 2015-10-20
//
// required parameters:
//  name: Message, type: string
//  name: OnsRegionId, type: string
//  name: PreventCache, type: int64
//  name: ProducerId, type: string
//  name: Topic, type: string
//
// optional parameters:
//  name: Key, type: string
//  name: OnsPlatform, type: string
//  name: Tag, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) OnsMessageSend(Message, OnsRegionId string, PreventCache int64, ProducerId, Topic string, optional openapi.M) (*OnsMessageSendResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "OnsMessageSend")
	args.Query.Set("Message", Message)
	args.Query.Set("OnsRegionId", OnsRegionId)
	args.Query.Set("PreventCache", fmt.Sprint(PreventCache))
	args.Query.Set("ProducerId", ProducerId)
	args.Query.Set("Topic", Topic)
	if v, ok := optional["Key"]; ok {
		if Key, ok := v.(string); ok {
			args.Query.Set("Key", Key)
		} else {
			return nil, errors.New("Key must be string")
		}
	}
	if v, ok := optional["OnsPlatform"]; ok {
		if OnsPlatform, ok := v.(string); ok {
			args.Query.Set("OnsPlatform", OnsPlatform)
		} else {
			return nil, errors.New("OnsPlatform must be string")
		}
	}
	if v, ok := optional["Tag"]; ok {
		if Tag, ok := v.(string); ok {
			args.Query.Set("Tag", Tag)
		} else {
			return nil, errors.New("Tag must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(OnsMessageSendResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// OnsMessageSendResponse represents the response of the api OnsMessageSend.
type OnsMessageSendResponse struct {
	Data    string
	HelpUrl string
}

// OnsMessageTrace version 2015-10-20
//
// required parameters:
//  name: MsgId, type: string
//  name: OnsRegionId, type: string
//  name: PreventCache, type: int64
//  name: Topic, type: string
//
// optional parameters:
//  name: OnsPlatform, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) OnsMessageTrace(MsgId, OnsRegionId string, PreventCache int64, Topic string, optional openapi.M) (*OnsMessageTraceResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "OnsMessageTrace")
	args.Query.Set("MsgId", MsgId)
	args.Query.Set("OnsRegionId", OnsRegionId)
	args.Query.Set("PreventCache", fmt.Sprint(PreventCache))
	args.Query.Set("Topic", Topic)
	if v, ok := optional["OnsPlatform"]; ok {
		if OnsPlatform, ok := v.(string); ok {
			args.Query.Set("OnsPlatform", OnsPlatform)
		} else {
			return nil, errors.New("OnsPlatform must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(OnsMessageTraceResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// OnsMessageTraceResponse represents the response of the api OnsMessageTrace.
type OnsMessageTraceResponse struct {
	Data struct {
		MessageTrack []struct {
			ConsumerGroup string
			ExceptionDesc string
			TrackType     string
		}
	}
	HelpUrl string
}

// OnsPublishCreate version 2015-10-20
//
// required parameters:
//  name: OnsRegionId, type: string
//  name: PreventCache, type: int64
//  name: ProducerId, type: string
//  name: Topic, type: string
//
// optional parameters:
//  name: AppName, type: string
//  name: OnsPlatform, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) OnsPublishCreate(OnsRegionId string, PreventCache int64, ProducerId, Topic string, optional openapi.M) (*OnsPublishCreateResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "OnsPublishCreate")
	args.Query.Set("OnsRegionId", OnsRegionId)
	args.Query.Set("PreventCache", fmt.Sprint(PreventCache))
	args.Query.Set("ProducerId", ProducerId)
	args.Query.Set("Topic", Topic)
	if v, ok := optional["AppName"]; ok {
		if AppName, ok := v.(string); ok {
			args.Query.Set("AppName", AppName)
		} else {
			return nil, errors.New("AppName must be string")
		}
	}
	if v, ok := optional["OnsPlatform"]; ok {
		if OnsPlatform, ok := v.(string); ok {
			args.Query.Set("OnsPlatform", OnsPlatform)
		} else {
			return nil, errors.New("OnsPlatform must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(OnsPublishCreateResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// OnsPublishCreateResponse represents the response of the api OnsPublishCreate.
type OnsPublishCreateResponse struct {
	HelpUrl string
}

// OnsPublishDelete version 2015-10-20
//
// required parameters:
//  name: OnsRegionId, type: string
//  name: PreventCache, type: int64
//  name: Topic, type: string
//
// optional parameters:
//  name: OnsPlatform, type: string
//  name: ProducerId, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) OnsPublishDelete(OnsRegionId string, PreventCache int64, Topic string, optional openapi.M) (*OnsPublishDeleteResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "OnsPublishDelete")
	args.Query.Set("OnsRegionId", OnsRegionId)
	args.Query.Set("PreventCache", fmt.Sprint(PreventCache))
	args.Query.Set("Topic", Topic)
	if v, ok := optional["OnsPlatform"]; ok {
		if OnsPlatform, ok := v.(string); ok {
			args.Query.Set("OnsPlatform", OnsPlatform)
		} else {
			return nil, errors.New("OnsPlatform must be string")
		}
	}
	if v, ok := optional["ProducerId"]; ok {
		if ProducerId, ok := v.(string); ok {
			args.Query.Set("ProducerId", ProducerId)
		} else {
			return nil, errors.New("ProducerId must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(OnsPublishDeleteResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// OnsPublishDeleteResponse represents the response of the api OnsPublishDelete.
type OnsPublishDeleteResponse struct {
	HelpUrl string
}

// OnsPublishGet version 2015-10-20
//
// required parameters:
//  name: OnsRegionId, type: string
//  name: PreventCache, type: int64
//  name: ProducerId, type: string
//  name: Topic, type: string
//
// optional parameters:
//  name: OnsPlatform, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) OnsPublishGet(OnsRegionId string, PreventCache int64, ProducerId, Topic string, optional openapi.M) (*OnsPublishGetResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "OnsPublishGet")
	args.Query.Set("OnsRegionId", OnsRegionId)
	args.Query.Set("PreventCache", fmt.Sprint(PreventCache))
	args.Query.Set("ProducerId", ProducerId)
	args.Query.Set("Topic", Topic)
	if v, ok := optional["OnsPlatform"]; ok {
		if OnsPlatform, ok := v.(string); ok {
			args.Query.Set("OnsPlatform", OnsPlatform)
		} else {
			return nil, errors.New("OnsPlatform must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(OnsPublishGetResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// OnsPublishGetResponse represents the response of the api OnsPublishGet.
type OnsPublishGetResponse struct {
	Data struct {
		PublishInfoDo []struct {
			ChannelId   int
			ChannelName string
			CreateTime  int64
			Id          int64
			Owner       string
			ProducerId  string
			RegionId    string
			RegionName  string
			Status      int
			StatusName  string
			Topic       string
			UpdateTime  int64
		}
	}
	HelpUrl string
}

// OnsPublishList version 2015-10-20
//
// required parameters:
//  name: OnsRegionId, type: string
//  name: PreventCache, type: int64
//
// optional parameters:
//  name: OnsPlatform, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) OnsPublishList(OnsRegionId string, PreventCache int64, optional openapi.M) (*OnsPublishListResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "OnsPublishList")
	args.Query.Set("OnsRegionId", OnsRegionId)
	args.Query.Set("PreventCache", fmt.Sprint(PreventCache))
	if v, ok := optional["OnsPlatform"]; ok {
		if OnsPlatform, ok := v.(string); ok {
			args.Query.Set("OnsPlatform", OnsPlatform)
		} else {
			return nil, errors.New("OnsPlatform must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(OnsPublishListResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// OnsPublishListResponse represents the response of the api OnsPublishList.
type OnsPublishListResponse struct {
	Data struct {
		PublishInfoDo []struct {
			ChannelId   int
			ChannelName string
			CreateTime  int64
			Id          int64
			Owner       string
			ProducerId  string
			RegionId    string
			RegionName  string
			Status      int
			StatusName  string
			Topic       string
			UpdateTime  int64
		}
	}
	HelpUrl string
}

// OnsPublishSearch version 2015-10-20
//
// required parameters:
//  name: OnsRegionId, type: string
//  name: PreventCache, type: int64
//  name: Search, type: string
//
// optional parameters:
//  name: OnsPlatform, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) OnsPublishSearch(OnsRegionId string, PreventCache int64, Search string, optional openapi.M) (*OnsPublishSearchResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "OnsPublishSearch")
	args.Query.Set("OnsRegionId", OnsRegionId)
	args.Query.Set("PreventCache", fmt.Sprint(PreventCache))
	args.Query.Set("Search", Search)
	if v, ok := optional["OnsPlatform"]; ok {
		if OnsPlatform, ok := v.(string); ok {
			args.Query.Set("OnsPlatform", OnsPlatform)
		} else {
			return nil, errors.New("OnsPlatform must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(OnsPublishSearchResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// OnsPublishSearchResponse represents the response of the api OnsPublishSearch.
type OnsPublishSearchResponse struct {
	Data struct {
		PublishInfoDo []struct {
			ChannelId   int
			ChannelName string
			CreateTime  int64
			Id          int64
			Owner       string
			ProducerId  string
			RegionId    string
			RegionName  string
			Status      int
			StatusName  string
			Topic       string
			UpdateTime  int64
		}
	}
	HelpUrl string
}

// OnsRegionList version 2015-10-20
//
// required parameters:
//  name: PreventCache, type: int64
//
// optional parameters:
//  name: OnsPlatform, type: string
//  name: OnsRegionId, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) OnsRegionList(PreventCache int64, optional openapi.M) (*OnsRegionListResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "OnsRegionList")
	args.Query.Set("PreventCache", fmt.Sprint(PreventCache))
	if v, ok := optional["OnsPlatform"]; ok {
		if OnsPlatform, ok := v.(string); ok {
			args.Query.Set("OnsPlatform", OnsPlatform)
		} else {
			return nil, errors.New("OnsPlatform must be string")
		}
	}
	if v, ok := optional["OnsRegionId"]; ok {
		if OnsRegionId, ok := v.(string); ok {
			args.Query.Set("OnsRegionId", OnsRegionId)
		} else {
			return nil, errors.New("OnsRegionId must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(OnsRegionListResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// OnsRegionListResponse represents the response of the api OnsRegionList.
type OnsRegionListResponse struct {
	Data struct {
		RegionDo []struct {
			ChannelId   int
			ChannelName string
			Cluster     string
			CreateTime  int64
			Id          int64
			IsShare     int
			Owner       string
			RegionId    string
			RegionName  string
			Status      int
			UpdateTime  int64
		}
	}
	HelpUrl string
}

// OnsSubscriptionCreate version 2015-10-20
//
// required parameters:
//  name: ConsumerId, type: string
//  name: OnsRegionId, type: string
//  name: PreventCache, type: int64
//  name: Topic, type: string
//
// optional parameters:
//  name: OnsPlatform, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) OnsSubscriptionCreate(ConsumerId, OnsRegionId string, PreventCache int64, Topic string, optional openapi.M) (*OnsSubscriptionCreateResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "OnsSubscriptionCreate")
	args.Query.Set("ConsumerId", ConsumerId)
	args.Query.Set("OnsRegionId", OnsRegionId)
	args.Query.Set("PreventCache", fmt.Sprint(PreventCache))
	args.Query.Set("Topic", Topic)
	if v, ok := optional["OnsPlatform"]; ok {
		if OnsPlatform, ok := v.(string); ok {
			args.Query.Set("OnsPlatform", OnsPlatform)
		} else {
			return nil, errors.New("OnsPlatform must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(OnsSubscriptionCreateResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// OnsSubscriptionCreateResponse represents the response of the api OnsSubscriptionCreate.
type OnsSubscriptionCreateResponse struct {
	HelpUrl string
}

// OnsSubscriptionDelete version 2015-10-20
//
// required parameters:
//  name: ConsumerId, type: string
//  name: OnsRegionId, type: string
//  name: PreventCache, type: int64
//
// optional parameters:
//  name: OnsPlatform, type: string
//  name: Topic, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) OnsSubscriptionDelete(ConsumerId, OnsRegionId string, PreventCache int64, optional openapi.M) (*OnsSubscriptionDeleteResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "OnsSubscriptionDelete")
	args.Query.Set("ConsumerId", ConsumerId)
	args.Query.Set("OnsRegionId", OnsRegionId)
	args.Query.Set("PreventCache", fmt.Sprint(PreventCache))
	if v, ok := optional["OnsPlatform"]; ok {
		if OnsPlatform, ok := v.(string); ok {
			args.Query.Set("OnsPlatform", OnsPlatform)
		} else {
			return nil, errors.New("OnsPlatform must be string")
		}
	}
	if v, ok := optional["Topic"]; ok {
		if Topic, ok := v.(string); ok {
			args.Query.Set("Topic", Topic)
		} else {
			return nil, errors.New("Topic must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(OnsSubscriptionDeleteResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// OnsSubscriptionDeleteResponse represents the response of the api OnsSubscriptionDelete.
type OnsSubscriptionDeleteResponse struct {
	HelpUrl string
}

// OnsSubscriptionGet version 2015-10-20
//
// required parameters:
//  name: ConsumerId, type: string
//  name: OnsRegionId, type: string
//  name: PreventCache, type: int64
//  name: Topic, type: string
//
// optional parameters:
//  name: OnsPlatform, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) OnsSubscriptionGet(ConsumerId, OnsRegionId string, PreventCache int64, Topic string, optional openapi.M) (*OnsSubscriptionGetResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "OnsSubscriptionGet")
	args.Query.Set("ConsumerId", ConsumerId)
	args.Query.Set("OnsRegionId", OnsRegionId)
	args.Query.Set("PreventCache", fmt.Sprint(PreventCache))
	args.Query.Set("Topic", Topic)
	if v, ok := optional["OnsPlatform"]; ok {
		if OnsPlatform, ok := v.(string); ok {
			args.Query.Set("OnsPlatform", OnsPlatform)
		} else {
			return nil, errors.New("OnsPlatform must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(OnsSubscriptionGetResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// OnsSubscriptionGetResponse represents the response of the api OnsSubscriptionGet.
type OnsSubscriptionGetResponse struct {
	Data struct {
		SubscribeInfoDo []struct {
			ChannelId   int
			ChannelName string
			ConsumerId  string
			CreateTime  int64
			Id          int64
			Owner       string
			RegionId    string
			RegionName  string
			Status      int
			StatusName  string
			Topic       string
			UpdateTime  int64
		}
	}
	HelpUrl string
}

// OnsSubscriptionList version 2015-10-20
//
// required parameters:
//  name: OnsRegionId, type: string
//  name: PreventCache, type: int64
//
// optional parameters:
//  name: OnsPlatform, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) OnsSubscriptionList(OnsRegionId string, PreventCache int64, optional openapi.M) (*OnsSubscriptionListResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "OnsSubscriptionList")
	args.Query.Set("OnsRegionId", OnsRegionId)
	args.Query.Set("PreventCache", fmt.Sprint(PreventCache))
	if v, ok := optional["OnsPlatform"]; ok {
		if OnsPlatform, ok := v.(string); ok {
			args.Query.Set("OnsPlatform", OnsPlatform)
		} else {
			return nil, errors.New("OnsPlatform must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(OnsSubscriptionListResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// OnsSubscriptionListResponse represents the response of the api OnsSubscriptionList.
type OnsSubscriptionListResponse struct {
	Data struct {
		SubscribeInfoDo []struct {
			ChannelId   int
			ChannelName string
			ConsumerId  string
			CreateTime  int64
			Id          int64
			Owner       string
			RegionId    string
			RegionName  string
			Status      int
			StatusName  string
			Topic       string
			UpdateTime  int64
		}
	}
	HelpUrl string
}

// OnsSubscriptionSearch version 2015-10-20
//
// required parameters:
//  name: OnsRegionId, type: string
//  name: PreventCache, type: int64
//  name: Search, type: string
//
// optional parameters:
//  name: OnsPlatform, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) OnsSubscriptionSearch(OnsRegionId string, PreventCache int64, Search string, optional openapi.M) (*OnsSubscriptionSearchResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "OnsSubscriptionSearch")
	args.Query.Set("OnsRegionId", OnsRegionId)
	args.Query.Set("PreventCache", fmt.Sprint(PreventCache))
	args.Query.Set("Search", Search)
	if v, ok := optional["OnsPlatform"]; ok {
		if OnsPlatform, ok := v.(string); ok {
			args.Query.Set("OnsPlatform", OnsPlatform)
		} else {
			return nil, errors.New("OnsPlatform must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(OnsSubscriptionSearchResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// OnsSubscriptionSearchResponse represents the response of the api OnsSubscriptionSearch.
type OnsSubscriptionSearchResponse struct {
	Data struct {
		SubscribeInfoDo []struct {
			ChannelId   int
			ChannelName string
			ConsumerId  string
			CreateTime  int64
			Id          int64
			Owner       string
			RegionId    string
			RegionName  string
			Status      int
			StatusName  string
			Topic       string
			UpdateTime  int64
		}
	}
	HelpUrl string
}

// OnsTopicCreate version 2015-10-20
//
// required parameters:
//  name: OnsRegionId, type: string
//  name: PreventCache, type: int64
//  name: Topic, type: string
//
// optional parameters:
//  name: AppName, type: string
//  name: Appkey, type: string
//  name: Cluster, type: string
//  name: OnsPlatform, type: string
//  name: Order, type: bool
//  name: Qps, type: int64
//  name: QueueNum, type: int
//  name: Remark, type: string
//  name: Status, type: int
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) OnsTopicCreate(OnsRegionId string, PreventCache int64, Topic string, optional openapi.M) (*OnsTopicCreateResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "OnsTopicCreate")
	args.Query.Set("OnsRegionId", OnsRegionId)
	args.Query.Set("PreventCache", fmt.Sprint(PreventCache))
	args.Query.Set("Topic", Topic)
	if v, ok := optional["AppName"]; ok {
		if AppName, ok := v.(string); ok {
			args.Query.Set("AppName", AppName)
		} else {
			return nil, errors.New("AppName must be string")
		}
	}
	if v, ok := optional["Appkey"]; ok {
		if Appkey, ok := v.(string); ok {
			args.Query.Set("Appkey", Appkey)
		} else {
			return nil, errors.New("Appkey must be string")
		}
	}
	if v, ok := optional["Cluster"]; ok {
		if Cluster, ok := v.(string); ok {
			args.Query.Set("Cluster", Cluster)
		} else {
			return nil, errors.New("Cluster must be string")
		}
	}
	if v, ok := optional["OnsPlatform"]; ok {
		if OnsPlatform, ok := v.(string); ok {
			args.Query.Set("OnsPlatform", OnsPlatform)
		} else {
			return nil, errors.New("OnsPlatform must be string")
		}
	}
	if v, ok := optional["Order"]; ok {
		if Order, ok := v.(bool); ok {
			args.Query.Set("Order", fmt.Sprint(Order))
		} else {
			return nil, errors.New("Order must be bool")
		}
	}
	if v, ok := optional["Qps"]; ok {
		if Qps, ok := v.(int64); ok {
			args.Query.Set("Qps", fmt.Sprint(Qps))
		} else {
			return nil, errors.New("Qps must be int64")
		}
	}
	if v, ok := optional["QueueNum"]; ok {
		if QueueNum, ok := v.(int); ok {
			args.Query.Set("QueueNum", fmt.Sprint(QueueNum))
		} else {
			return nil, errors.New("QueueNum must be int")
		}
	}
	if v, ok := optional["Remark"]; ok {
		if Remark, ok := v.(string); ok {
			args.Query.Set("Remark", Remark)
		} else {
			return nil, errors.New("Remark must be string")
		}
	}
	if v, ok := optional["Status"]; ok {
		if Status, ok := v.(int); ok {
			args.Query.Set("Status", fmt.Sprint(Status))
		} else {
			return nil, errors.New("Status must be int")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(OnsTopicCreateResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// OnsTopicCreateResponse represents the response of the api OnsTopicCreate.
type OnsTopicCreateResponse struct {
	HelpUrl string
}

// OnsTopicDelete version 2015-10-20
//
// required parameters:
//  name: OnsRegionId, type: string
//  name: PreventCache, type: int64
//  name: Topic, type: string
//
// optional parameters:
//  name: Cluster, type: string
//  name: OnsPlatform, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) OnsTopicDelete(OnsRegionId string, PreventCache int64, Topic string, optional openapi.M) (*OnsTopicDeleteResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "OnsTopicDelete")
	args.Query.Set("OnsRegionId", OnsRegionId)
	args.Query.Set("PreventCache", fmt.Sprint(PreventCache))
	args.Query.Set("Topic", Topic)
	if v, ok := optional["Cluster"]; ok {
		if Cluster, ok := v.(string); ok {
			args.Query.Set("Cluster", Cluster)
		} else {
			return nil, errors.New("Cluster must be string")
		}
	}
	if v, ok := optional["OnsPlatform"]; ok {
		if OnsPlatform, ok := v.(string); ok {
			args.Query.Set("OnsPlatform", OnsPlatform)
		} else {
			return nil, errors.New("OnsPlatform must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(OnsTopicDeleteResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// OnsTopicDeleteResponse represents the response of the api OnsTopicDelete.
type OnsTopicDeleteResponse struct {
	HelpUrl string
}

// OnsTopicGet version 2015-10-20
//
// required parameters:
//  name: OnsRegionId, type: string
//  name: PreventCache, type: int64
//  name: Topic, type: string
//
// optional parameters:
//  name: OnsPlatform, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) OnsTopicGet(OnsRegionId string, PreventCache int64, Topic string, optional openapi.M) (*OnsTopicGetResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "OnsTopicGet")
	args.Query.Set("OnsRegionId", OnsRegionId)
	args.Query.Set("PreventCache", fmt.Sprint(PreventCache))
	args.Query.Set("Topic", Topic)
	if v, ok := optional["OnsPlatform"]; ok {
		if OnsPlatform, ok := v.(string); ok {
			args.Query.Set("OnsPlatform", OnsPlatform)
		} else {
			return nil, errors.New("OnsPlatform must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(OnsTopicGetResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// OnsTopicGetResponse represents the response of the api OnsTopicGet.
type OnsTopicGetResponse struct {
	Data struct {
		PublishInfoDo []struct {
			Appkey       int
			ChannelId    int
			ChannelName  string
			CreateTime   int64
			Id           int64
			Owner        string
			RegionId     string
			RegionName   string
			Relation     int
			RelationName string
			Remark       string
			Status       int
			StatusName   string
			Topic        string
			UpdateTime   int64
		}
	}
	HelpUrl string
}

// OnsTopicList version 2015-10-20
//
// required parameters:
//  name: OnsRegionId, type: string
//  name: PreventCache, type: int64
//
// optional parameters:
//  name: OnsPlatform, type: string
//  name: Topic, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) OnsTopicList(OnsRegionId string, PreventCache int64, optional openapi.M) (*OnsTopicListResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "OnsTopicList")
	args.Query.Set("OnsRegionId", OnsRegionId)
	args.Query.Set("PreventCache", fmt.Sprint(PreventCache))
	if v, ok := optional["OnsPlatform"]; ok {
		if OnsPlatform, ok := v.(string); ok {
			args.Query.Set("OnsPlatform", OnsPlatform)
		} else {
			return nil, errors.New("OnsPlatform must be string")
		}
	}
	if v, ok := optional["Topic"]; ok {
		if Topic, ok := v.(string); ok {
			args.Query.Set("Topic", Topic)
		} else {
			return nil, errors.New("Topic must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(OnsTopicListResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// OnsTopicListResponse represents the response of the api OnsTopicList.
type OnsTopicListResponse struct {
	Data struct {
		PublishInfoDo []struct {
			Appkey       int
			ChannelId    int
			ChannelName  string
			CreateTime   int64
			Id           int64
			Owner        string
			RegionId     string
			RegionName   string
			Relation     int
			RelationName string
			Remark       string
			Status       int
			StatusName   string
			Topic        string
			UpdateTime   int64
		}
	}
	HelpUrl string
}

// OnsTopicSearch version 2015-10-20
//
// required parameters:
//  name: OnsRegionId, type: string
//  name: PreventCache, type: int64
//  name: Search, type: string
//
// optional parameters:
//  name: OnsPlatform, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) OnsTopicSearch(OnsRegionId string, PreventCache int64, Search string, optional openapi.M) (*OnsTopicSearchResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "OnsTopicSearch")
	args.Query.Set("OnsRegionId", OnsRegionId)
	args.Query.Set("PreventCache", fmt.Sprint(PreventCache))
	args.Query.Set("Search", Search)
	if v, ok := optional["OnsPlatform"]; ok {
		if OnsPlatform, ok := v.(string); ok {
			args.Query.Set("OnsPlatform", OnsPlatform)
		} else {
			return nil, errors.New("OnsPlatform must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(OnsTopicSearchResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// OnsTopicSearchResponse represents the response of the api OnsTopicSearch.
type OnsTopicSearchResponse struct {
	Data struct {
		PublishInfoDo []struct {
			Appkey       int
			ChannelId    int
			ChannelName  string
			CreateTime   int64
			Id           int64
			Owner        string
			RegionId     string
			RegionName   string
			Relation     int
			RelationName string
			Remark       string
			Status       int
			StatusName   string
			Topic        string
			UpdateTime   int64
		}
	}
	HelpUrl string
}

// OnsTopicStatus version 2015-10-20
//
// required parameters:
//  name: OnsRegionId, type: string
//  name: PreventCache, type: int64
//  name: Topic, type: string
//
// optional parameters:
//  name: Detail, type: bool
//  name: OnsPlatform, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) OnsTopicStatus(OnsRegionId string, PreventCache int64, Topic string, optional openapi.M) (*OnsTopicStatusResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "OnsTopicStatus")
	args.Query.Set("OnsRegionId", OnsRegionId)
	args.Query.Set("PreventCache", fmt.Sprint(PreventCache))
	args.Query.Set("Topic", Topic)
	if v, ok := optional["Detail"]; ok {
		if Detail, ok := v.(bool); ok {
			args.Query.Set("Detail", fmt.Sprint(Detail))
		} else {
			return nil, errors.New("Detail must be bool")
		}
	}
	if v, ok := optional["OnsPlatform"]; ok {
		if OnsPlatform, ok := v.(string); ok {
			args.Query.Set("OnsPlatform", OnsPlatform)
		} else {
			return nil, errors.New("OnsPlatform must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(OnsTopicStatusResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// OnsTopicStatusResponse represents the response of the api OnsTopicStatus.
type OnsTopicStatusResponse struct {
	Data struct {
		LastTimeStamp int64
		OffsetTable   struct {
			TopicQueueOffset []struct {
				BrokerName          string
				LastUpdateTimestamp int64
				MaxOffset           int64
				MinOffset           int64
				QueueId             int
				Topic               string
			}
		}
		TotalCount int64
	}
	HelpUrl string
}

// OnsTrendClusterInputTps version 2015-10-20
//
// required parameters:
//  name: Cluster, type: string
//  name: OnsRegionId, type: string
//  name: PreventCache, type: int64
//
// optional parameters:
//  name: BeginTime, type: int64
//  name: EndTime, type: int64
//  name: OnsPlatform, type: string
//  name: Period, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) OnsTrendClusterInputTps(Cluster, OnsRegionId string, PreventCache int64, optional openapi.M) (*OnsTrendClusterInputTpsResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "OnsTrendClusterInputTps")
	args.Query.Set("Cluster", Cluster)
	args.Query.Set("OnsRegionId", OnsRegionId)
	args.Query.Set("PreventCache", fmt.Sprint(PreventCache))
	if v, ok := optional["BeginTime"]; ok {
		if BeginTime, ok := v.(int64); ok {
			args.Query.Set("BeginTime", fmt.Sprint(BeginTime))
		} else {
			return nil, errors.New("BeginTime must be int64")
		}
	}
	if v, ok := optional["EndTime"]; ok {
		if EndTime, ok := v.(int64); ok {
			args.Query.Set("EndTime", fmt.Sprint(EndTime))
		} else {
			return nil, errors.New("EndTime must be int64")
		}
	}
	if v, ok := optional["OnsPlatform"]; ok {
		if OnsPlatform, ok := v.(string); ok {
			args.Query.Set("OnsPlatform", OnsPlatform)
		} else {
			return nil, errors.New("OnsPlatform must be string")
		}
	}
	if v, ok := optional["Period"]; ok {
		if Period, ok := v.(int64); ok {
			args.Query.Set("Period", fmt.Sprint(Period))
		} else {
			return nil, errors.New("Period must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(OnsTrendClusterInputTpsResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// OnsTrendClusterInputTpsResponse represents the response of the api OnsTrendClusterInputTps.
type OnsTrendClusterInputTpsResponse struct {
	Data struct {
		Records struct {
			StatsDataDo []struct {
				X int64
				Y float32
			}
		}
		Title string
		XUnit string
		YUnit string
	}
	HelpUrl string
}

// OnsTrendClusterOutputTps version 2015-10-20
//
// required parameters:
//  name: Cluster, type: string
//  name: OnsRegionId, type: string
//  name: PreventCache, type: int64
//
// optional parameters:
//  name: BeginTime, type: int64
//  name: EndTime, type: int64
//  name: OnsPlatform, type: string
//  name: Period, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) OnsTrendClusterOutputTps(Cluster, OnsRegionId string, PreventCache int64, optional openapi.M) (*OnsTrendClusterOutputTpsResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "OnsTrendClusterOutputTps")
	args.Query.Set("Cluster", Cluster)
	args.Query.Set("OnsRegionId", OnsRegionId)
	args.Query.Set("PreventCache", fmt.Sprint(PreventCache))
	if v, ok := optional["BeginTime"]; ok {
		if BeginTime, ok := v.(int64); ok {
			args.Query.Set("BeginTime", fmt.Sprint(BeginTime))
		} else {
			return nil, errors.New("BeginTime must be int64")
		}
	}
	if v, ok := optional["EndTime"]; ok {
		if EndTime, ok := v.(int64); ok {
			args.Query.Set("EndTime", fmt.Sprint(EndTime))
		} else {
			return nil, errors.New("EndTime must be int64")
		}
	}
	if v, ok := optional["OnsPlatform"]; ok {
		if OnsPlatform, ok := v.(string); ok {
			args.Query.Set("OnsPlatform", OnsPlatform)
		} else {
			return nil, errors.New("OnsPlatform must be string")
		}
	}
	if v, ok := optional["Period"]; ok {
		if Period, ok := v.(int64); ok {
			args.Query.Set("Period", fmt.Sprint(Period))
		} else {
			return nil, errors.New("Period must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(OnsTrendClusterOutputTpsResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// OnsTrendClusterOutputTpsResponse represents the response of the api OnsTrendClusterOutputTps.
type OnsTrendClusterOutputTpsResponse struct {
	Data struct {
		Records struct {
			StatsDataDo []struct {
				X int64
				Y float32
			}
		}
		Title string
		XUnit string
		YUnit string
	}
	HelpUrl string
}

// OnsTrendGetMachineSar version 2015-10-20
//
// required parameters:
//  name: HostIp, type: string
//  name: OnsRegionId, type: string
//  name: PreventCache, type: int64
//
// optional parameters:
//  name: AppId, type: string
//  name: BeginTime, type: int64
//  name: EndTime, type: int64
//  name: Metric, type: string
//  name: OnsPlatform, type: string
//  name: Period, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) OnsTrendGetMachineSar(HostIp, OnsRegionId string, PreventCache int64, optional openapi.M) (*OnsTrendGetMachineSarResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "OnsTrendGetMachineSar")
	args.Query.Set("HostIp", HostIp)
	args.Query.Set("OnsRegionId", OnsRegionId)
	args.Query.Set("PreventCache", fmt.Sprint(PreventCache))
	if v, ok := optional["AppId"]; ok {
		if AppId, ok := v.(string); ok {
			args.Query.Set("AppId", AppId)
		} else {
			return nil, errors.New("AppId must be string")
		}
	}
	if v, ok := optional["BeginTime"]; ok {
		if BeginTime, ok := v.(int64); ok {
			args.Query.Set("BeginTime", fmt.Sprint(BeginTime))
		} else {
			return nil, errors.New("BeginTime must be int64")
		}
	}
	if v, ok := optional["EndTime"]; ok {
		if EndTime, ok := v.(int64); ok {
			args.Query.Set("EndTime", fmt.Sprint(EndTime))
		} else {
			return nil, errors.New("EndTime must be int64")
		}
	}
	if v, ok := optional["Metric"]; ok {
		if Metric, ok := v.(string); ok {
			args.Query.Set("Metric", Metric)
		} else {
			return nil, errors.New("Metric must be string")
		}
	}
	if v, ok := optional["OnsPlatform"]; ok {
		if OnsPlatform, ok := v.(string); ok {
			args.Query.Set("OnsPlatform", OnsPlatform)
		} else {
			return nil, errors.New("OnsPlatform must be string")
		}
	}
	if v, ok := optional["Period"]; ok {
		if Period, ok := v.(int64); ok {
			args.Query.Set("Period", fmt.Sprint(Period))
		} else {
			return nil, errors.New("Period must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(OnsTrendGetMachineSarResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// OnsTrendGetMachineSarResponse represents the response of the api OnsTrendGetMachineSar.
type OnsTrendGetMachineSarResponse struct {
	Data struct {
		Records struct {
			StatsDataDo []struct {
				X int64
				Y float32
			}
		}
		Title string
		XUnit string
		YUnit string
	}
	HelpUrl string
}

// OnsTrendGroupOutputTps version 2015-10-20
//
// required parameters:
//  name: ConsumerId, type: string
//  name: OnsRegionId, type: string
//  name: PreventCache, type: int64
//  name: Topic, type: string
//
// optional parameters:
//  name: BeginTime, type: int64
//  name: EndTime, type: int64
//  name: OnsPlatform, type: string
//  name: Period, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) OnsTrendGroupOutputTps(ConsumerId, OnsRegionId string, PreventCache int64, Topic string, optional openapi.M) (*OnsTrendGroupOutputTpsResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "OnsTrendGroupOutputTps")
	args.Query.Set("ConsumerId", ConsumerId)
	args.Query.Set("OnsRegionId", OnsRegionId)
	args.Query.Set("PreventCache", fmt.Sprint(PreventCache))
	args.Query.Set("Topic", Topic)
	if v, ok := optional["BeginTime"]; ok {
		if BeginTime, ok := v.(int64); ok {
			args.Query.Set("BeginTime", fmt.Sprint(BeginTime))
		} else {
			return nil, errors.New("BeginTime must be int64")
		}
	}
	if v, ok := optional["EndTime"]; ok {
		if EndTime, ok := v.(int64); ok {
			args.Query.Set("EndTime", fmt.Sprint(EndTime))
		} else {
			return nil, errors.New("EndTime must be int64")
		}
	}
	if v, ok := optional["OnsPlatform"]; ok {
		if OnsPlatform, ok := v.(string); ok {
			args.Query.Set("OnsPlatform", OnsPlatform)
		} else {
			return nil, errors.New("OnsPlatform must be string")
		}
	}
	if v, ok := optional["Period"]; ok {
		if Period, ok := v.(int64); ok {
			args.Query.Set("Period", fmt.Sprint(Period))
		} else {
			return nil, errors.New("Period must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(OnsTrendGroupOutputTpsResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// OnsTrendGroupOutputTpsResponse represents the response of the api OnsTrendGroupOutputTps.
type OnsTrendGroupOutputTpsResponse struct {
	Data struct {
		Records struct {
			StatsDataDo []struct {
				X int64
				Y float32
			}
		}
		Title string
		XUnit string
		YUnit string
	}
	HelpUrl string
}

// OnsTrendTopicInputTps version 2015-10-20
//
// required parameters:
//  name: OnsRegionId, type: string
//  name: PreventCache, type: int64
//  name: Topic, type: string
//
// optional parameters:
//  name: BeginTime, type: int64
//  name: EndTime, type: int64
//  name: OnsPlatform, type: string
//  name: Period, type: int64
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) OnsTrendTopicInputTps(OnsRegionId string, PreventCache int64, Topic string, optional openapi.M) (*OnsTrendTopicInputTpsResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "OnsTrendTopicInputTps")
	args.Query.Set("OnsRegionId", OnsRegionId)
	args.Query.Set("PreventCache", fmt.Sprint(PreventCache))
	args.Query.Set("Topic", Topic)
	if v, ok := optional["BeginTime"]; ok {
		if BeginTime, ok := v.(int64); ok {
			args.Query.Set("BeginTime", fmt.Sprint(BeginTime))
		} else {
			return nil, errors.New("BeginTime must be int64")
		}
	}
	if v, ok := optional["EndTime"]; ok {
		if EndTime, ok := v.(int64); ok {
			args.Query.Set("EndTime", fmt.Sprint(EndTime))
		} else {
			return nil, errors.New("EndTime must be int64")
		}
	}
	if v, ok := optional["OnsPlatform"]; ok {
		if OnsPlatform, ok := v.(string); ok {
			args.Query.Set("OnsPlatform", OnsPlatform)
		} else {
			return nil, errors.New("OnsPlatform must be string")
		}
	}
	if v, ok := optional["Period"]; ok {
		if Period, ok := v.(int64); ok {
			args.Query.Set("Period", fmt.Sprint(Period))
		} else {
			return nil, errors.New("Period must be int64")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(OnsTrendTopicInputTpsResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// OnsTrendTopicInputTpsResponse represents the response of the api OnsTrendTopicInputTps.
type OnsTrendTopicInputTpsResponse struct {
	Data struct {
		Records struct {
			StatsDataDo []struct {
				X int64
				Y float32
			}
		}
		Title string
		XUnit string
		YUnit string
	}
	HelpUrl string
}

// OnsWarnAdmin version 2015-10-20
//
// required parameters:
//  name: ConsumerId, type: string
//  name: OnsRegionId, type: string
//  name: PreventCache, type: int64
//  name: Topic, type: string
//  name: Type, type: string
//  name: UserId, type: string
//
// optional parameters:
//  name: OnsPlatform, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) OnsWarnAdmin(ConsumerId, OnsRegionId string, PreventCache int64, Topic, Type, UserId string, optional openapi.M) (*OnsWarnAdminResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "OnsWarnAdmin")
	args.Query.Set("ConsumerId", ConsumerId)
	args.Query.Set("OnsRegionId", OnsRegionId)
	args.Query.Set("PreventCache", fmt.Sprint(PreventCache))
	args.Query.Set("Topic", Topic)
	args.Query.Set("Type", Type)
	args.Query.Set("UserId", UserId)
	if v, ok := optional["OnsPlatform"]; ok {
		if OnsPlatform, ok := v.(string); ok {
			args.Query.Set("OnsPlatform", OnsPlatform)
		} else {
			return nil, errors.New("OnsPlatform must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(OnsWarnAdminResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// OnsWarnAdminResponse represents the response of the api OnsWarnAdmin.
type OnsWarnAdminResponse struct {
	HelpUrl string
}

// OnsWarnCreate version 2015-10-20
//
// required parameters:
//  name: ConsumerId, type: string
//  name: Contacts, type: string
//  name: OnsRegionId, type: string
//  name: PreventCache, type: int64
//  name: Threshold, type: string
//  name: Topic, type: string
//
// optional parameters:
//  name: OnsPlatform, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) OnsWarnCreate(ConsumerId, Contacts, OnsRegionId string, PreventCache int64, Threshold, Topic string, optional openapi.M) (*OnsWarnCreateResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "OnsWarnCreate")
	args.Query.Set("ConsumerId", ConsumerId)
	args.Query.Set("Contacts", Contacts)
	args.Query.Set("OnsRegionId", OnsRegionId)
	args.Query.Set("PreventCache", fmt.Sprint(PreventCache))
	args.Query.Set("Threshold", Threshold)
	args.Query.Set("Topic", Topic)
	if v, ok := optional["OnsPlatform"]; ok {
		if OnsPlatform, ok := v.(string); ok {
			args.Query.Set("OnsPlatform", OnsPlatform)
		} else {
			return nil, errors.New("OnsPlatform must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(OnsWarnCreateResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// OnsWarnCreateResponse represents the response of the api OnsWarnCreate.
type OnsWarnCreateResponse struct {
	HelpUrl string
}

// OnsWarnDelete version 2015-10-20
//
// required parameters:
//  name: ConsumerId, type: string
//  name: OnsRegionId, type: string
//  name: PreventCache, type: int64
//  name: Topic, type: string
//
// optional parameters:
//  name: OnsPlatform, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) OnsWarnDelete(ConsumerId, OnsRegionId string, PreventCache int64, Topic string, optional openapi.M) (*OnsWarnDeleteResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "OnsWarnDelete")
	args.Query.Set("ConsumerId", ConsumerId)
	args.Query.Set("OnsRegionId", OnsRegionId)
	args.Query.Set("PreventCache", fmt.Sprint(PreventCache))
	args.Query.Set("Topic", Topic)
	if v, ok := optional["OnsPlatform"]; ok {
		if OnsPlatform, ok := v.(string); ok {
			args.Query.Set("OnsPlatform", OnsPlatform)
		} else {
			return nil, errors.New("OnsPlatform must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(OnsWarnDeleteResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// OnsWarnDeleteResponse represents the response of the api OnsWarnDelete.
type OnsWarnDeleteResponse struct {
	HelpUrl string
}

// OnsWarnDisable version 2015-10-20
//
// required parameters:
//  name: ConsumerId, type: string
//  name: OnsRegionId, type: string
//  name: PreventCache, type: int64
//  name: Topic, type: string
//
// optional parameters:
//  name: OnsPlatform, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) OnsWarnDisable(ConsumerId, OnsRegionId string, PreventCache int64, Topic string, optional openapi.M) (*OnsWarnDisableResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "OnsWarnDisable")
	args.Query.Set("ConsumerId", ConsumerId)
	args.Query.Set("OnsRegionId", OnsRegionId)
	args.Query.Set("PreventCache", fmt.Sprint(PreventCache))
	args.Query.Set("Topic", Topic)
	if v, ok := optional["OnsPlatform"]; ok {
		if OnsPlatform, ok := v.(string); ok {
			args.Query.Set("OnsPlatform", OnsPlatform)
		} else {
			return nil, errors.New("OnsPlatform must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(OnsWarnDisableResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// OnsWarnDisableResponse represents the response of the api OnsWarnDisable.
type OnsWarnDisableResponse struct {
	HelpUrl string
}

// OnsWarnEditor version 2015-10-20
//
// required parameters:
//  name: ConsumerId, type: string
//  name: Contacts, type: string
//  name: OnsRegionId, type: string
//  name: PreventCache, type: int64
//  name: Threshold, type: string
//  name: Topic, type: string
//
// optional parameters:
//  name: OnsPlatform, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) OnsWarnEditor(ConsumerId, Contacts, OnsRegionId string, PreventCache int64, Threshold, Topic string, optional openapi.M) (*OnsWarnEditorResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "OnsWarnEditor")
	args.Query.Set("ConsumerId", ConsumerId)
	args.Query.Set("Contacts", Contacts)
	args.Query.Set("OnsRegionId", OnsRegionId)
	args.Query.Set("PreventCache", fmt.Sprint(PreventCache))
	args.Query.Set("Threshold", Threshold)
	args.Query.Set("Topic", Topic)
	if v, ok := optional["OnsPlatform"]; ok {
		if OnsPlatform, ok := v.(string); ok {
			args.Query.Set("OnsPlatform", OnsPlatform)
		} else {
			return nil, errors.New("OnsPlatform must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(OnsWarnEditorResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// OnsWarnEditorResponse represents the response of the api OnsWarnEditor.
type OnsWarnEditorResponse struct {
	HelpUrl string
}

// OnsWarnEnable version 2015-10-20
//
// required parameters:
//  name: ConsumerId, type: string
//  name: OnsRegionId, type: string
//  name: PreventCache, type: int64
//  name: Topic, type: string
//
// optional parameters:
//  name: OnsPlatform, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) OnsWarnEnable(ConsumerId, OnsRegionId string, PreventCache int64, Topic string, optional openapi.M) (*OnsWarnEnableResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "OnsWarnEnable")
	args.Query.Set("ConsumerId", ConsumerId)
	args.Query.Set("OnsRegionId", OnsRegionId)
	args.Query.Set("PreventCache", fmt.Sprint(PreventCache))
	args.Query.Set("Topic", Topic)
	if v, ok := optional["OnsPlatform"]; ok {
		if OnsPlatform, ok := v.(string); ok {
			args.Query.Set("OnsPlatform", OnsPlatform)
		} else {
			return nil, errors.New("OnsPlatform must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(OnsWarnEnableResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// OnsWarnEnableResponse represents the response of the api OnsWarnEnable.
type OnsWarnEnableResponse struct {
	HelpUrl string
}

// OnsWarnList version 2015-10-20
//
// required parameters:
//  name: ConsumerId, type: string
//  name: OnsRegionId, type: string
//  name: PreventCache, type: int64
//  name: Topic, type: string
//
// optional parameters:
//  name: OnsPlatform, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) OnsWarnList(ConsumerId, OnsRegionId string, PreventCache int64, Topic string, optional openapi.M) (*OnsWarnListResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "OnsWarnList")
	args.Query.Set("ConsumerId", ConsumerId)
	args.Query.Set("OnsRegionId", OnsRegionId)
	args.Query.Set("PreventCache", fmt.Sprint(PreventCache))
	args.Query.Set("Topic", Topic)
	if v, ok := optional["OnsPlatform"]; ok {
		if OnsPlatform, ok := v.(string); ok {
			args.Query.Set("OnsPlatform", OnsPlatform)
		} else {
			return nil, errors.New("OnsPlatform must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(OnsWarnListResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// OnsWarnListResponse represents the response of the api OnsWarnList.
type OnsWarnListResponse struct {
	Data struct {
		WarnViewDO []struct {
			AliyunPK   string
			ConsumerID string
			Contacts   struct {
				YunContact []struct {
					Ari    string
					Name   string
					Params string
					Type   string
					Value  string
				}
			} `json:"contacts" xml:"contacts"`
			Status    bool
			Threshold string
			Topic     string
		}
	}
	HelpUrl string
}
