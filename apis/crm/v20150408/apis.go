// Copyright 2015 Chen Xianren. All rights reserved.
// Code generated by openapi-meta; DO NOT EDIT

package crm // import "github.com/cxr29/aliyun-openapi-go-sdk/apis/crm/v20150408"

import (
	"errors"
	"fmt"

	"github.com/cxr29/aliyun-openapi-go-sdk"
)

var (
	_ = errors.New("")
	_ = fmt.Sprint("")
)

type API struct {
	openapi.Service
}

func New(accessKeyId, accessKeySecret string) API {
	return API{openapi.NewService(accessKeyId, accessKeySecret)}
}

func NewParams() openapi.Params {
	args := openapi.NewParams()
	args.Product = Product
	args.Style = Style
	args.Version = Version
	return args
}

const (
	Product = "Crm"
	Style   = "RPC"
	Version = "2015-04-08"
)

// AddLabel version 2015-04-08
//
// optional parameters:
//  name: EndTime, type: string
//  name: LabelName, type: string
//  name: LabelSeries, type: string
//  name: PK, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) AddLabel(optional openapi.M) (*AddLabelResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "AddLabel")
	if v, ok := optional["EndTime"]; ok {
		if EndTime, ok := v.(string); ok {
			args.Query.Set("EndTime", EndTime)
		} else {
			return nil, errors.New("EndTime must be string")
		}
	}
	if v, ok := optional["LabelName"]; ok {
		if LabelName, ok := v.(string); ok {
			args.Query.Set("LabelName", LabelName)
		} else {
			return nil, errors.New("LabelName must be string")
		}
	}
	if v, ok := optional["LabelSeries"]; ok {
		if LabelSeries, ok := v.(string); ok {
			args.Query.Set("LabelSeries", LabelSeries)
		} else {
			return nil, errors.New("LabelSeries must be string")
		}
	}
	if v, ok := optional["PK"]; ok {
		if PK, ok := v.(string); ok {
			args.Query.Set("PK", PK)
		} else {
			return nil, errors.New("PK must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(AddLabelResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// AddLabelResponse represents the response of the api AddLabel.
type AddLabelResponse struct {
	Result string
}

// CheckLabel version 2015-04-08
//
// optional parameters:
//  name: LabelName, type: string
//  name: LabelSeries, type: string
//  name: PK, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) CheckLabel(optional openapi.M) (*CheckLabelResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "CheckLabel")
	if v, ok := optional["LabelName"]; ok {
		if LabelName, ok := v.(string); ok {
			args.Query.Set("LabelName", LabelName)
		} else {
			return nil, errors.New("LabelName must be string")
		}
	}
	if v, ok := optional["LabelSeries"]; ok {
		if LabelSeries, ok := v.(string); ok {
			args.Query.Set("LabelSeries", LabelSeries)
		} else {
			return nil, errors.New("LabelSeries must be string")
		}
	}
	if v, ok := optional["PK"]; ok {
		if PK, ok := v.(string); ok {
			args.Query.Set("PK", PK)
		} else {
			return nil, errors.New("PK must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(CheckLabelResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// CheckLabelResponse represents the response of the api CheckLabel.
type CheckLabelResponse struct {
	Result bool
}

// DeleteLabel version 2015-04-08
//
// optional parameters:
//  name: LabelName, type: string
//  name: LabelSeries, type: string
//  name: PK, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) DeleteLabel(optional openapi.M) (*DeleteLabelResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "DeleteLabel")
	if v, ok := optional["LabelName"]; ok {
		if LabelName, ok := v.(string); ok {
			args.Query.Set("LabelName", LabelName)
		} else {
			return nil, errors.New("LabelName must be string")
		}
	}
	if v, ok := optional["LabelSeries"]; ok {
		if LabelSeries, ok := v.(string); ok {
			args.Query.Set("LabelSeries", LabelSeries)
		} else {
			return nil, errors.New("LabelSeries must be string")
		}
	}
	if v, ok := optional["PK"]; ok {
		if PK, ok := v.(string); ok {
			args.Query.Set("PK", PK)
		} else {
			return nil, errors.New("PK must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(DeleteLabelResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// DeleteLabelResponse represents the response of the api DeleteLabel.
type DeleteLabelResponse struct {
	Result string
}

// QueryCustomerLabel version 2015-04-08
//
// optional parameters:
//  name: LabelSeries, type: string
//  name: _method, type: string, optional values: GET|POST
//  name: _region, type: string
//  name: _scheme, type: string, optional values: http|https
func (api API) QueryCustomerLabel(optional openapi.M) (*QueryCustomerLabelResponse, error) {
	args := NewParams()

	args.Query.Set("Action", "QueryCustomerLabel")
	if v, ok := optional["LabelSeries"]; ok {
		if LabelSeries, ok := v.(string); ok {
			args.Query.Set("LabelSeries", LabelSeries)
		} else {
			return nil, errors.New("LabelSeries must be string")
		}
	}
	if v, ok := optional["_method"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "GET|POST") {
				return nil, errors.New("_method must be GET|POST")
			}
			args.Method = s
		} else {
			return nil, errors.New("_method must be string")
		}
	}
	if v, ok := optional["_region"]; ok {
		if s, ok := v.(string); ok {
			args.Region = s
		} else {
			return nil, errors.New("_region must be string")
		}
	}
	if v, ok := optional["_scheme"]; ok {
		if s, ok := v.(string); ok {
			if !openapi.IsIn(s, "http|https") {
				return nil, errors.New("_scheme must be http|https")
			}
			args.Scheme = s
		} else {
			return nil, errors.New("_scheme must be string")
		}
	}

	result := new(QueryCustomerLabelResponse)
	if err := api.Service.Do(result, args); err != nil {
		return nil, err
	}
	return result, nil
}

// QueryCustomerLabelResponse represents the response of the api QueryCustomerLabel.
type QueryCustomerLabelResponse struct {
	Code string
	Data struct {
		CustomerLabel []struct {
			Label       string
			LabelSeries string
		}
	}
	Message string
	Success bool
}
