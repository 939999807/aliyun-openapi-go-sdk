// Copyright 2015 Chen Xianren. All rights reserved.

package main

import (
	"bytes"
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
)

func main() {
	a, err := filepath.Glob("openapi-meta/api-metadata/aliyun-api-metadata-*/*/Version-Info.json")
	ErrFatal(err)
	for _, info := range a {
		vi := new(VersionInfo)
		readJSON(info, vi)

		dir, _ := filepath.Split(info)
		b, err := filepath.Glob(filepath.Join(dir, "Api", "*.json"))
		ErrFatal(err)

		pkg := vi.Package()

		buf := new(bytes.Buffer)

		buf.WriteString("// Copyright 2015 Chen Xianren. All rights reserved.\n")
		buf.WriteString("// Code generated by openapi-meta; DO NOT EDIT\n\n")
		buf.WriteString(fmt.Sprintf("package %s\n", pkg))

		buf.WriteString(`
import (
	"errors"
	"fmt"

	"git.oschina.net/cxr29/aliyun-openapi-go-sdk"
)

var (
	_ = errors.New("")
	_ = fmt.Sprint("")
	_ = make(openapi.M)
)

type API struct {
	openapi.Service
}

func New(accessKeyId, accessKeySecret string) API {
	return API{openapi.NewService(accessKeyId, accessKeySecret)}
}

func NewParams() openapi.Params {
	args := openapi.NewParams()
	args.Product = Product
	args.Style = Style
	args.Version = Version
	return args
}
`)

		buf.WriteString(fmt.Sprintf("const (\nProduct = %q\nStyle = %q\nVersion = %q\n)\n", vi.Product, vi.APIStyle, vi.Name))

		for _, i := range b {
			api := new(API)
			readJSON(i, api)

			api.Clean()
			action := api.Action()

			name := MustExport(api.Name)

			buf.WriteString(fmt.Sprintf("\n// %s version %s\n", name, api.Version))

			a := api.GenerateParameters()
			if len(a[0]) > 0 {
				buf.WriteString("//\n// required parameters:\n//  ")
				buf.WriteString(strings.Join(a[0], "\n//  "))
				buf.WriteByte('\n')
			}
			if len(a[3]) > 0 {
				buf.WriteString("//\n// optional parameters:\n//  ")
				buf.WriteString(strings.Join(a[3], "\n//  "))
				buf.WriteByte('\n')
			}

			typ, response := api.GenerateResultMapping()

			buf.WriteString(fmt.Sprintf(`func (api API) %s(%s) (*%s, error) {
args := NewParams()

args.Query.Set("Action", %q)
`, name, strings.Join(a[1], ", "), typ, action))

			if len(a[2]) > 0 {
				buf.WriteString(strings.Join(a[2], "\n"))
				buf.WriteByte('\n')
			}

			buf.WriteString(fmt.Sprintf("\nresult := new(%s)\n", typ))
			buf.WriteString(`if err := api.Service.Do(result, args); err != nil {
	return nil, err
}
return result, nil
}
`)

			if response != "" {
				buf.WriteString(fmt.Sprintf("// %s represents the response of the api %s.\n", typ, name))
				buf.WriteString(response)
			}
		}

		dir = filepath.Join("../apis", pkg, "v"+strings.Replace(vi.Name, "-", "", -1))
		ErrFatal(os.MkdirAll(dir, 0755))
		ioutil.WriteFile(filepath.Join(dir, "apis.go"), buf.Bytes(), 0644)
	}
}
